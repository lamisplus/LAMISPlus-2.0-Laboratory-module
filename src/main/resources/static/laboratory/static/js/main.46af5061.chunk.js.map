{"version":3,"sources":["main/webapp/api.js","main/webapp/jsx/components/Laboratory/Testorders/LabTestOrderSearch.js","main/webapp/jsx/components/Laboratory/TestResult/LabTestResultSearch.js","main/webapp/jsx/components/Laboratory/Sampleverifications/LabTestVerifySampleSearch.js","main/webapp/jsx/components/Home.js","main/webapp/jsx/components/Patient/PatientCard.js","main/webapp/jsx/components/Laboratory/TestResult/ViewResult.js","main/webapp/jsx/components/Laboratory/SampleCollection/CollectSampleModal.js","main/webapp/jsx/components/Laboratory/SampleCollection/SampleList.js","main/webapp/jsx/components/Laboratory/SampleCollection/Index.js","main/webapp/jsx/components/Laboratory/Sampleverifications/SampleVerification.js","main/webapp/jsx/components/Laboratory/Sampleverifications/SampleList.js","main/webapp/jsx/components/Laboratory/Sampleverifications/Index.js","main/webapp/jsx/components/Laboratory/TestResult/EnterResult.js","main/webapp/jsx/components/Laboratory/TestResult/SampleList.js","main/webapp/jsx/components/Laboratory/TestResult/Index.js","main/webapp/jsx/components/Laboratory/LabTestOrder/CreateTestorder.js","main/webapp/jsx/components/Laboratory/LabTestOrder/RecentActivities.js","main/webapp/jsx/components/Laboratory/LabTestOrder/PatientTestOrderHistory.js","App.js","main/webapp/reportWebVitals.js","main/webapp/context/ThemeDemo.js","main/webapp/context/ThemeContext.js","index.js"],"names":["url","token","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","PatientSearch","useState","setLoading","collectedSamples","setCollectedSamples","loadLabTestData","useCallback","axios","get","headers","response","data","toast","error","position","POSITION","TOP_RIGHT","useEffect","icons","title","columns","field","type","filtering","map","row","Id","patientHospitalNumber","name","patientFirstName","patientLastName","date","orderDate","orderTime","count","testOrders","samplecount","sampleVerified","verifiedSamples","sampleresults","reportedResults","actions","to","pathname","state","style","cursor","color","fontStyle","Tooltip","IconButton","options","headerStyle","backgroundColor","searchFieldStyle","width","margingLeft","exportButton","searchFieldAlignment","pageSizeOptions","pageSize","debounceInterval","console","log","samples","sampleverified","divStyle","borderRadius","fontSize","Home","key","setKey","urlTabs","location","Row","Col","xl","Card","Body","className","Tabs","id","activeKey","onSelect","k","Tab","eventKey","LabTestOrderSearch","LabTestVerifySampleSearch","LabTestResultSearch","withStyles","theme","root","heading","typography","pxToRem","secondaryHeading","palette","text","secondary","icon","verticalAlign","height","details","alignItems","column","flexBasis","helper","borderLeft","divider","padding","spacing","unit","link","primary","main","textDecoration","currentStatus","patient","classes","patientObj","ExpansionPanel","defaultExpanded","ExpansionPanelSummary","expandIcon","md","root2","patientId","patientDob","dob","today","Date","dateParts","split","dateObject","birthDate","age_now","getFullYear","m","getMonth","getDate","calculate_age","moment","format","patientGender","patientPhoneNumber","vaccination_status","Label","size","current_status","ExpansionPanelActions","useStyles","makeStyles","card","margin","display","flexDirection","form","marginTop","submit","cardBottom","marginBottom","Select","button","input","ModalViewResult","collectResult","setCollectResult","datasample","sample_type","sampleTypeName","lab_number","labNumber","date_sample_verified","dateSampleVerified","time_sample_verified","timeSampleVerified","lab_test_id","date_result_reported","comment_sample_reported","reported_result","getResults","isOpen","modalstatus","toggle","togglestatus","xs","fontWeight","dateAssayed","timeAssayed","dateResultReported","timeResultReported","ReactHtmlParser","resultReported","Divider","variant","onClick","startIcon","ModalSample","history","useHistory","order_priority","orderPriority","orderPriorityName","lab_test_group","labTestGroupName","description","sample_ordered_by","labTestName","labnumber","labId","loading","visible","setVisible","onDismiss","setSamples","optionsample","setOptionsample","sample_collected_by","sample_priority","time_sample_collected","comment_sample_collected","otherfields","setOtherFields","errors","setErrors","samplesCollected","body","value","getCharacters","validate","temp","date_sample_collected","Object","values","every","x","saveSample","e","preventDefault","newDatenow","newTimeSampleCollected","commentSampleCollected","comment","dateSampleCollected","sampleCollectedBy","timeSampleCollected","testId","length","arr","forEach","index","array","push","sampletostring","toString","sampleTypeId","post","then","resp","success","onSubmit","lab_num","checklanumber","for","time","onChange","value1","invalid","Autocomplete","multiple","getOptionLabel","option","i","renderTags","getTagProps","Chip","label","disabled","s","renderInput","params","TextField","required","vaule","target","minHeight","container","maxHeight","td","borderBottom","SampleList","sampleCollections","labOrder","tests","fetchTestOrders","setFetchTestOrders","labTestType","uniqueValues","Set","modal","setModal","modal2","modal4","modal3","setModal3","collectModal","setcollectModal","labNum","setlabNum","labNumValue","setlabNumValue","hasOwnProperty","sampleAction","dateEncounter","labTestOrderStatus","border","hover","hospitalNumber","handleSample","transferSampleConfirmation","viewresult","Breadcrumbs","Typography","textTransform","getValue","getNewTestOrder","find","striped","responsive","borderBottomColor","labObj","setLabObj","loadData","orderId","CardContent","entries","ModalVerifySample","sample_verified_by","verification_status","comment_sample_verified","otherFields","setotherFields","samplesVerified","handleOtherFieldInputChange","newTimeSampleVerified","commentSampleVerified","sampleAccepted","sampleVerifiedBy","time_sample_transfered","setModal2","setModal4","handleVerifySample","handleRecollectSample","addResult","sample","SampleVerification","ModalSampleResult","unitMeasurement","time_result_enetered","date_asseyed","sampleResult","newDateReported","newTimeSampleEntered","flipTable","setFlipTable","previousRecords","setPreviousRecords","previousData","lab","localStorage","getItem","DateSampleCollected","TimeSampleCollected","results","TestOrderList","removeTestOrders","test","testGroup","encounterDate","encounterTime","priority","sampleOrderedBy","settestOrders","splice","defaultValue","as","alltestOrders","Icon","demo","List","RecentActivities","alt","Dropdown","Toggle","viewBox","version","stroke","strokeWidth","fill","fillRule","y","cx","cy","r","Menu","Item","formDataObj","dataSamples","lab_test_order_status","CreateTestorder","App","path","PatientTestOrderHistory","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","direction","dezThemeSet","layout","headerBg","navheaderBg","sidebarBg","sidebarStyle","sidebarPosition","headerPosition","containerLayout","ThemeContext","createContext","ThemeContextProvider","sideBarStyle","setSideBarStyle","sidebarposition","setSidebarposition","headerposition","setHeaderposition","sidebarLayout","setSidebarLayout","setDirection","primaryColor","setPrimaryColor","navigationHader","setNavigationHader","haderColor","setHaderColor","sidebarColor","setSidebarColor","iconHover","setIconHover","menuToggle","setMenuToggle","background","setBackground","containerPosition_","setcontainerPosition_","document","querySelector","windowWidth","setWindowWidth","windowHeight","setWindowHeight","changePrimaryColor","setAttribute","changeNavigationHader","chnageHaderColor","chnageSidebarColor","changeSideBarPostion","changeDirectionLayout","html","changeSideBarLayout","changeSideBarStyle","alert","changeHeaderPostion","changeBackground","changeContainerPosition","resizeWindow","window","innerWidth","innerHeight","addEventListener","removeEventListener","Provider","sideBarOption","layoutOption","backgroundOption","headerPositions","containerPosition","directionPosition","fontFamily","sidebarpositions","colors","openMenuToggle","setDemoTheme","setAttr","themeSettings","children","ReactDOM","render","StrictMode","basename","getElementById"],"mappings":"kdAEaA,EAAO,gCAENC,EAAQ,qO,2RC4BhBC,GAAa,CACnBC,IAAKC,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAYD,GAAZ,IAAmBC,IAAKA,QACxDC,MAAOH,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAWD,GAAX,IAAkBC,IAAKA,QACzDE,MAAOJ,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAWD,GAAX,IAAkBC,IAAKA,QACzDG,OAAQL,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAmBD,GAAnB,IAA0BC,IAAKA,QAClEI,YAAaN,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAkBD,GAAlB,IAAyBC,IAAKA,QACtEK,KAAMP,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAUD,GAAV,IAAiBC,IAAKA,QACvDM,OAAQR,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,KAAD,2BAAaD,GAAb,IAAoBC,IAAKA,QAC5DO,OAAQT,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAgBD,GAAhB,IAAuBC,IAAKA,QAC/DQ,UAAWV,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAeD,GAAf,IAAsBC,IAAKA,QACjES,SAAUX,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAcD,GAAd,IAAqBC,IAAKA,QAC/DU,SAAUZ,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAkBD,GAAlB,IAAyBC,IAAKA,QACnEW,aAAcb,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAiBD,GAAjB,IAAwBC,IAAKA,QACtEY,YAAad,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAWD,GAAX,IAAkBC,IAAKA,QAC/Da,OAAQf,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,KAAD,2BAAYD,GAAZ,IAAmBC,IAAKA,QAC3Dc,UAAWhB,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAiBD,GAAjB,IAAwBC,IAAKA,QACnEe,gBAAiBjB,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAYD,GAAZ,IAAmBC,IAAKA,QACpEgB,WAAYlB,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,KAAD,2BAAgBD,GAAhB,IAAuBC,IAAKA,SA+IpDiB,GA5IO,SAAClB,GACnB,MAA8BmB,mBAAS,IAAvC,mBAAgBC,GAAhB,WACA,EAAgDD,mBAAS,IAAzD,mBAAOE,EAAP,KAAyBC,EAAzB,KAEOC,EAAkBC,sBAAW,gCAAC,uHAEFC,IAAMC,IAAN,UAAa/B,EAAb,+CAA+D,CAAEgC,QAAS,CAAC,+BAA4B/B,MAFrG,OAEnBgC,EAFmB,OAIzBN,EAAoBM,EAASC,MAJJ,gDAMzBC,IAAMC,MAAM,uCAAwC,CAChDC,SAAUF,IAAMG,SAASC,YAPJ,yDAU9B,IAENC,qBAAU,WACVf,EAAW,QAQPG,MAED,CAACA,IA2BP,OACI,+BAEI,eAAC,IAAD,CACCa,MAAOvC,GACJwC,MAAM,yBACNC,QAAS,CACL,CAAED,MAAO,aAAcE,MAAO,MAC9B,CACEF,MAAO,eACPE,MAAO,QAET,CAAEF,MAAO,aAAcE,MAAO,OAAQC,KAAM,OAASC,WAAW,GAChE,CACEJ,MAAO,mBACPE,MAAO,QACPE,WAAW,GAEb,CACEJ,MAAO,oBACPE,MAAO,cACPE,WAAW,GAEZ,CACGJ,MAAO,mBACPE,MAAO,iBACPE,WAAW,GAEd,CACEJ,MAAO,iBACPE,MAAO,gBACPE,WAAW,GAEd,CACEJ,MAAO,SACPE,MAAO,UACPE,WAAW,IAIjBZ,KAAOR,EAAiBqB,KAAI,SAACC,GAAD,MAAU,CAClCC,GAAID,EAAIE,sBACRC,KAAMH,EAAII,iBAAoB,IAAMJ,EAAIK,gBACxCC,KAAMN,EAAIO,UAAY,IAAMP,EAAIQ,UAChCC,MAAOT,EAAIU,WACXC,YAAaX,EAAItB,iBACjBkC,eAAgBZ,EAAIa,gBACpBC,cAAed,EAAIe,gBACnBC,QAAU,eAAC,IAAD,CAAMC,GAAK,CACLC,SAAU,sBACVC,MAAOnB,GAEPoB,MAAO,CAAEC,OAAQ,UAAWC,MAAO,OAAQC,UAAW,QAJ5D,SAMI,eAACC,EAAA,EAAD,CAAS9B,MAAM,iBAAf,SACI,eAAC+B,EAAA,EAAD,CAAY,aAAW,iBAAvB,SACI,eAAC,IAAD,CAAgBH,MAAM,sBAO5CI,QAAS,CACPC,YAAa,CACTC,gBAAiB,UACjBN,MAAO,QAEXO,iBAAkB,CACdC,MAAQ,OACRC,YAAa,SAEjBjC,WAAW,EACXkC,cAAc,EACdC,qBAAsB,OACtBC,gBAAgB,CAAC,GAAG,GAAG,KACvBC,SAAS,GACTC,iBAAkB,U,qBCzJhClF,GAAa,CACnBC,IAAKC,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAYD,GAAZ,IAAmBC,IAAKA,QACxDC,MAAOH,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAWD,GAAX,IAAkBC,IAAKA,QACzDE,MAAOJ,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAWD,GAAX,IAAkBC,IAAKA,QACzDG,OAAQL,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAmBD,GAAnB,IAA0BC,IAAKA,QAClEI,YAAaN,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAkBD,GAAlB,IAAyBC,IAAKA,QACtEK,KAAMP,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAUD,GAAV,IAAiBC,IAAKA,QACvDM,OAAQR,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,KAAD,2BAAaD,GAAb,IAAoBC,IAAKA,QAC5DO,OAAQT,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAgBD,GAAhB,IAAuBC,IAAKA,QAC/DQ,UAAWV,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAeD,GAAf,IAAsBC,IAAKA,QACjES,SAAUX,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAcD,GAAd,IAAqBC,IAAKA,QAC/DU,SAAUZ,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAkBD,GAAlB,IAAyBC,IAAKA,QACnEW,aAAcb,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAiBD,GAAjB,IAAwBC,IAAKA,QACtEY,YAAad,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAWD,GAAX,IAAkBC,IAAKA,QAC/Da,OAAQf,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,KAAD,2BAAYD,GAAZ,IAAmBC,IAAKA,QAC3Dc,UAAWhB,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAiBD,GAAjB,IAAwBC,IAAKA,QACnEe,gBAAiBjB,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAYD,GAAZ,IAAmBC,IAAKA,QACpEgB,WAAYlB,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,KAAD,2BAAgBD,GAAhB,IAAuBC,IAAKA,SA+LpDiB,GA5LO,SAAClB,GACnB,MAA8BmB,mBAAS,IAAvC,mBAAgBC,GAAhB,WACA,EAAgDD,mBAAS,IAAzD,mBAAOE,EAAP,KAAyBC,EAAzB,KAEMC,EAAkBC,sBAAW,gCAAC,uHAELC,IAAMC,IAAN,UAAa/B,EAAb,qCAAqD,CAAEgC,QAAS,CAAC,+BAA4B/B,MAFxF,OAEtBgC,EAFsB,OAG5BoD,QAAQC,IAAI,iBAAkBrD,GAC9BN,EAAoBM,EAASC,MAJD,gDAM5BC,IAAMC,MAAM,uCAAwC,CAChDC,SAAUF,IAAMG,SAASC,YAPD,yDAUjC,IAEHC,qBAAU,WACLf,EAAW,QAOXG,MACF,CAACA,IAiCN,OACI,+BACI,eAAC,IAAD,CACCa,MAAOvC,GACJwC,MAAM,mCACNC,QAAS,CACL,CAAED,MAAO,aAAcE,MAAO,MAC9B,CACEF,MAAO,eACPE,MAAO,QAET,CAAEF,MAAO,aAAcE,MAAO,OAAQC,KAAM,OAASC,WAAW,GAChE,CACIJ,MAAO,mBACPE,MAAO,QACPE,WAAW,GAEf,CACEJ,MAAO,mBACPE,MAAO,UACPE,WAAW,GAEZ,CACGJ,MAAO,kBACPE,MAAO,iBACPE,WAAW,GAEf,CACEJ,MAAO,iBACPE,MAAO,cACPE,WAAW,GAEb,CACEJ,MAAO,SACPE,MAAO,UACPE,WAAW,IAIjBZ,KAAOR,EAAiBqB,KAAI,SAACC,GAAD,MAAU,CAEtCC,GAAID,EAAIE,sBACRC,KAAMH,EAAII,iBAAoB,IAAMJ,EAAIK,gBACxCC,KAAMN,EAAIO,UAAY,IAAMP,EAAIQ,UAChCC,MAAOT,EAAIU,WACX6B,QAASvC,EAAItB,iBACb8D,eAAgBxC,EAAIa,gBACpBF,YAAaX,EAAIe,gBACjBC,QAAShB,EAAIa,gBAAkB,EAAI,eAAC,IAAD,CAAMI,GAAK,CAChCC,SAAU,oBACVC,MAAOnB,GAEPoB,MAAO,CAAEC,OAAQ,UAAWC,MAAO,OACnCC,UAAW,QALU,SAMnB,eAACC,EAAA,EAAD,CAAS9B,MAAM,eAAf,SACE,eAAC+B,EAAA,EAAD,CAAY,aAAW,eAAvB,SACA,eAAC,KAAD,CAAaH,MAAM,kBAGb,OAuCpBI,QAAS,CACPC,YAAa,CACTC,gBAAiB,UACjBN,MAAO,QAEXO,iBAAkB,CACdC,MAAQ,OACRC,YAAa,SAEjBjC,WAAW,EACXkC,cAAc,EACdC,qBAAsB,OACtBC,gBAAgB,CAAC,GAAG,GAAG,KACvBC,SAAS,GACTC,iBAAkB,UC7LhClF,GAAa,CACnBC,IAAKC,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAYD,GAAZ,IAAmBC,IAAKA,QACxDC,MAAOH,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAWD,GAAX,IAAkBC,IAAKA,QACzDE,MAAOJ,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAWD,GAAX,IAAkBC,IAAKA,QACzDG,OAAQL,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAmBD,GAAnB,IAA0BC,IAAKA,QAClEI,YAAaN,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAkBD,GAAlB,IAAyBC,IAAKA,QACtEK,KAAMP,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAUD,GAAV,IAAiBC,IAAKA,QACvDM,OAAQR,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,KAAD,2BAAaD,GAAb,IAAoBC,IAAKA,QAC5DO,OAAQT,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAgBD,GAAhB,IAAuBC,IAAKA,QAC/DQ,UAAWV,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAeD,GAAf,IAAsBC,IAAKA,QACjES,SAAUX,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAcD,GAAd,IAAqBC,IAAKA,QAC/DU,SAAUZ,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAkBD,GAAlB,IAAyBC,IAAKA,QACnEW,aAAcb,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAiBD,GAAjB,IAAwBC,IAAKA,QACtEY,YAAad,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAWD,GAAX,IAAkBC,IAAKA,QAC/Da,OAAQf,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,KAAD,2BAAYD,GAAZ,IAAmBC,IAAKA,QAC3Dc,UAAWhB,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAiBD,GAAjB,IAAwBC,IAAKA,QACnEe,gBAAiBjB,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,IAAD,2BAAYD,GAAZ,IAAmBC,IAAKA,QACpEgB,WAAYlB,sBAAW,SAACC,EAAOC,GAAR,OAAgB,eAAC,KAAD,2BAAgBD,GAAhB,IAAuBC,IAAKA,SAsLpDiB,GAnLO,SAAClB,GACnB,MAA8BmB,mBAAS,IAAvC,mBAAgBC,GAAhB,WACA,EAAgDD,mBAAS,IAAzD,mBAAOE,EAAP,KAAyBC,EAAzB,KAEMC,EAAkBC,sBAAW,gCAAC,uHAEDC,IAAMC,IAAN,UAAa/B,EAAb,iDAAiE,CAAEgC,QAAS,CAAC,+BAA4B/B,MAFxG,OAElBgC,EAFkB,OAIxBN,EAAoBM,EAASC,MAJL,gDAMxBC,IAAMC,MAAM,uCAAwC,CAChDC,SAAUF,IAAMG,SAASC,YAPL,yDAU7B,IAEHC,qBAAU,WACLf,EAAW,QAOXG,MACF,CAACA,IAsBV,OACI,+BAEI,eAAC,IAAD,CACCa,MAAOvC,GACJwC,MAAM,sCACNC,QAAS,CACL,CAAED,MAAO,aAAcE,MAAO,MAC9B,CACEF,MAAO,eACPE,MAAO,QAET,CAAEF,MAAO,aAAcE,MAAO,OAAQC,KAAM,OAASC,WAAW,GAChE,CACIJ,MAAO,mBACPE,MAAO,QACPE,WAAW,GAEf,CACEJ,MAAO,mBACPE,MAAO,UACPE,WAAW,GAEb,CACEJ,MAAO,kBACPE,MAAO,cACPE,WAAW,GAEZ,CACAJ,MAAO,iBACPE,MAAO,gBACPE,WAAW,GAEZ,CACEJ,MAAO,SACPE,MAAO,UACPE,WAAW,IAIfZ,KAAMR,EAAiBqB,KAAI,SAACC,GAAD,MAAU,CACrCC,GAAID,EAAIE,sBACRC,KAAMH,EAAII,iBAAoB,IAAMJ,EAAIK,gBACxCC,KAAMN,EAAIO,UAAY,IAAMP,EAAIQ,UAChCC,MAAOT,EAAIU,WACX6B,QAASvC,EAAItB,iBACbiC,YAAaX,EAAIa,gBACjBC,cAAed,EAAIe,gBACnBC,QAAShB,EAAItB,iBAAmB,EAAI,eAAC,IAAD,CAAMuC,GAAK,CACvBC,SAAU,wBACVC,MAAOnB,GAEPoB,MAAO,CAAEC,OAAQ,UAAWC,MAAO,OAAQC,UAAW,QAJ1C,SAOhB,eAACC,EAAA,EAAD,CAAS9B,MAAM,sBAAf,SACI,eAAC+B,EAAA,EAAD,CAAY,aAAW,sBAAvB,SACI,eAAC,IAAD,CAAgBH,MAAM,kBAIxC,QAuCRI,QAAS,CACPC,YAAa,CACTC,gBAAiB,UACjBN,MAAO,QAEXO,iBAAkB,CACdC,MAAQ,OACRC,YAAa,SAEjBjC,WAAW,EACXkC,cAAc,EACdC,qBAAsB,OACtBC,gBAAgB,CAAC,GAAG,GAAG,KACvBC,SAAS,GACTC,iBAAkB,UC3MhCK,GAAW,CACfC,aAAc,MACdC,SAAU,IA8DGC,GA3DF,SAACvF,GACV,MAAsBmB,mBAAS,cAA/B,mBAAOqE,EAAP,KAAYC,EAAZ,KAEMC,EAAU1F,EAAM2F,UAAY3F,EAAM2F,SAAS7B,MAAQ9D,EAAM2F,SAAS7B,MAAQ,KAalF,OAXA3B,qBAAY,WACV,OAAOuD,GACL,IAAK,iBAIL,QAAS,OAAOD,EAAO,cAHvB,IAAK,eAAgB,OAAOA,EAAO,gBACnC,IAAK,SAAU,OAAOA,EAAO,aAI9B,CAACC,IAIF,eAAC,WAAD,UAEE,eAACE,EAAA,EAAD,UAEE,eAACC,EAAA,EAAD,CAAKC,GAAI,GAAT,SACE,eAACC,EAAA,EAAD,CAAMhC,MAAOqB,GAAb,SAEE,eAACW,EAAA,EAAKC,KAAN,UAEE,sBAAKC,UAAU,eAAf,SACE,gBAACC,EAAA,EAAD,CACIC,GAAG,yBACHC,UAAWZ,EACXa,SAAU,SAACC,GAAD,OAAOb,EAAOa,IACxBL,UAAU,OAJd,UASI,eAACM,EAAA,EAAD,CAAKC,SAAS,aAAanE,MAAM,cAAjC,SACE,eAACoE,GAAD,MAEF,eAACF,EAAA,EAAD,CAAKC,SAAS,eAAenE,MAAM,sBAAnC,SACE,eAACqE,GAAD,MAEF,eAACH,EAAA,EAAD,CAAKC,SAAS,SAASnE,MAAM,mBAA7B,SACE,eAACsE,GAAD,sB,6IC+KPC,qBAlNA,SAAAC,GAAK,MAAK,CACvBC,KAAM,CACJrC,MAAO,QAETsC,QAAS,CACPzB,SAAUuB,EAAMG,WAAWC,QAAQ,KAErCC,iBAAkB,CAChB5B,SAAUuB,EAAMG,WAAWC,QAAQ,IACnChD,MAAO4C,EAAMM,QAAQC,KAAKC,WAE5BC,KAAM,CACJC,cAAe,SACfC,OAAQ,GACR/C,MAAO,IAETgD,QAAS,CACPC,WAAY,UAEdC,OAAQ,CACNC,UAAW,UAEbC,OAAQ,CACNC,WAAW,aAAD,OAAejB,EAAMM,QAAQY,SACvCC,QAAQ,GAAD,OAAKnB,EAAMoB,QAAQC,KAAnB,cAAkD,EAArBrB,EAAMoB,QAAQC,KAA3C,OAETC,KAAM,CACJlE,MAAO4C,EAAMM,QAAQiB,QAAQC,KAC7BC,eAAgB,OAChB,UAAW,CACTA,eAAgB,iBAoLP1B,EA/Kf,SAAqB5G,GAEnB,IAoB0BuI,EAeGC,EAnCrBC,EAAYzI,EAAZyI,QAEFC,EAAa1I,EAAM0I,WAAa1I,EAAM0I,WAAa,GA+CzD,OACE,sBAAKzC,UAAWwC,EAAQ3B,KAAxB,SACG,gBAAC6B,GAAA,EAAD,CAAgBC,iBAAe,EAA/B,UACS,eAACC,GAAA,EAAD,CAAuBC,WAAY,eAAC,KAAD,IAAnC,SAEA,eAAC,KAAD,UAEI,eAAC,KAAD,CAAKC,GAAI,GAAT,SACA,gBAAC,KAAD,CAAK9C,UAAW,OAAhB,UACA,eAAC,KAAD,CAAK8C,GAAI,GAAI9C,UAAWwC,EAAQO,MAAhC,SACI,oBAAGjF,MAAO,CAACuB,SAAU,QAArB,SACCoD,EAAW3F,iBAAmB,IAAM2F,EAAW1F,oBAIpD,eAAC,KAAD,CAAK+F,GAAI,EAAG9C,UAAWwC,EAAQO,MAA/B,SACA,kCACK,IADL,gBAEiB,6BAAIN,EAAWO,iBAIhC,eAAC,KAAD,CAAKF,GAAI,EAAG9C,UAAWwC,EAAQO,MAA/B,SACA,qDACoB,6BAAIN,EAAWQ,kBAGnC,eAAC,KAAD,CAAKH,GAAI,EAAG9C,UAAWwC,EAAQO,MAA/B,SACA,kCACK,IADL,SAEU,6BA3EJ,SAAAG,GACtB,IAAIC,EAAQ,IAAIC,KACZC,EAAYH,EAAII,MAAM,KACtBC,EAAa,IAAIH,MAAMC,EAAU,GAAIA,EAAU,GAAK,GAAIA,EAAU,IAClEG,EAAY,IAAIJ,KAAKG,GACrBE,EAAUN,EAAMO,cAAgBF,EAAUE,cAC1CC,EAAIR,EAAMS,WAAaJ,EAAUI,WAIjC,OAHID,EAAI,GAAY,IAANA,GAAWR,EAAMU,UAAYL,EAAUK,YAC7CJ,IAEQ,IAAZA,EACWE,EAAI,YAERF,EAAU,WA8DKK,CAAcC,KAAOtB,EAAWQ,YAAYe,OAAO,sBAGjE,eAAC,KAAD,CAAKlB,GAAI,EAAT,SACA,kCACK,IADL,WAEa,IACT,6BAAgC,SAA5BL,EAAWwB,cAAyB,OAAQ,gBAGpD,eAAC,KAAD,CAAKnB,GAAI,EAAG9C,UAAWwC,EAAQO,MAA/B,SACA,kCACK,IADL,YAEa,6BAAIN,EAAWyB,0BAG5B,eAAC,KAAD,CAAKpB,GAAI,EAAG9C,UAAWwC,EAAQO,MAA/B,SACA,kCACK,IADL,gBAEiB,+BAAIN,EAAW7F,sBAAf,YAIjB,gBAAC,KAAD,CAAKkG,GAAI,GAAT,WAnEWP,EAoEQE,EAlEC,OAA7BF,EAAQ4B,mBACC,qCAAE,eAACC,GAAA,EAAD,CAAOpG,MAAM,SAASqG,KAAK,OAA3B,kDACwB,MAA7B9B,EAAQ4B,mBACL,qCAAE,eAACC,GAAA,EAAD,CAAOpG,MAAM,OAAOqG,KAAK,OAAzB,wDACwB,MAA7B9B,EAAQ4B,mBACL,qCAAE,eAACC,GAAA,EAAD,CAAOpG,MAAM,QAAQqG,KAAK,OAA1B,oDAEH,KAxBS/B,EAoFOG,EAAW6B,eAnFnB,MAAhBhC,EACS,gBAAC8B,GAAA,EAAD,CAAOpG,MAAM,OAAOqG,KAAK,OAAzB,6BAAgD,6CACnC,MAAhB/B,EACG,gBAAC8B,GAAA,EAAD,CAAOpG,MAAM,QAAQqG,KAAK,OAA1B,6BAAiD,wCACpC,MAAhB/B,EACG,gBAAC8B,GAAA,EAAD,CAAOpG,MAAM,OAAOqG,KAAK,OAAzB,6BAAgD,8CACnC,MAAhB/B,EACG,gBAAC8B,GAAA,EAAD,CAAOpG,MAAM,MAAMqG,KAAK,OAAxB,6BAA+C,yCAE7C,gBAACD,GAAA,EAAD,CAAOpG,MAAM,QAAQqG,KAAK,OAA1B,6BAAiD,wDAkIvD,eAACE,GAAA,EAAD,CAAuB1B,WAAY,eAAC,KAAD,c,6JC7M7C2B,GAAYC,cAAW,SAAA7D,GAAK,MAAK,CACnC8D,KAAM,CACFC,OAAQ/D,EAAMoB,QAAQ,IACtB4C,QAAS,OACTC,cAAe,SACfpD,WAAY,UAEhBqD,KAAM,CACFtG,MAAO,OACPuG,UAAWnE,EAAMoB,QAAQ,IAE7BgD,OAAQ,CACJL,OAAQ/D,EAAMoB,QAAQ,EAAG,EAAG,IAEhCiD,WAAY,CACRC,aAAc,IAElBC,OAAQ,CACJ5D,OAAQ,GACR/C,MAAO,KAEX4G,OAAQ,CACJT,OAAQ/D,EAAMoB,QAAQ,IAG1BnB,KAAM,CACF,QAAS,CACL8D,OAAQ/D,EAAMoB,QAAQ,KAG9BqD,MAAO,CACHT,QAAS,YA6GFU,GAzGS,SAACvL,GAErB,MAA0CmB,mBAAS,IAAnD,mBAAOqK,EAAP,KAAsBC,EAAtB,KAEMhD,EAAUgC,KACViB,EAAa1L,EAAM0L,WAAa1L,EAAM0L,WAAa,GACnDC,EAAcD,EAAWE,eACzBC,EAAaH,EAAWI,UACxBC,EAAuBL,EAAWM,mBAClCC,EAAuBP,EAAWQ,mBAIlCC,GAHuBT,EAAWvF,IAAKuF,EAAWU,qBACpCV,EAAWvF,IAAKuF,EAAWW,wBACzBX,EAAWvF,IAAMuF,EAAWY,iBAAmBZ,EAAWY,gBAC5DZ,EAAWvF,GAAKuF,EAAWvF,GAAK,GAG9CoG,EAAa/K,sBAAW,gCAAC,uHAEAC,IAAMC,IAAN,UAAa/B,EAAb,8BAAsCwM,GAAe,CAAExK,QAAS,CAAC,+BAA4B/B,MAF7F,OAEjBgC,EAFiB,OAGvBoD,QAAQC,IAAI,eAAgBrD,EAASC,MACrC4J,EAAiB7J,EAASC,MAJH,yGAU5B,IAML,OAJEM,qBAAU,WACNoK,MACD,CAACA,IAGF,+BACQ,gBAAC,KAAD,CAAOC,OAAQxM,EAAMyM,YAAaC,OAAQ1M,EAAM2M,aAAc1G,UAAWjG,EAAMiG,UAAWqE,KAAK,KAA/F,UACI,eAAC,KAAD,CAAaoC,OAAQ1M,EAAM2M,aAA3B,mCACI,eAAC,KAAD,UACI,eAAC,KAAD,UACE,gBAAC,KAAD,WACI,gBAAC,KAAD,CAAK5I,MAAO,CAAEiH,UAAW,QAAzB,UACI,eAAC,KAAD,CAAK4B,GAAG,KAAR,SACA,eAAC,KAAD,CAAO3I,MAAM,UAAUF,MAAO,CAACE,MAAM,OAAS4I,WAAY,UAA1D,SACC,qBAAG9I,MAAO,CAACiH,UAAW,SAAtB,yBAA6C,uBAAMjH,MAAO,CAAE8I,WAAY,UAA3B,SAAuChB,IAApF,+BAEI,wBAAM9H,MAAO,CAAE8I,WAAY,UAA3B,UAAuC,IAAKlB,KAFhD,0CAII,wBAAM5H,MAAO,CAAE8I,WAAY,UAA3B,UAAuC,IAAKd,EAAuB,IAAME,YAK9E,gBAAC,KAAD,CAAKW,GAAG,KAAR,UACI,4CACA,wBAECpB,EAEO,gBAAC,KAAD,WACR,gBAAC,KAAD,CAAKoB,GAAG,IAAR,UACA,uBAAM7I,MAAO,CAAE8I,WAAY,QAA3B,2BADA,KAC2DrB,EAAcsB,YAAc,IAAMtB,EAAcuB,YAC3G,2BAEJ,wBACA,gBAAC,KAAD,CAAKH,GAAG,IAAR,UACI,uBAAM7I,MAAO,CAAE8I,WAAY,QAA3B,4BADJ,KACgErB,EAAcwB,mBAAqB,IAAMxB,EAAcyB,mBACnH,2BAGJ,eAAC,KAAD,CAAKL,GAAG,IAAR,SAEI,gBAAC,KAAD,CAAQ3I,MAAM,OAAd,cAAuBiJ,KAAgB,yBAM3C,gBAAC,KAAD,CAAKN,GAAG,KAAR,UACA,wBACI,uBAAM7I,MAAO,CAAE8I,WAAY,QAA3B,qBAFJ,KAEyDK,KAAgB1B,EAAc2B,gBACnF,eAACC,GAAA,EAAD,UAxBiB,SA+B7B,wBAEA,eAAC,KAAD,CACEC,QAAQ,YACRpJ,MAAM,UACNqJ,QAAStN,EAAM2M,aACf1G,UAAWwC,EAAQ4C,OACnBkC,UAAW,eAAC,KAAD,IALb,iC,6DCnHtB9C,GAAYC,cAAW,SAAC7D,GAAD,MAAY,CACrC8D,KAAM,CACFC,OAAQ/D,EAAMoB,QAAQ,IACtB4C,QAAS,OACTC,cAAe,SACfpD,WAAY,UAEhBqD,KAAM,CACFtG,MAAO,OACPuG,UAAWnE,EAAMoB,QAAQ,IAE7BgD,OAAQ,CACJL,OAAQ/D,EAAMoB,QAAQ,EAAG,EAAG,IAEhCiD,WAAY,CACRC,aAAc,IAElBC,OAAQ,CACJ5D,OAAQ,GACR/C,MAAO,KAEX4G,OAAQ,CACJT,OAAQ/D,EAAMoB,QAAQ,IAE1BnB,KAAM,CACF,QAAS,CACL8D,OAAQ/D,EAAMoB,QAAQ,KAG9BqD,MAAO,CACHT,QAAS,QAEb9I,MAAO,CACHkC,MAAO,UACPqB,SAAU,cAiWHkI,GA7VK,SAACxN,GAEjB,IAAMyN,EAAUC,cAGVjF,EAAUgC,KACViB,EAAa1L,EAAM0L,YAAiC,OAAnB1L,EAAM0L,WAAoB1L,EAAM0L,WAAa,GAC9EiC,EAAiBjC,EAAWvF,IAAMuF,EAAWkC,cAAgBlC,EAAWmC,kBAAoB,KAC5FC,EAAiBpC,EAAWvF,GAAKuF,EAAWqC,iBAAmB,KAE/DC,GADoBtC,EAAW7J,MAAO6J,EAAW7J,KAAKoM,kBACxCvC,EAAWwC,YAAcxC,EAAWwC,YAAc,MAChErC,EAAa7L,EAAMmO,UAEnBC,EAAQ1C,EAAWvF,GACzB,EAA8BhF,oBAAS,GAAvC,mBAAOkN,EAAP,KAAgBjN,EAAhB,KACA,EAA8BD,oBAAS,GAAvC,mBAAOmN,EAAP,KAAgBC,EAAhB,KACMC,EAAY,kBAAMD,GAAW,IACnC,EAA8BpN,mBAAS,IAAvC,mBAAO+D,EAAP,KAAgBuJ,EAAhB,KACA,EAAwCtN,mBAAS,IAAjD,mBAAOuN,EAAP,KAAqBC,EAArB,KACA,EAAgDxN,oBAAS,GAAzD,mBACA,GADA,UACsCA,mBAAS,CAACyN,oBAAoB,GAAGX,kBAAkB,GAAGY,gBAAgB,GAAGC,sBAAsB,GAAIC,yBAAyB,MAAlK,mBAAOC,EAAP,KAAoBC,EAApB,KAGA,EAA4B9N,mBAAS,IAArC,mBAAO+N,EAAP,KAAeC,EAAf,KACA,EAAgDhO,mBAAS,CACpD,uBAA0B,GACzB,oBAAuB6I,KAAO,IAAIX,MAAQY,OAAO,YACjD,GAAM,EACN,kBAAqB,EACrB,qBAAwB,EACxB,aAAgB,EAChB,OAAU,EACV,oBAAuB,KAR7B,mBAAOmF,EAAP,UAWAjN,qBAAU,WAAM,sDACZ,yHAE+BV,IAAMC,IAAN,UAAa/B,EAAb,uCAAuD,CAAEgC,QAAS,CAAC,+BAA4B/B,MAF9H,OAEcgC,EAFd,OAGcyN,EAAOzN,EAASC,KAEtB8M,EACIU,EAAK3M,KAAI,kBAAsB,CAAEL,MAAxB,EAAGwI,QAAqCyE,MAAxC,EAAYnJ,QANjC,0GADY,uBAAC,WAAD,wBAYZoJ,KACD,IAEH,IAQMC,EAAW,WACb,IAAIC,EAAI,eAAQP,GAehB,OAdAO,EAAKC,sBAAwBxK,EAAQwK,sBAC/B,GACA,mBAIND,EAAK9D,YAAczG,EAAQyG,YAAc,GAAK,eAC9C8D,EAAKb,oBAAsBI,EAAYJ,oBACjC,GACA,6BAENO,EAAU,eACHM,IAEAE,OAAOC,OAAOH,GAAMI,OAAM,SAACC,GAAD,MAAY,IAALA,MAGtCC,EAAU,iDAAG,WAAOC,GAAP,0FACfA,EAAEC,iBADa,UAKNT,IALM,wBAMPpO,GAAW,GACL8O,EAAalG,KAAO9E,EAAQwK,uBAAuBzF,OACrD,cAGEkG,EAAyBnG,KAAO9E,EAAQwK,uBAAuBzF,OAAO,YAE5EmF,EAAiBgB,uBAAyBlL,EAAQmL,QAClDjB,EAAiBkB,oBAAsBJ,EACvCd,EAAiBmB,kBAAoBvB,EAAW,oBAChDI,EAAiBoB,oBAAsBL,EACvCf,EAAiBqB,OAASrC,EAGtBlJ,EAAQyG,YAAY+E,OAAS,GACvBC,EAAM,GACZzL,EAAQyG,YAAYiF,SAAQ,SAAUtB,EAAOuB,EAAOC,GAChDH,EAAII,KAAKzB,EAAK,UAEZ0B,EAAiBL,EAAIM,WAC3B7B,EAAiB8B,aAAeF,GAEhCtF,EAAWC,YAAcD,EAAW7J,KAAK8J,YA5BtC,UAiCDlK,IAAM0P,KAAN,UAAcxR,EAAd,8BAAuCkM,GAAcuD,EAC3D,CAAEzN,QAAS,CAAC,+BAA4B/B,MAAWwR,MAAK,SAAAC,GAEpDjQ,GAAW,GACVU,IAAMwP,QAAQ,yCAA0C,CACrDtP,SAAUF,IAAMG,SAASC,eAtC1B,QAoDNuL,EAAQsD,KAAK,KApDP,0DA0DXjP,IAAMC,MAAM,6CAA8C,CACrDC,SAAUF,IAAMG,SAASC,YA3DnB,0DAAH,sDA0EhB,OACI,+BACI,eAAC,KAAD,UACI,eAAC,KAAD,UACI,eAAC,KAAD,CAAOsK,OAAQxM,EAAMyM,YAAaC,OAAQ1M,EAAM2M,aAAc1G,UAAWjG,EAAMiG,UAAWqE,KAAK,KAA/F,SACI,gBAAC,KAAD,CAAMiH,SAAUxB,EAAhB,UACI,eAAC,KAAD,CAAarD,OAAQ1M,EAAM2M,aAA3B,6BACA,gBAAC,KAAD,WAjBxB,SAAuB6E,GACnB,GAAgB,KAAZA,GAA4B,OAAVA,EAClB,OACI,eAAC,KAAD,CAAOvN,MAAM,SAASuI,OAAQ8B,EAAS5B,OAAQ8B,EAA/C,qDAeiBiD,CAAc5F,GACf,eAAC,KAAD,UACI,gBAAC,KAAD,WACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAK9C,GAAI,GAAT,SACI,eAAC,KAAD,CAAO9E,MAAM,UAAUF,MAAO,CAACE,MAAM,OAAS4I,WAAY,SAAUvH,SAAS,QAA7E,SACI,qBAAGvB,MAAO,CAACiH,UAAW,SAAtB,8BAAkD,uBAAMjH,MAAO,CAAE8I,WAAY,UAA3B,SAAuCiB,IAAzF,uDAEI,uBAAM/J,MAAO,CAAE8I,WAAY,UAA3B,SAAuCmB,IAF3C,gDAKI,uBAAMjK,MAAO,CAAE8I,WAAY,UAA3B,SAAuCc,WAKnD,eAAC,KAAD,CAAK5E,GAAI,EAAT,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAO2I,IAAI,iBAAX,4BACA,eAAC,KAAD,aACIC,MAAM,EACN7O,KAAK,wBACLqD,GAAG,wBACHmJ,MAAOpK,EAAQwK,sBACfkC,SAAU,SAAAC,GAAM,OACZpD,EAAW,2BAAKvJ,GAAN,IAAewK,sBAAuBmC,OAE/C3C,EAAOQ,uBAAyB,CAAEoC,SAAS,KAEpB,IAA/B5C,EAAOQ,sBACJ,uBAAMzJ,UAAWwC,EAAQ1G,MAAzB,SAAiCmN,EAAOQ,wBACxC,QAGZ,eAAC,KAAD,CAAK3G,GAAI,EAAT,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAO2I,IAAI,iBAAX,4BAEA,eAAC,KAAD,CACIlP,KAAK,OACLM,KAAK,wBACLqD,GAAG,wBACHyL,SAAU,SAAAC,GAAM,OACZ5C,EAAe,2BAAKD,GAAN,IAAmBF,sBAAuB+C,MAE5DvC,MAAOF,EAAiBkB,2BASpC,eAAC,KAAD,CAAKvH,GAAI,EAAT,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAO2I,IAAI,cAAX,yBACA,eAACK,GAAA,EAAD,CACIC,SAAS,OACT7L,GAAG,cACHmE,KAAK,QACLjG,QAASqK,EACTuD,eAAgB,SAACC,GAAD,OAAYA,EAAO7P,OACnCuP,SAAU,SAAC5B,EAAGmC,GACV1D,EAAW,2BAAKvJ,GAAN,IAAeyG,YAAawG,MAE1CC,WAAY,SAAC9C,EAAO+C,GAAR,OACR/C,EAAM5M,KAAI,SAACwP,EAAQrB,GAAT,OACN,eAACyB,GAAA,EAAD,yBACIC,MAAOL,EAAO7P,OACVgQ,EAAY,CAAExB,WAFtB,IAGI2B,SAAoB,IAAV3B,SAItB9M,MAAO,CAAEU,MAAO,OAAQuG,UAAW,SACnCyH,GAAC,EACDC,YAAa,SAACC,GAAD,OACT,eAACC,GAAA,EAAD,2BACQD,GADR,IAEItF,QAAQ,WACRzC,OAAO,aAGfiI,UAAQ,IAEW,IAAtB3D,EAAOvD,YACJ,uBAAM1F,UAAWwC,EAAQ1G,MAAzB,SACHmN,EAAOvD,cAGJ,QAIZ,eAAC,KAAD,CAAK5C,GAAI,EAAT,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAO2I,IAAI,YAAX,2BAEA,gBAAC,KAAD,yBACIlP,KAAK,SACLM,KAAK,sBACLqD,GAAG,sBACH2M,MAAO9D,EAAYJ,oBACnBgD,SAlNhB,SAAC5B,GACjCf,EAAe,2BAAKD,GAAN,mBAAoBgB,EAAE+C,OAAOjQ,KAAOkN,EAAE+C,OAAOzD,WAkNNJ,EAAON,qBAAuB,CAC/BkD,SAAS,IAPjB,cAUI,yBAAQxC,MAAM,GAAd,eACA,yBAAQA,MAAM,IAAd,sBACA,yBAAQA,MAAM,IAAd,oBACA,yBAAQA,MAAM,IAAd,0BAEJ,eAAC,KAAD,UACKJ,EAAON,2BAIpB,eAAC,KAAD,CAAK7F,GAAI,GAAT,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAO2I,IAAI,OAAX,kBACA,eAAC,KAAD,aACIlP,KAAK,WACLM,KAAK,UACLqD,GAAG,UACHpC,MAAO,CAAEiP,UAAW,IAAK1N,SAAU,IACnCsM,SA5OpB,SAAC5B,GAC7BvB,EAAW,2BAAKvJ,GAAN,mBAAgB8K,EAAE+C,OAAOjQ,KAAOkN,EAAE+C,OAAOzD,UA4OHA,MAAOpK,EAAQmL,SACVnB,EAAOmB,SAAW,CAAEyB,SAAS,KAEtC,eAAC,KAAD,UAAe5C,EAAOmB,eAI9B,wBACA,wBACA,eAAC,KAAD,CAAKtH,GAAI,GAAT,SACKsF,EACG,uCACI,eAAC,KAAD,IADJ,IACgB,2DAGhB,QAIXxC,GAA6B,OAAfA,EACX,eAAC,KAAD,CACIrJ,KAAK,SACL6K,QAAQ,YACRpJ,MAAM,UACNgC,UAAWwC,EAAQ4C,OACnBkC,UAAW,eAAC,KAAD,IACXiF,SAAUnE,EANd,kBAWA,eAAC,KAAD,CACI7L,KAAK,SACL6K,QAAQ,YACRpJ,MAAM,UACNgC,UAAWwC,EAAQ4C,OACnBkC,UAAW,eAAC,KAAD,IACXiF,SAAS,OANb,kBAWJ,eAAC,KAAD,CACInF,QAAQ,YACRpJ,MAAM,UACNqJ,QAAStN,EAAM2M,aACf1G,UAAWwC,EAAQ4C,OACnBkC,UAAW,eAAC,KAAD,IALf,wCC5WlC9C,GAAYC,aAAW,CACzB5D,KAAM,CACFrC,MAAO,QAEXwO,UAAW,CACPC,UAAW,KAEfC,GAAI,CAAEC,aAAc,UA4TTC,GAzTM,SAACrT,GAElB,IAAMqD,EAAa,GACbiQ,EAAoBtT,EAAM0I,WAAa1I,EAAM0I,WAAa,GAOhE,GANsB4K,EAAkBC,SAASC,MAMnBrS,mBAAS,KAAvC,mBAAOkN,EAAP,KACA,GADA,KAC8ClN,mBAASmS,IAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KAEMjL,EAAUgC,KAChBtI,qBAAU,cAEP,IAGC,IAAMwR,EAAc,GACE,OAAftQ,GAAqC,KAAdA,GACtBA,EAAWuN,SAAQ,SAAStB,EAAOuB,EAAOC,GACnB,OAAhBxB,EAAK,MACJqE,EAAY5C,KAAKzB,EAAK,KAASxB,mBAK/C,IAAM8F,EAAY,aAAO,IAAIC,IAAIF,IACjC,EAA0BxS,oBAAS,GAAnC,mBAAO2S,EAAP,KAAcC,EAAd,KAEA,EAA4B5S,oBAAS,GAArC,mBAAO6S,EAAP,KAEA,GAFA,KAE4B7S,oBAAS,IAArC,mBAAO8S,EAAP,KAEA,GAFA,KAE4B9S,oBAAS,IAArC,mBAAO+S,EAAP,KAAeC,EAAf,KAEA,EAAwChT,mBAAS,IAAjD,mBAAOiT,EAAP,KAAqBC,EAArB,KACA,EAA4BlT,mBAAS,CAAC0K,WAAW,KAAjD,mBAAOyI,EAAP,KAAeC,EAAf,KACA,EAAsCpT,mBAAS,IAA/C,mBAAOqT,EAAP,KAAoBC,EAApB,KAEK3I,EAAY,GACbzI,EAAWuN,SAAQ,SAAStB,EAAOuB,EAAOC,GACnB,OAAhBxB,EAAK,MAAmBA,EAAK,KAASoF,eAAe,eAEpB,OAA7BpF,EAAK,KAASzD,aACbC,EAAYwD,EAAK,KAASzD,eAoF9C,IAAM8I,EAAe,SAAChS,EAAIiS,GAClB,OAA6B,IAA1BjS,EAAIkS,oBAAqD,OAA1BlS,EAAIkS,mBACxB,gBAAC,KAAD,WACE,gBAAC,KAAD,CAAY9Q,MAAO,CAAEQ,gBAAgB,UAAWN,MAAM,OAAQ6Q,OAAO,oBAAqBzP,aAAa,OAAvG,oBACW,uBAAM,iBAAN,uBAEP,eAAC,KAAD,CAAUtB,MAAO,CAACgR,MAAM,QAAxB,SACA,gBAAC,KAAD,CAAU1O,SAAU,kBA9E3B,SAAC1D,EAAIiS,GAEtBH,EAA4B,KAAb3I,EAAkBwI,EAAOzI,WAAcC,GAEtDuI,EAAgB,uCAAID,GAAiBzR,GAAtB,IAA2BiS,gBAAeI,eAvDrC,QAwDpBjB,GAAUD,GAyEwCmB,CAAatS,EAAIiS,IAA3C,UAA2D,eAAC,KAAD,CAActK,KAAK,KAAKvG,MAAO,CAACE,MAAO,UAAW,IAA7G,yBAKS,IAA1BtB,EAAIkS,mBACO,gBAAC,KAAD,WACE,gBAAC,KAAD,CAAY9Q,MAAO,CAAEQ,gBAAgB,UAAWN,MAAM,OAAQ6Q,OAAO,oBAAqBzP,aAAa,OAAvG,oBACW,uBAAM,iBAAN,uBAEP,eAAC,KAAD,CAAUtB,MAAO,CAACgR,MAAM,QAAxB,SACA,gBAAC,KAAD,CAAU1O,SAAU,kBA5Eb,SAAC1D,GAEhCwR,GAAWD,GACXG,EAAgB,2BAAID,GAAiBzR,IAyEauS,CAA2BvS,IAArD,UAA2D,eAAC,KAAD,CAAgB2H,KAAK,KAAKvG,MAAO,CAACE,MAAO,UAAW,IAA/G,2BAKQ,IAAzBtB,EAAIkS,mBACO,gBAAC,KAAD,WACE,gBAAC,KAAD,CAAY9Q,MAAO,CAAEQ,gBAAgB,UAAWN,MAAM,OAAQ6Q,OAAO,oBAAqBzP,aAAa,OAAvG,oBACW,uBAAM,iBAAN,uBAEP,eAAC,KAAD,CAAUtB,MAAO,CAACgR,MAAM,QAAxB,SACA,gBAAC,KAAD,CAAU1O,SAAU,kBA/E7B,SAAC1D,GAChB0R,EAAgB,2BAAID,GAAiBzR,IACrCwR,GAAWD,GA6EuCiB,CAAWxS,IAArC,UAAyD,eAAC,KAAD,CAAc2H,KAAK,KAAKvG,MAAO,CAACE,MAAO,UAAW,IAA3G,2BANpB,GAaZ,OACI,iCAEI,gBAACmR,GAAA,EAAD,CAAa,aAAW,aAAxB,UACI,eAAC,IAAD,CAAMnR,MAAM,UACRL,GAAI,CAACC,SAAU,cACfC,MAAO,kBAFX,wBAQA,eAACuR,GAAA,EAAD,CAAYpR,MAAM,cAAlB,oCAGJ,wBACA,wBACA,eAAC,KAAD,UACI,gBAAC,KAAD,WACI,yBAGA,wBACA,gBAAC,KAAD,CAAMgC,UAAU,QAAhB,UACI,gBAAC,KAAD,eAAa,uBAAMlC,MAAO,CAAGuR,cAAe,cAA/B,iCACT,eAAC,IAAD,CACI1R,GAAK,CACHC,SAAU,IACVC,MAAO,kBAHb,SAOI,gBAAC,KAAD,CACItB,KAAK,SACL6K,QAAQ,YACRpJ,MAAM,UAENgC,UAAU,oBALd,UAOI,eAAC,KAAD,IAAe,IAPnB,gBAYZ,gBAAC,KAAD,WACI,eAAC,KAAD,CAAOhC,MAAM,UAAb,4EAGJ,wBACI,eAAC,KAAD,UAEQ,gBAAC,KAAD,CAAMoL,MAAI,EAAV,UACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAKtG,GAAG,IAAR,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAO2I,IAAI,aAAX,6BAEI,gBAAC,KAAD,CACElP,KAAK,SACLM,KAAK,YACLqD,GAAG,YACHyL,SA9I7B,SAAA5B,GACb,IAAMuF,EAAUvF,EAAE+C,OAAOzD,MACzB,GAAc,QAAXiG,GAAgC,OAAZA,EACvB,CAEI,IAAMC,EAAkBnS,EAAWoS,MAAK,SAAA3F,GAAC,OAAa,OAATA,EAAEjO,MAAeiO,EAAEjO,KAAKiM,iBAAmByH,KACxF7B,EAAmB,CAAC8B,SAGpB9B,EAAmBrQ,IAiIiB,UAMG,yBAAQiM,MAAM,MAAd,mBAEGsE,EAAalR,KAAI,SAAAoN,GAAC,OAChB,yBAAgBR,MAAOQ,EAAvB,SACGA,GADUA,cAQjC,eAAC,KAAD,CAAK/G,GAAG,IAAI9C,UAAU,mBAAtB,SAEI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAOyL,IAAI,aAAX,yBACJ,eAAC,KAAD,CACIlP,KAAK,OACLM,KAAK,aACLqD,GAAG,aACHmJ,MAAmB,KAAZxD,EAAiBA,EAAYwI,EAAOzI,WAC3C+F,SAtMhB,SAAA5B,GACpBA,EAAEC,iBACEsE,EAAU,2BAAKD,GAAN,mBAAetE,EAAE+C,OAAOjQ,KAAOkN,EAAE+C,OAAOzD,SACjDxD,EAAYkE,EAAE+C,OAAOzD,OAoMWkD,SAAU1G,GAAawI,EAAOzI,WAAa,OAAS,aAM5D,gBAAC,KAAD,WACA,wBACI,gBAAC,KAAD,CAAQ6J,SAAO,EAACC,YAAU,EAA1B,UACI,wBAAO5R,MAAO,CAAGQ,gBAAgB,UAAWN,MAAM,WAAlD,SACI,gCACI,6CACA,4CACA,iDACA,yCACA,yCACA,6BAGR,iCACMoK,EAaA,mCAAI,eAAC,KAAD,CAASpK,MAAM,YAAnB,0BAbUwP,EAAgBF,SAASC,MAAM9Q,KAAI,SAACC,GAAD,OACrC,OAARA,GAA2C,IAA3BA,EAAIkS,mBACnB,sBAAiB9Q,MAAO,CAAE6R,kBAAmB,QAA7C,UACC,qBAAI3P,UAAWwC,EAAQ0K,GAAvB,SAA4BxQ,EAAIoL,mBAC/B,qBAAI9H,UAAWwC,EAAQ0K,GAAvB,SAA4BxQ,EAAIuL,cAChC,qBAAIjI,UAAWwC,EAAQ0K,GAAvB,SAA4BM,EAAgBF,SAASrQ,UAAW,IAAMuQ,EAAgBF,SAASpQ,YAC/F,qBAAI8C,UAAWwC,EAAQ0K,GAAvB,UAjL5BnD,EAiLqE,EAhL/E,IAAJA,EACQ,6BAAG,eAAC,KAAD,CAAQ/L,MAAM,QAAd,gCACD,IAAJ+L,EACE,6BAAG,eAAC,KAAD,CAAQ/L,MAAM,QAAd,iCACD,IAAJ+L,EACE,6BAAG,eAAC,KAAD,CAAQ/L,MAAM,QAAd,+BACD,IAAJ+L,EACE,6BAAG,eAAC,KAAD,CAAQ/L,MAAM,QAAd,+BACD,IAAJ+L,EACE,6BAAG,eAAC,KAAD,CAAQ/L,MAAM,QAAd,gCAEH,6BAAG,eAAC,KAAD,CAAQA,MAAM,UAAd,qCAsK+B,qBAAIgC,UAAWwC,EAAQ0K,GAAvB,SAA4BwB,EAAahS,EAAK8Q,EAAgBF,SAASrQ,aACvE,qBAAI+C,UAAWwC,EAAQ0K,OANhBxQ,EAAIwD,IASb,wBAtL1B,IAAA6J,UA4Le,2CAW/B8D,GAASE,GAAWE,GAAUD,EAE/B,uCACI,eAAC,GAAD,CAAkBxH,YAAaqH,EAAOnH,aA/QtB,kBAAMoH,GAAUD,IA+QiCpI,WAAY0I,EAAcjG,UAAWqG,IAEtG,eAAC,GAAD,CAAiB/H,YAAayH,EAAQvH,aA3QrB,kBAAMwH,GAAWD,IA2QgCxI,WAAY0I,OAIlF,OCvPOxN,qBAjFA,SAAAC,GAAK,MAAK,CACvBC,KAAM,CACJrC,MAAO,QAETsC,QAAS,CACPzB,SAAUuB,EAAMG,WAAWC,QAAQ,KAErCC,iBAAkB,CAChB5B,SAAUuB,EAAMG,WAAWC,QAAQ,IACnChD,MAAO4C,EAAMM,QAAQC,KAAKC,WAE5BC,KAAM,CACJC,cAAe,SACfC,OAAQ,GACR/C,MAAO,IAETgD,QAAS,CACPC,WAAY,UAEdC,OAAQ,CACNC,UAAW,UAEbC,OAAQ,CACNC,WAAW,aAAD,OAAejB,EAAMM,QAAQY,SACvCC,QAAQ,GAAD,OAAKnB,EAAMoB,QAAQC,KAAnB,cAAkD,EAArBrB,EAAMoB,QAAQC,KAA3C,OAETC,KAAM,CACJlE,MAAO4C,EAAMM,QAAQiB,QAAQC,KAC7BC,eAAgB,OAChB,UAAW,CACTA,eAAgB,iBAmDP1B,EA7Cf,SAAqB5G,GACjB,IAAIyN,EAAUC,cACd,EAA4BvM,mBAAS,IAArC,mBAAO0U,EAAP,KAAeC,EAAf,KACQrN,EAAYzI,EAAZyI,QAEFC,EAAa+E,EAAQ9H,UAAY8H,EAAQ9H,SAAS7B,MAAQ2J,EAAQ9H,SAAS7B,MAAQ,GAGnFiS,EAAWvU,sBAAW,gCAAC,uHAEEC,IAAMC,IAAN,UAAa/B,EAAb,6BAAqC+I,EAAWsN,SAAW,CAAErU,QAAS,CAAC,+BAA4B/B,MAFrG,OAEfgC,EAFe,OAGrBoD,QAAQC,IAAI,eAAgBrD,GAC5BkU,EAAUlU,EAASC,MAJE,gDAMrBC,IAAMC,MAAM,uCAAwC,CAChDC,SAAUF,IAAMG,SAASC,YAPR,yDAU1B,IAML,OAJGC,qBAAU,WACN4T,MACD,CAACA,IAGL,sBAAK9P,UAAWwC,EAAQ3B,KAAxB,SACE,eAAC,KAAD,UACE,eAACmP,GAAA,EAAD,UAEsC,IAAlCtG,OAAOuG,QAAQL,GAAQnF,OACvB,uCACA,eAAC,GAAD,CAAmBhI,WAAYmN,IAC/B,wBACA,eAAC,GAAD,CAAanN,WAAYmN,OAEvB,yB,UC/DRpL,GAAYC,cAAW,SAAC7D,GAAD,MAAY,CACrC8D,KAAM,CACFC,OAAQ/D,EAAMoB,QAAQ,IACtB4C,QAAS,OACTC,cAAe,SACfpD,WAAY,UAEhBqD,KAAM,CACFtG,MAAO,OACPuG,UAAWnE,EAAMoB,QAAQ,IAE7BgD,OAAQ,CACJL,OAAQ/D,EAAMoB,QAAQ,EAAG,EAAG,IAEhCiD,WAAY,CACRC,aAAc,IAElBC,OAAQ,CACJ5D,OAAQ,GACR/C,MAAO,KAEX4G,OAAQ,CACJT,OAAQ/D,EAAMoB,QAAQ,IAE1BnB,KAAM,CACF,QAAS,CACL8D,OAAQ/D,EAAMoB,QAAQ,KAG9BqD,MAAO,CACHT,QAAS,QAEb9I,MAAO,CACHkC,MAAO,UACPqB,SAAU,cAqSH6Q,GAjSW,SAACnW,GACvB,IAAMyN,EAAUC,cAGVjF,EAAUgC,KACViB,EAAa1L,EAAM0L,YAAiC,OAAnB1L,EAAM0L,WAAoB1L,EAAM0L,WAAa,GAG9EC,EAAcD,EAAWE,eACzBC,EAAaH,EAAWI,UACxB4D,EAAwBhE,EAAW4E,oBACnCxB,EAAwBpD,EAAW8E,oBACnCrE,EAAcT,EAAWvF,GAI/B,GAFiBuF,EAAWvF,GAEEhF,oBAAS,IAAvC,mBAAOkN,EAAP,KAAgBjN,EAAhB,KACA,EAA8BD,oBAAS,GAAvC,mBAEA,GAFA,UAE8BA,mBAAS,KAAvC,mBACA,GADA,UACwCA,mBAAS,KAAjD,mBACA,GADA,UACgDA,oBAAS,IAAzD,mBACA,GADA,UACsCA,mBAAS,CAC3B4K,qBAAqB,GACrBqK,mBAAmB,GACnBvH,gBAAgB,GAChB5C,qBAAqB,GACrBoE,QAAQ,GACRgG,oBAAoB,GACpBC,wBAAwB,MAP5C,mBAAOC,EAAP,KAAoBC,EAApB,KAUA,EAA4BrV,mBAAS,IAArC,mBAAO+N,EAAP,KAAeC,EAAf,KAEA,EAA8ChO,mBAAS,CACjD,sBAAyB,GACzB,mBAAsB6I,KAAO,IAAIX,MAAQY,OAAO,YAChD,eAAkB,SAClB,iBAAoB,SACpB,OAAU,EACV,mBAAsB,KAN5B,mBAAOwM,EAAP,UASAtU,qBAAU,cAMP,IAEH,IAIMuU,EAA8B,SAAA1G,GAClCwG,EAAc,2BAAOD,GAAP,mBAAqBvG,EAAE+C,OAAOjQ,KAAOkN,EAAE+C,OAAOzD,UAIzDE,EAAW,WACX,IAAIC,EAAI,eAAQP,GAShB,OARAO,EAAK1D,qBAAuBwK,EAAYxK,qBAAuB,GAAK,mBAGpE0D,EAAKY,QAAUkG,EAAYlG,QAAU,GAAK,uBAE1ClB,EAAU,eACHM,IAEAE,OAAOC,OAAOH,GAAMI,OAAM,SAAAC,GAAC,MAAS,IAALA,MAGrCC,EAAU,iDAAG,WAAOC,GAAP,sFACfA,EAAEC,iBADa,UAKNT,IALM,wBAMPpO,GAAW,GAEL8O,EAAalG,KAAOuM,EAAYxK,sBAAsB9B,OACxC,cAEd0M,EAAwB3M,KAAOuM,EAAYxK,sBAAsB9B,OAAO,YAE9EwM,EAAgBG,sBAAwBL,EAAYlG,QACpDoG,EAAgBzK,mBAAqBkE,EACrCuG,EAAgBI,eAAiBN,EAAYF,oBAC7CI,EAAgBK,iBAAmBP,EAAYH,mBAC/CK,EAAgBhG,OAAStE,EACzBsK,EAAgBvK,mBAAqByK,EAlB9B,UAoBDlV,IAAM0P,KAAN,UAAcxR,EAAd,uCAAgDwM,GAAesK,EACrE,CAAE9U,QAAS,CAAC,+BAA4B/B,MAAWwR,MAAK,SAAAC,GACpDrM,QAAQC,IAAI,gBAAiBoM,GAC7BjQ,GAAW,GACVU,IAAMwP,QAAQ,iCAAkC,CAC7CtP,SAAUF,IAAMG,SAASC,eAzB1B,QA6BPuL,EAAQsD,KAAK,KA7BN,0DAkCXjP,IAAMC,MAAM,6CAA8C,CACrDC,SAAUF,IAAMG,SAASC,YAnCnB,0DAAH,sDAkDhB,OACI,+BACI,eAAC,KAAD,UACI,eAAC,KAAD,UACI,eAAC,KAAD,CAAOsK,OAAQxM,EAAMyM,YAAaC,OAAQ1M,EAAM2M,aAAc1G,UAAWjG,EAAMiG,UAAWqE,KAAK,KAA/F,SACI,gBAAC,KAAD,CAAMiH,SAAUxB,EAAhB,UACI,eAAC,KAAD,CAAarD,OAAQ1M,EAAM2M,aAA3B,4BACA,eAAC,KAAD,UAEI,eAAC,KAAD,UACI,gBAAC,KAAD,WACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAK5D,GAAI,GAAT,SACG,eAAC,KAAD,CAAO9E,MAAM,UAAUF,MAAO,CAACE,MAAM,OAAS4I,WAAY,UAA1D,SACC,qBAAG9I,MAAO,CAACiH,UAAW,SAAtB,yBAA6C,uBAAMjH,MAAO,CAAE8I,WAAY,UAA3B,SAAuChB,IAApF,+BAEI,wBAAM9H,MAAO,CAAE8I,WAAY,UAA3B,UAAuC,IAAKlB,KAFhD,2CAII,wBAAM5H,MAAO,CAAE8I,WAAY,UAA3B,UAAuC,IAAK6C,EAAwB,IAAMZ,YAKlF,eAAC,KAAD,CAAK/F,GAAI,EAAT,SACE,gBAAC,KAAD,WACE,eAAC,KAAD,CAAO2I,IAAI,gBAAX,2BACA,eAAC,KAAD,CACIC,MAAM,EACN7O,KAAK,uBACLqD,GAAG,uBACHyL,SAAU,SAAAC,GAAM,OACd2E,EAAe,2BAAKD,GAAN,IAAmBxK,qBAAsB8F,QAG1B,IAAhC3C,EAAO6H,uBACN,uBAAM9Q,UAAWwC,EAAQ1G,MAAzB,SAAiCmN,EAAO6H,yBACtC,QAGV,eAAC,KAAD,CAAKhO,GAAI,EAAT,SACE,gBAAC,KAAD,WACE,eAAC,KAAD,CAAO2I,IAAI,GAAX,2BAEC,eAAC,KAAD,CACGlP,KAAK,OACLM,KAAK,uBACLqD,GAAG,uBACHyL,SAAU,SAAAC,GAAM,OACZ2E,EAAe,2BAAKD,GAAN,IAAmBtK,qBAAsB4F,MAE3DvC,MAAOmH,EAAgBzK,0BAQjC,eAAC,KAAD,CAAKjD,GAAI,EAAT,SACI,gBAAC,KAAD,WACE,eAAC,KAAD,CAAO2I,IAAI,gBAAX,4BACA,gBAAC,KAAD,yBAAOlP,KAAK,SAASM,KAAK,sBAAsBqD,GAAG,sBACjDmJ,MAAOiH,EAAYF,qBACdnH,EAAOmH,qBAAuB,CAAEvE,SAAS,IAFhD,IAGAF,SAAU8E,EAHV,UAIE,6CACA,yBAAQpH,MAAM,QAAd,2BACA,yBAAQA,MAAM,WAAd,iCAGF,eAAC,KAAD,UAAeJ,EAAOmH,2BAGxB,eAAC,KAAD,CAAKtN,GAAI,EAAT,SACE,gBAAC,KAAD,WACI,eAAC,KAAD,CAAO2I,IAAI,qBAAX,wBAEI,gBAAC,KAAD,yBACElP,KAAK,SACLM,KAAK,qBACLqD,GAAG,qBACH2M,MAAOyD,EAAYH,mBACnBxE,SAAU8E,GACLxH,EAAOkH,oBAAsB,CAAEtE,SAAS,IAN/C,cAQE,yBAAQxC,MAAM,GAAd,eACA,yBAAQA,MAAM,SAAd,sBACA,yBAAQA,MAAM,OAAd,oBACA,yBAAQA,MAAM,QAAd,yBAEA,eAAC,KAAD,UAAeJ,EAAOkH,0BAGlC,eAAC,KAAD,CAAKrN,GAAI,GAAT,SACA,gBAAC,KAAD,WACE,eAAC,KAAD,CAAO2I,IAAI,gBAAX,kBACA,eAAC,KAAD,aACElP,KAAK,WACLM,KAAK,UACLqD,GAAG,UACHpC,MAAO,CAAEiP,UAAW,IAAK1N,SAAU,IACnCsM,SAAU8E,EACVpH,MAASiH,EAAYlG,SAChBnB,EAAOmB,SAAW,CAAEyB,SAAS,KAGlC,eAAC,KAAD,UAAe5C,EAAOmB,eAK5B,wBACA,wBACA,eAAC,KAAD,CAAKtH,GAAI,GAAT,SACKsF,EACG,uCACI,eAAC,KAAD,IADJ,IACgB,2DAGhB,QAIXxC,GAA6B,OAAfA,EACX,eAAC,KAAD,CACIrJ,KAAK,SACL6K,QAAQ,YACRpJ,MAAM,UACNgC,UAAWwC,EAAQ4C,OACnBkC,UAAW,eAAC,KAAD,IACXiF,SAAUnE,EANd,kBAWA,eAAC,KAAD,CACI7L,KAAK,SACL6K,QAAQ,YACRpJ,MAAM,UACNgC,UAAWwC,EAAQ4C,OACnBkC,UAAW,eAAC,KAAD,IACXiF,SAAS,OANb,kBAWJ,eAAC,KAAD,CACInF,QAAQ,YACRpJ,MAAM,UACNqJ,QAAStN,EAAM2M,aACf1G,UAAWwC,EAAQ4C,OACnBkC,UAAW,eAAC,KAAD,IALf,uCChTlC9C,GAAYC,aAAW,CACzB5D,KAAM,CACFrC,MAAO,QAEXwO,UAAW,CACPC,UAAW,KAEfC,GAAI,CAAEC,aAAc,UA2TTC,GAxTM,SAACrT,GAElB,IAAMqD,EAAa,GACbiQ,EAAoBtT,EAAM0I,WAAa1I,EAAM0I,WAAa,GAKhE,EAA8BvH,mBAAS,IAAvC,mBAAOkN,EAAP,KACA,GADA,KAC8ClN,mBAASmS,IAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACMjL,EAAUgC,KAEhBtI,qBAAU,cAEP,IAGC,IAAMwR,EAAc,GACE,OAAftQ,GAAqC,KAAdA,GACtBA,EAAWuN,SAAQ,SAAStB,EAAOuB,EAAOC,GACnB,OAAhBxB,EAAK,MACJqE,EAAY5C,KAAKzB,EAAK,KAASxB,mBAK/C,IAAM8F,EAAY,aAAO,IAAIC,IAAIF,IACjC,EAA0BxS,oBAAS,GAAnC,mBAAO2S,EAAP,KAAcC,EAAd,KAEA,EAA4B5S,oBAAS,GAArC,mBAAO6S,EAAP,KAAegD,EAAf,KAEA,EAA4B7V,oBAAS,GAArC,mBAAO8S,EAAP,KAAegD,EAAf,KAEA,EAA4B9V,oBAAS,GAArC,mBAAO+S,EAAP,KAAeC,EAAf,KAEA,EAAwChT,mBAAS,IAAjD,mBAAOiT,EAAP,KAAqBC,EAArB,KACA,EAA4BlT,mBAAS,CAAC0K,WAAW,KAAjD,6BAkFJ,IAAM8I,EAAe,SAACxO,EAAIxD,GACtB,OAAS,IAANwD,EAES,gBAAC,KAAD,WACA,gBAAC,KAAD,CAAYpC,MAAO,CAAEQ,gBAAgB,UAAWN,MAAM,OAAQ6Q,OAAO,oBAAqBzP,aAAa,OAAvG,oBACW,uBAAM,iBAAN,uBAEP,eAAC,KAAD,CAAUtB,MAAO,CAACgR,MAAM,QAAxB,SACA,gBAAC,KAAD,CAAU1O,SAAU,kBA1Eb,SAAC1D,GAGxB0R,EAAgB,2BAAID,GAAiBzR,IAErCoR,GAAUD,GAqEgCoD,CAAmBvU,IAA7C,UAAmD,eAAC,KAAD,CAAa2H,KAAK,KAAKvG,MAAO,CAACE,MAAO,aAAc,IAAvG,wBAKgB,IAAzBtB,EAAIkS,mBAEK,gBAAC,KAAD,WACA,gBAAC,KAAD,CAAY9Q,MAAO,CAAEQ,gBAAgB,UAAWN,MAAM,OAAQ6Q,OAAO,oBAAqBzP,aAAa,OAAvG,oBACW,uBAAM,iBAAN,uBAEP,eAAC,KAAD,CAAUtB,MAAO,CAACgR,MAAM,QAAxB,SACA,gBAAC,KAAD,CAAU1O,SAAU,kBA9Ed,SAAC1D,GAC3B0R,EAAgB,2BAAID,GAAiBzR,IACrCqU,GAAWhD,GA4EmCmD,CAAsBxU,IAAhD,UAAsD,eAAC,KAAD,CAAc2H,KAAK,KAAKvG,MAAO,CAACE,MAAO,aAAc,IAA3G,4BAKgB,IAAzBtB,EAAIkS,mBAEK,gBAAC,KAAD,WACA,gBAAC,KAAD,CAAY9Q,MAAO,CAAEQ,gBAAgB,UAAWN,MAAM,OAAQ6Q,OAAO,oBAAqBzP,aAAa,OAAvG,oBACW,uBAAM,iBAAN,uBAEP,gBAAC,KAAD,CAAUtB,MAAO,CAACgR,MAAM,QAAxB,UACI,gBAAC,KAAD,CAAU1O,SAAU,kBAjFjC,SAAC1D,GAChB0R,EAAgB,2BAAID,GAAiBzR,IACrCwR,GAAWD,GA+E2CiB,CAAWxS,IAArC,UAA2C,eAAC,KAAD,CAAU2H,KAAK,KAAKvG,MAAO,CAACE,MAAO,aAAc,IAA5F,iBACA,gBAAC,KAAD,CAAUoC,SAAU,kBAvFlC,SAAC1D,GACf0R,EAAgB,2BAAID,GAAiBzR,IACrCsU,GAAWhD,GAqF2CmD,CAAUzU,IAApC,UAA0C,eAAC,KAAD,CAAc2H,KAAK,KAAKvG,MAAO,CAACE,MAAO,aAAc,IAA/F,2BARpB,GAgBhB,OACI,iCAEI,gBAACmR,GAAA,EAAD,CAAa,aAAW,aAAxB,UACI,eAAC,IAAD,CAAMnR,MAAM,UACRL,GAAI,CAACC,SAAU,cACfC,MAAO,kBAFX,wBAQA,eAACuR,GAAA,EAAD,CAAYpR,MAAM,cAAlB,sCAGJ,wBACA,wBACA,eAAC,KAAD,UACI,gBAAC,KAAD,WACI,yBAGA,wBACA,gBAAC,KAAD,CAAMgC,UAAU,QAAhB,UACI,gBAAC,KAAD,eAAa,uBAAMlC,MAAO,CAAGuR,cAAe,cAA/B,iCACT,eAAC,IAAD,CACI1R,GAAK,CACHC,SAAU,cACVC,MAAO,gBAHb,SAOI,gBAAC,KAAD,CACItB,KAAK,SACL6K,QAAQ,YACRpJ,MAAM,UAENgC,UAAU,oBALd,UAOI,eAAC,KAAD,IAAe,IAPnB,gBAYZ,gBAAC,KAAD,WAIA,wBACI,eAAC,KAAD,UAEQ,gBAAC,KAAD,CAAMoJ,MAAI,EAAV,UACI,eAAC,KAAD,UACI,eAAC,KAAD,CAAKtG,GAAG,IAAR,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAO2I,IAAI,aAAX,6BAEI,gBAAC,KAAD,CACElP,KAAK,SACLM,KAAK,YACLqD,GAAG,YACHyL,SAlJ7B,SAAA5B,GACb,IAAMuF,EAAUvF,EAAE+C,OAAOzD,MACzB,GAAc,QAAXiG,GAAgC,OAAZA,EACvB,CAEI,IAAMC,EAAkBnS,EAAWoS,MAAK,SAAA3F,GAAC,OAAa,OAATA,EAAEjO,MAAeiO,EAAEjO,KAAKiM,iBAAmByH,KACzF7B,EAAmB,CAAC8B,SAGnB9B,EAAmBrQ,IAqIiB,UAMG,yBAAQiM,MAAM,MAAd,mBAEGsE,EAAalR,KAAI,SAAAoN,GAAC,OAChB,yBAAgBR,MAAOQ,EAAvB,SACGA,GADUA,gBA0BjC,gBAAC,KAAD,WACA,wBACI,gBAAC,KAAD,CAAQ4F,SAAO,EAACC,YAAU,EAA1B,UACI,wBAAO5R,MAAO,CAAGQ,gBAAgB,UAAWN,MAAM,WAAlD,SACI,gCACI,6CACA,4CACA,8CACA,iDACA,yCACA,yCACA,6BAGR,iCACMoK,EAgBA,mCAAI,eAAC,KAAD,CAASpK,MAAM,YAAnB,0BAhBUwP,EAAgBF,SAASC,MAAM9Q,KAAI,SAACC,GAAD,OAC3CA,EAAIuC,QAAQxC,KAAI,SAAC2U,GAAD,OACoB,OAA/BA,EAAO/G,qBAA2D,IAA3B3N,EAAIkS,mBACzC,sBAAiB9Q,MAAO,CAAE6R,kBAAmB,QAA7C,UACE,qBAAI3P,UAAWwC,EAAQ0K,GAAvB,SAA4BxQ,EAAIoL,mBAChC,qBAAI9H,UAAWwC,EAAQ0K,GAAvB,SAA4BxQ,EAAIuL,cAChC,qBAAIjI,UAAWwC,EAAQ0K,GAAvB,SAA2B,eAAC,KAAD,CAAQlP,MAAM,UAAd,SAAyBoT,EAAOzL,mBAC3D,qBAAI3F,UAAWwC,EAAQ0K,GAAvB,SAA4BkE,EAAO/G,oBAAsB,IAAM+G,EAAO7G,sBACtE,qBAAIvK,UAAWwC,EAAQ0K,GAAvB,UA3LpCnD,EA2L6E,EA1LvF,IAAJA,EACQ,6BAAG,eAAC,KAAD,CAAQ/L,MAAM,OAAd,gCACD,IAAJ+L,EACE,6BAAG,eAAC,KAAD,CAAQ/L,MAAM,QAAd,iCACD,IAAJ+L,EACE,6BAAG,eAAC,KAAD,CAAQ/L,MAAM,QAAd,+BACD,IAAJ+L,EACE,6BAAG,eAAC,KAAD,CAAQ/L,MAAM,QAAd,+BACD,IAAJ+L,EACE,6BAAG,eAAC,KAAD,CAAQ/L,MAAM,QAAd,gCAEH,6BAAG,eAAC,KAAD,CAAQA,MAAM,UAAd,qCAgLuC,qBAAIgC,UAAWwC,EAAQ0K,GAAvB,SAA4BwB,EAAa,EAAG0C,KAC5C,qBAAIpR,UAAWwC,EAAQ0K,OAPhBxQ,EAAIwD,IAUb,wBAhMlC,IAAA6J,aAuMe,2CAW/B8D,GAASE,GAAWE,GAAUD,EAE/B,uCACI,eAACqD,GAAD,CAAoB7K,YAAaqH,EAAOnH,aAhRxB,kBAAMoH,GAAUD,IAgRmCpI,WAAY0I,IAE/E,eAAC,GAAD,CAAiB3H,YAAayH,EAAQvH,aA5QrB,kBAAMwH,GAAWD,IA4QgCxI,WAAY0I,OAIlF,OCtPOxN,qBAjFA,SAAAC,GAAK,MAAK,CACvBC,KAAM,CACJrC,MAAO,QAETsC,QAAS,CACPzB,SAAUuB,EAAMG,WAAWC,QAAQ,KAErCC,iBAAkB,CAChB5B,SAAUuB,EAAMG,WAAWC,QAAQ,IACnChD,MAAO4C,EAAMM,QAAQC,KAAKC,WAE5BC,KAAM,CACJC,cAAe,SACfC,OAAQ,GACR/C,MAAO,IAETgD,QAAS,CACPC,WAAY,UAEdC,OAAQ,CACNC,UAAW,UAEbC,OAAQ,CACNC,WAAW,aAAD,OAAejB,EAAMM,QAAQY,SACvCC,QAAQ,GAAD,OAAKnB,EAAMoB,QAAQC,KAAnB,cAAkD,EAArBrB,EAAMoB,QAAQC,KAA3C,OAETC,KAAM,CACJlE,MAAO4C,EAAMM,QAAQiB,QAAQC,KAC7BC,eAAgB,OAChB,UAAW,CACTA,eAAgB,iBAmDP1B,EA7Cf,SAAqB5G,GACjB,IAAIyN,EAAUC,cACd,EAA4BvM,mBAAS,IAArC,mBAAO0U,EAAP,KAAeC,EAAf,KACQrN,EAAYzI,EAAZyI,QAEFC,EAAa+E,EAAQ9H,UAAY8H,EAAQ9H,SAAS7B,MAAQ2J,EAAQ9H,SAAS7B,MAAQ,GAGnFiS,EAAWvU,sBAAW,gCAAC,uHAEEC,IAAMC,IAAN,UAAa/B,EAAb,6BAAqC+I,EAAWsN,SAAW,CAAErU,QAAS,CAAC,+BAA4B/B,MAFrG,OAEfgC,EAFe,OAGrBoD,QAAQC,IAAI,kBAAmBrD,GAC/BkU,EAAUlU,EAASC,MAJE,gDAMrBC,IAAMC,MAAM,uCAAwC,CAChDC,SAAUF,IAAMG,SAASC,YAPR,yDAU1B,IAML,OAJGC,qBAAU,WACN4T,MACD,CAACA,IAGL,sBAAK9P,UAAWwC,EAAQ3B,KAAxB,SACE,eAAC,KAAD,UACE,eAACmP,GAAA,EAAD,UAEsC,IAAlCtG,OAAOuG,QAAQL,GAAQnF,OACvB,uCACA,eAAC,GAAD,CAAmBhI,WAAYmN,IAC/B,wBACA,eAAC,GAAD,CAAanN,WAAYmN,OAEvB,yBC/DRpL,GAAYC,cAAW,SAAA7D,GAAK,MAAK,CACnC8D,KAAM,CACFC,OAAQ/D,EAAMoB,QAAQ,IACtB4C,QAAS,OACTC,cAAe,SACfpD,WAAY,UAEhBqD,KAAM,CACFtG,MAAO,OACPuG,UAAWnE,EAAMoB,QAAQ,IAE7BgD,OAAQ,CACJL,OAAQ/D,EAAMoB,QAAQ,EAAG,EAAG,IAEhCiD,WAAY,CACRC,aAAc,IAElBC,OAAQ,CACJ5D,OAAQ,GACR/C,MAAO,KAEX4G,OAAQ,CACJT,OAAQ/D,EAAMoB,QAAQ,IAG1BnB,KAAM,CACF,QAAS,CACL8D,OAAQ/D,EAAMoB,QAAQ,KAG9BqD,MAAO,CACHT,QAAS,YA6PF0M,GAzPW,SAACvX,GACP0N,cAAhB,IACMjF,EAAUgC,KACViB,EAAa1L,EAAM0L,WAAa1L,EAAM0L,WAAa,GACnDC,EAAcD,EAAWE,eAEzBC,EAAaH,EAAWI,UACxB4D,EAAwBhE,EAAW4E,oBACnCxB,EAAwBpD,EAAW8E,oBACnCrE,EAAcT,EAAWvF,GAM/B,GAJyBuF,EAAWvF,IAAKuF,EAAW8L,gBACtC9L,EAAWvF,GAGKhF,oBAAS,IAAvC,mBAEA,GAFA,UAE8BA,oBAAS,IAAvC,mBAAOkN,EAAP,KAAgBjN,EAAhB,KACA,EAA8BD,mBAAS,IAAvC,mBACA,GADA,UAEQA,mBAAS,CACTsW,qBAAqB,GACrBrL,qBAAqB,GACrBe,eAAe,GAEfuK,aAAa,GACb3K,YAAY,MAPpB,mBAAOiC,EAAP,KAAoBC,EAApB,KAUA,EAA4B9N,mBAAS,IAArC,mBAAO+N,EAAP,KAAeC,EAAf,KAEA,EAAwChO,mBAAS,CAC3C,YAAe,GACf,mBAAsB,GACtB,GAAM,EACN,eAAkB,GAClB,OAAU,EACV,YAAe6I,KAAO,IAAIX,MAAQY,OAAO,YACzC,mBAAsBD,KAAO,IAAIX,MAAQY,OAAO,cAPtD,mBAAO0N,EAAP,KAcInI,GAdJ,KAce,WACb,IAAIC,EAAI,eAAQP,GAShB,OAPAO,EAAKrD,qBAAuB4C,EAAY5C,qBAAuB,GAAK,qBAEpEqD,EAAKiI,aAAe1I,EAAY0I,aAAe,GAAK,0BAEpDvI,EAAU,eACHM,IAEAE,OAAOC,OAAOH,GAAMI,OAAM,SAAAC,GAAC,MAAS,IAALA,OAGlCC,EAAU,iDAAG,WAAOC,GAAP,sFACfA,EAAEC,kBACCT,IAFY,wBAGTpO,GAAW,GAELwW,EAAkB5N,KAAOgF,EAAY5C,sBAAsBnC,OAC7B,cAE9B4N,EAAuB7N,KAAOgF,EAAY5C,sBAAsBnC,OAAO,YAE7E0N,EAAa7K,YAAc8K,EAC3BD,EAAa3K,mBAAqB4K,EAClCD,EAAalH,OAAStE,EACtBwL,EAAa5K,YAAc8K,EAC3BF,EAAa1K,mBAAqB4K,EAClCF,EAAaxK,eAAiB6B,EAAY7B,eAE1CnI,QAAQC,IAAI,iBAAkB+J,EAAa2I,GAjBlC,UAmBHlW,IAAM0P,KAAN,UAAcxR,EAAd,sBAAuCgY,EAC7C,CAAEhW,QAAS,CAAC,+BAA4B/B,MAAWwR,MAAK,SAAAC,GACpDrM,QAAQC,IAAI,gBAAiBoM,GAC7BjQ,GAAW,GACVU,IAAMwP,QAAQ,iCAAkC,CAC7CtP,SAAUF,IAAMG,SAASC,eAxBxB,4CAAH,sDAmDlB,OACI,+BACI,eAAC,KAAD,CAAOsK,OAAQxM,EAAMyM,YAAaC,OAAQ1M,EAAM2M,aAAc1G,UAAWjG,EAAMiG,UAAWqE,KAAK,KAA/F,SACI,gBAAC,KAAD,CAAMiH,SAAUxB,EAAhB,UACI,eAAC,KAAD,CAAarD,OAAQ1M,EAAM2M,aAA3B,8BACI,eAAC,KAAD,UAEI,eAAC,KAAD,UACI,gBAAC,KAAD,WACI,gBAAC,KAAD,CAAK5I,MAAO,CAAEiH,UAAW,QAAzB,UACI,gBAAC,KAAD,CAAKjC,GAAG,KAAR,UACI,eAAC,KAAD,CAAO9E,MAAM,UAAUF,MAAO,CAACE,MAAM,OAAS4I,WAAY,UAA1D,SACA,qBAAG9I,MAAO,CAACiH,UAAW,SAAtB,yBAA6C,uBAAMjH,MAAO,CAAE8I,WAAY,UAA3B,SAAuChB,IAApF,+BAEI,wBAAM9H,MAAO,CAAE8I,WAAY,UAA3B,UAAuC,IAAKlB,KAFhD,2CAII,wBAAM5H,MAAO,CAAE8I,WAAY,UAA3B,UAAuC,IAAK6C,EAAwB,IAAMZ,UAI5E,2BAGN,gBAAC,KAAD,CAAKlC,GAAG,IAAR,yBAEM,wBACA,eAAC,KAAD,CAAgB+E,MAAM,EAAO7O,KAAK,eAAgBqD,GAAG,eACnDyL,SAAU,SAAAC,GAAM,OACd5C,EAAe,2BAAKD,GAAN,IAAmB0I,aAAc7F,WAIzD,gBAAC,KAAD,CAAKjF,GAAG,IAAR,0BAEQ,wBACA,eAAC,KAAD,CAAgB+E,MAAM,EAAO7O,KAAK,uBAAwBqD,GAAG,uBAC3DyL,SAAU,SAAAC,GAAM,OACd5C,EAAe,2BAAKD,GAAN,IAAmB5C,qBAAsByF,WAInE,eAAC,KAAD,CAAK9I,GAAI,EAAT,SACI,gBAAC,KAAD,WACE,eAAC,KAAD,CAAO2I,IAAI,GAAX,0BAEC,eAAC,KAAD,CACGlP,KAAK,OACLM,KAAK,sBACLqD,GAAG,sBACHyL,SAAU,SAAAC,GAAM,OACZ5C,EAAe,2BAAKD,GAAN,IAAmBjC,YAAa8E,MAElDvC,MAAOqI,EAAa5K,mBAQ5B,eAAC,KAAD,CAAKhE,GAAI,EAAT,SACI,gBAAC,KAAD,WACE,eAAC,KAAD,CAAO2I,IAAI,GAAX,2BAEC,eAAC,KAAD,CACGlP,KAAK,OACLM,KAAK,uBACLqD,GAAG,uBACHyL,SAAU,SAAAC,GAAM,OACZ5C,EAAe,2BAAKD,GAAN,IAAmB/B,mBAAoB4E,MAEzDvC,MAAOqI,EAAa1K,6BASpC,eAAC,KAAD,UACG,eAAC,KAAD,CAAKlE,GAAI,GAAT,SACE,gBAAC,KAAD,WACE,eAAC,KAAD,CAAO2I,IAAI,iBAAX,2BACA,eAAC,KAAD,CACElP,KAAK,WACLM,KAAK,iBACLqD,GAAG,iBACHpC,MAAO,CAAEiP,UAAW,IAAK1N,SAAU,IACnCsM,SA7JL,SAAA5B,GAChCf,EAAc,2BAAOD,GAAP,mBAAqBgB,EAAE+C,OAAOjQ,KAAOkN,EAAE+C,OAAOzD,mBAmK9B,wBACCjB,EAAU,eAAC,KAAD,IAAc,GACzB,wBACMxC,GAA6B,OAAfA,EACb,eAAC,KAAD,CACIrJ,KAAK,SACL6K,QAAQ,YACRpJ,MAAM,UACNgC,UAAWwC,EAAQ4C,OACnBkC,UAAW,eAAC,KAAD,IACXiF,SAAUnE,EANd,kBAWA,eAAC,KAAD,CACI7L,KAAK,SACL6K,QAAQ,YACRpJ,MAAM,UACNgC,UAAWwC,EAAQ4C,OACnBkC,UAAW,eAAC,KAAD,IACXiF,SAAS,OANb,kBAWJ,eAAC,KAAD,CACInF,QAAQ,YACRpJ,MAAM,UACNqJ,QAAStN,EAAM2M,aACf1G,UAAWwC,EAAQ4C,OACnBkC,UAAW,eAAC,KAAD,IALf,mCCnQjC9C,GAAYC,aAAW,CACzB5D,KAAM,CACFrC,MAAO,QAEXwO,UAAW,CACPC,UAAW,KAEfC,GAAI,CAAEC,aAAc,UAsXTC,GAnXM,SAACrT,GAGlB,IAAMqD,EAAa,GACbiQ,EAAoBtT,EAAM0I,WAAa1I,EAAM0I,WAAa,GAIhE,EAA8BvH,mBAAS,IAAvC,mBAAOkN,EAAP,KACA,GADA,KAC8ClN,mBAASmS,IAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KAEA,EAAkCvS,oBAAS,GAA3C,mBAAO2W,EAAP,KAAkBC,EAAlB,KACA,EAA8C5W,mBAAS,IAAvD,mBAAO6W,EAAP,KAAwBC,EAAxB,KAEMxP,EAAUgC,KAETyN,EAAe1W,sBAAW,gCAAC,uHAEHC,IAAMC,IAAN,UAAa/B,EAAb,uCAA+CK,EAAM0I,WAAWO,WAAa,CAAEtH,QAAS,CAAC,+BAA4B/B,MAFlH,OAEpBgC,EAFoB,OAG1BoD,QAAQC,IAAI,eAAgBrD,GAC5BqW,EAAmBrW,EAASC,MAJF,gDAM1BC,IAAMC,MAAM,oDAAqD,CAC7DC,SAAUF,IAAMG,SAASC,YAPH,yDAU/B,IAEHC,qBAAU,WACN+V,MACD,CAACA,IAGA,IAAMvE,EAAc,GACF,OAAftQ,GAAqC,KAAdA,GAClBA,EAAWuN,SAAQ,SAAStB,EAAOuB,EAAOC,GACnB,OAAhBxB,EAAK,MACJqE,EAAY5C,KAAKzB,EAAK,KAASxB,mBAK/C,IAAM8F,EAAY,aAAO,IAAIC,IAAIF,IACjC,EAA0BxS,oBAAS,GAAnC,mBAAO2S,EAAP,KAAcC,EAAd,KAEA,EAA4B5S,oBAAS,GAArC,mBAAO6S,EAAP,KAEA,GAFA,KAE4B7S,oBAAS,IAArC,mBAAO8S,EAAP,KAEA,GAFA,KAE4B9S,oBAAS,IAArC,mBAAO+S,EAAP,KAAeC,EAAf,KAEA,EAAwChT,mBAAS,IAAjD,mBAAOiT,EAAP,KAAqBC,EAArB,KACA,EAA4BlT,mBAAS,CAAC0K,WAAW,KAAjD,mBAAOyI,EAAP,KAEKxI,IAFL,KAEiB,IAEbqM,GAAMC,aAAaC,QAAQ,aAE/BrT,QAAQC,IAAI,KAAKkT,IAEL,OAARA,KACArM,GAAYqM,IAwEpB,IAAMxD,GAAe,SAACxO,EAAIxD,GAC1B,GAAQ,IAALwD,EACC,OACQ,gBAAC,KAAD,WACA,gBAAC,KAAD,CAAYpC,MAAO,CAAEQ,gBAAgB,UAAWN,MAAM,OAAQ6Q,OAAO,oBAAqBzP,aAAa,OAAvG,oBACW,uBAAM,iBAAN,uBAEP,gBAAC,KAAD,CAAUtB,MAAO,CAACgR,MAAM,QAAxB,UACI,gBAAC,KAAD,CAAU1O,SAAU,kBAzDrB,SAAC1D,GAChB0R,EAAgB,2BAAID,GAAiBzR,IACrCwR,GAAWD,GAuD+BiB,CAAWxS,IAArC,UAA2C,eAAC,KAAD,CAAU2H,KAAK,KAAKvG,MAAO,CAACE,MAAO,aAAc,IAA5F,iBACA,gBAAC,KAAD,CAAUoC,SAAU,kBA/DtB,SAAC1D,GACf0R,EAAgB,2BAAID,GAAiBzR,IACrCoR,GAAUD,GA6DgCsD,CAAUzU,IAApC,UAA0C,eAAC,KAAD,CAAc2H,KAAK,KAAKvG,MAAO,CAACE,MAAO,aAAc,IAA/F,wBAYxB,OACI,iCAEI,gBAACmR,GAAA,EAAD,CAAa,aAAW,aAAxB,UACI,eAAC,IAAD,CAAMnR,MAAM,UACRL,GAAI,CAACC,SAAU,cACfC,MAAO,UAFX,wBAQA,eAACuR,GAAA,EAAD,CAAYpR,MAAM,cAAlB,mCAGJ,wBACA,wBACA,eAAC,KAAD,UACI,gBAAC,KAAD,WACI,yBAGA,wBACA,gBAAC,KAAD,CAAMgC,UAAU,QAAhB,UACI,gBAAC,KAAD,eAAa,uBAAMlC,MAAO,CAAGuR,cAAe,cAA/B,iCACT,eAAC,IAAD,CACI1R,GAAK,CACHC,SAAU,cACVC,MAAO,kBAHb,SAOI,gBAAC,KAAD,CACItB,KAAK,SACL6K,QAAQ,YACRpJ,MAAM,UACNgC,UAAU,oBAJd,UAMI,eAAC,KAAD,IAAe,IANnB,gBAWZ,eAAC,KAAD,UACI,eAAC,KAAD,UAEG,gBAAC,KAAD,CAAMoJ,MAAI,EAAV,UACK,eAAC,KAAD,UACI,eAAC,KAAD,CAAKtG,GAAG,IAAI9C,UAAU,mBAAtB,SACK,gBAAC,KAAD,CACGzD,KAAK,SACL6K,QAAQ,YACRpJ,OAAqB,IAAd6T,EAAqB,UAAW,YACvC7R,UAAU,oBACVqH,QAAS,WAzDzCyK,GAAcD,IAoDe,UAOG,eAAC,KAAD,IAAkB,IAPrB,KAO0C,IAAdA,EAAqB,sBAAuB,mCAIjF,yBAI0B,IAAdA,EACA,eAAC,IAAD,CAEEzV,MAAM,oCACNC,QAAS,CACL,CAAED,MAAO,aAAcE,MAAO,MAC9B,CACEF,MAAO,eACPE,MAAO,QAET,CAAEF,MAAO,aAAcE,MAAO,OAAQC,KAAM,OAASC,WAAW,GAChE,CACIJ,MAAO,cACPE,MAAO,cACPE,WAAW,GAEf,CACIJ,MAAO,wBACPE,MAAO,QACPE,WAAW,GAEf,CACEJ,MAAO,uBACPE,MAAO,UACPE,WAAW,GAEZ,CACGJ,MAAO,8BACPE,MAAO,iBACPE,WAAW,GAEZ,CACCJ,MAAO,SACPE,MAAO,UACPE,WAAW,IAKnBZ,KAAOmW,EAAgBtV,KAAI,SAACC,GAAD,MAAU,CAErCC,GAAID,EAAIsG,UACRnG,KAAMH,EAAII,iBAAoB,IAAMJ,EAAIK,gBACxCC,KAAMN,EAAIO,UAAY,IAAMP,EAAIQ,UAChCG,YAAaX,EAAIiJ,eACjBxI,MAAmC,OAA5BT,EAAI2V,oBAA+B,OAAS3V,EAAI2V,oBAAsB,IAAK3V,EAAI4V,oBACtFrT,QAAoC,OAA3BvC,EAAIqJ,mBAA8B,OAAQrJ,EAAIqJ,mBAAqB,IAAMrJ,EAAIuJ,mBACtF/G,eAA2C,OAA3BxC,EAAIqK,mBAA8B,OAASrK,EAAIqK,mBAAqB,IAAMrK,EAAIsK,mBAC9FuL,QAAqC,OAA3B7V,EAAIqK,mBAA8B,YAAc,sBAI5D,uCACA,eAAC,KAAD,UACI,eAAC,KAAD,CAAKjE,GAAG,IAAR,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAO2I,IAAI,aAAX,6BAEI,gBAAC,KAAD,CACElP,KAAK,SACLM,KAAK,YACLqD,GAAG,YACHyL,SA/LrC,SAAA5B,GACb,IAAMuF,EAAUvF,EAAE+C,OAAOzD,MACzB,GAAc,QAAXiG,GAAgC,OAAZA,EACvB,CAEG,IAAMC,EAAkBnS,EAAWoS,MAAK,SAAA3F,GAAC,OAAa,OAATA,EAAEjO,MAAeiO,EAAEjO,KAAKiM,iBAAmByH,KACxF7B,EAAmB,CAAC8B,SAGnB9B,EAAmBrQ,IAkLyB,UAMG,yBAAQiM,MAAM,MAAd,mBAEGsE,EAAalR,KAAI,SAAAoN,GAAC,OAChB,yBAAgBR,MAAOQ,EAAvB,SACGA,GADUA,gBAwBpC,gBAAC,KAAD,WACG,wBACA,gBAAC,KAAD,CAAQ4F,SAAO,EAACC,YAAU,EAA1B,UACI,wBAAO5R,MAAO,CAAGQ,gBAAgB,UAAWN,MAAM,WAAlD,SACI,gCACI,6CACA,4CACC,8CACD,gDACA,yCACA,yCACA,6BAGR,iCACGoK,EAgBG,mCAAI,eAAC,KAAD,CAASpK,MAAM,YAAnB,0BAhBOwP,EAAgBF,SAASC,MAAM9Q,KAAI,SAACC,GAAD,OACxCA,EAAIuC,QAAQxC,KAAI,SAAC2U,GAAD,OACoB,OAA/BA,EAAO/G,qBAA2D,IAA3B3N,EAAIkS,mBACzC,sBAAiB9Q,MAAO,CAAE6R,kBAAmB,QAA7C,UACE,qBAAI3P,UAAWwC,EAAQ0K,GAAvB,SAA4BxQ,EAAIoL,mBACjC,qBAAI9H,UAAWwC,EAAQ0K,GAAvB,SAA4BxQ,EAAIuL,cAC/B,qBAAIjI,UAAWwC,EAAQ0K,GAAvB,SAA2B,eAAC,KAAD,CAAQlP,MAAM,UAAd,SAAyBoT,EAAOzL,mBAC3D,qBAAI3F,UAAWwC,EAAQ0K,GAAvB,SAA4BkE,EAAOrL,mBAAqB,IAAMqL,EAAOnL,qBACrE,qBAAIjG,UAAWwC,EAAQ0K,GAAvB,UAtOxCnD,EAsOiF,EArO3F,IAAJA,EACQ,6BAAG,eAAC,KAAD,CAAQ/L,MAAM,QAAd,gCACD,IAAJ+L,EACE,6BAAG,eAAC,KAAD,CAAQ/L,MAAM,QAAd,iCACD,IAAJ+L,EACE,6BAAG,eAAC,KAAD,CAAQ/L,MAAM,UAAd,+BACD,IAAJ+L,EACE,6BAAG,eAAC,KAAD,CAAQ/L,MAAM,QAAd,+BACD,IAAJ+L,EACE,6BAAG,eAAC,KAAD,CAAQ/L,MAAM,QAAd,gCAEH,6BAAG,eAAC,KAAD,CAAQA,MAAM,QAAd,qCA2N2C,qBAAIgC,UAAWwC,EAAQ0K,GAAvB,SAA4BwB,GAAa,EAAG0C,KAC5C,qBAAIpR,UAAWwC,EAAQ0K,OAPhBxQ,EAAIwD,IAUb,wBA3OtC,IAAA6J,aAkPmB,6CAanC8D,GAASE,GAAWE,GAAUD,EAE/B,uCACI,eAAC,GAAD,CAAkBxH,YAAaqH,EAAOnH,aA5TtB,kBAAMoH,GAAUD,IA4TiCpI,WAAY0I,EAAcjG,UAAwB,KAAbrC,GAAkBA,GAAYwI,EAAM,aAC1I,eAAC,GAAD,CAAiB7H,YAAayH,EAAQvH,aAvTrB,kBAAMwH,GAAWD,IAuTgCxI,WAAY0I,OAIlF,OCrTOxN,qBAjFA,SAAAC,GAAK,MAAK,CACvBC,KAAM,CACJrC,MAAO,QAETsC,QAAS,CACPzB,SAAUuB,EAAMG,WAAWC,QAAQ,KAErCC,iBAAkB,CAChB5B,SAAUuB,EAAMG,WAAWC,QAAQ,IACnChD,MAAO4C,EAAMM,QAAQC,KAAKC,WAE5BC,KAAM,CACJC,cAAe,SACfC,OAAQ,GACR/C,MAAO,IAETgD,QAAS,CACPC,WAAY,UAEdC,OAAQ,CACNC,UAAW,UAEbC,OAAQ,CACNC,WAAW,aAAD,OAAejB,EAAMM,QAAQY,SACvCC,QAAQ,GAAD,OAAKnB,EAAMoB,QAAQC,KAAnB,cAAkD,EAArBrB,EAAMoB,QAAQC,KAA3C,OAETC,KAAM,CACJlE,MAAO4C,EAAMM,QAAQiB,QAAQC,KAC7BC,eAAgB,OAChB,UAAW,CACTA,eAAgB,iBAmDP1B,EA7Cf,SAAqB5G,GACjB,IAAIyN,EAAUC,cACd,EAA4BvM,mBAAS,IAArC,mBAAO0U,EAAP,KAAeC,EAAf,KACQrN,EAAYzI,EAAZyI,QAEFC,EAAa+E,EAAQ9H,UAAY8H,EAAQ9H,SAAS7B,MAAQ2J,EAAQ9H,SAAS7B,MAAQ,GAGnFiS,EAAWvU,sBAAW,gCAAC,uHAEEC,IAAMC,IAAN,UAAa/B,EAAb,6BAAqC+I,EAAWsN,SAAW,CAAErU,QAAS,CAAC,+BAA4B/B,MAFrG,OAEfgC,EAFe,OAIrBkU,EAAUlU,EAASC,MAJE,gDAMrBC,IAAMC,MAAM,uCAAwC,CAChDC,SAAUF,IAAMG,SAASC,YAPR,yDAU1B,IAML,OAJGC,qBAAU,WACN4T,MACD,CAACA,IAGL,sBAAK9P,UAAWwC,EAAQ3B,KAAxB,SACE,eAAC,KAAD,UACE,eAACmP,GAAA,EAAD,UAEsC,IAAlCtG,OAAOuG,QAAQL,GAAQnF,OACvB,uCACA,eAAC,GAAD,CAAmBhI,WAAYmN,IAC/B,wBACA,eAAC,GAAD,CAAanN,WAAYmN,OAEvB,qB,mDChERpL,GAAYC,cAAW,SAAC7D,GAAD,MAAY,CACrC8D,KAAM,CACFC,OAAQ/D,EAAMoB,QAAQ,IACtB4C,QAAS,OACTC,cAAe,SACfpD,WAAY,UAEhBqD,KAAM,CACFtG,MAAO,OACPuG,UAAWnE,EAAMoB,QAAQ,IAE7BgD,OAAQ,CACJL,OAAQ/D,EAAMoB,QAAQ,EAAG,EAAG,IAEhCiD,WAAY,CACRC,aAAc,IAElBC,OAAQ,CACJ5D,OAAQ,GACR/C,MAAO,KAEX4G,OAAQ,CACJT,OAAQ/D,EAAMoB,QAAQ,IAE1BnB,KAAM,CACF,QAAS,CACL8D,OAAQ/D,EAAMoB,QAAQ,KAG9BqD,MAAO,CACHT,QAAS,QAEb9I,MAAO,CACHkC,MAAO,UACPqB,SAAU,cAsSlB,SAASmT,GAAT,GAIM,IAHFpV,EAGC,EAHDA,WACAwN,EAEC,EAFDA,MACA6H,EACC,EADDA,iBA+CA,OACQ,gCACI,8BAAKrV,EAAWsV,OAChB,8BAAKtV,EAAWuV,YAChB,wBACA,8BACI,eAAC,KAAD,CAAY,aAAW,SAAStO,KAAK,QAAQrG,MAAM,QAAQqJ,QAAS,kBAAKoL,EAAiB7H,IAA1F,SACI,eAAC,KAAD,CAAYvL,SAAS,mBAQ9BkI,OAnWK,SAACxN,GACjB,IAAMyI,EAAUgC,KAEhB,EAA8BtJ,oBAAS,GAAvC,mBAAOkN,EAAP,KAAgBjN,EAAhB,KACA,EAA8BD,oBAAS,GAAvC,mBAEA,GAFA,UAE8BA,mBAAS,KAAvC,mBACA,GADA,UACsCA,mBAAS,CAACwX,KAAK,GAAGE,cAAc,GAAGC,cAAc,GAAGF,UAAU,GAAIG,SAAS,GAAIC,gBAAgB,MAArI,mBAAOhK,EAAP,KAAoBC,EAApB,KAEA,EAA4B9N,mBAAS,IAArC,mBAAO+N,EAAP,KAAeC,EAAf,KACA,EAAoChO,mBAAS,IAA7C,mBAAOkC,EAAP,KAAmB4V,EAAnB,KACA,EAAoD9X,mBAAS,IAA7D,6BAEAgB,qBAAU,cAEP,IAEH,IAYMuU,EAA8B,SAAC1G,GAEjCf,EAAe,2BAAKD,GAAN,mBAAoBgB,EAAE+C,OAAOjQ,KAAOkN,EAAE+C,OAAOzD,UAIzDoJ,EAAmB,SAAA7H,GACrBxN,EAAW6V,OAAOrI,EAAO,GACzBoI,EAAc,aAAI5V,KAIhBmM,EAAW,WACb,IAAIC,EAAI,eAAQP,GAgBhB,OAfAO,EAAKkJ,KAAO3J,EAAY2J,KAClB,GACA,0BACNlJ,EAAKoJ,cAAgB7J,EAAY6J,cAC3B,GACA,0BACNpJ,EAAKqJ,cAAgB9J,EAAY8J,cAAgB,GAAK,0BACtDrJ,EAAKmJ,UAAY5J,EAAY4J,UACvB,GACA,0BACNnJ,EAAKsJ,SAAW/J,EAAY+J,SAAW,GAAK,0BAC5CtJ,EAAKuJ,gBAAkBhK,EAAYgK,gBAAkB,GAAK,0BAC1D7J,EAAU,eACHM,IAEAE,OAAOC,OAAOH,GAAMI,OAAM,SAACC,GAAD,MAAY,IAALA,MAwB5C,OAFA9K,QAAQC,IAAI5B,EAAWqN,OAAQ,GAG3B,+BACI,eAAC,KAAD,UACI,eAAC,KAAD,UACI,eAAC,KAAD,CAAOlE,OAAQxM,EAAMyM,YAAaC,OAAQ1M,EAAM2M,aAAc1G,UAAWjG,EAAMiG,UAAWqE,KAAK,KAA/F,SACI,gBAAC,KAAD,CAAMiH,SA3BP,SAACvB,GAEhB,GADAA,EAAEC,iBACET,IAAY,CACZpO,GAAW,KAwBC,UACI,eAAC,KAAD,CAAasL,OAAQ1M,EAAM2M,aAA3B,gCACA,eAAC,KAAD,UAEI,eAAC,KAAD,UACI,gBAAC,KAAD,WACI,gBAAC,KAAD,WAEI,eAAC,KAAD,CAAK5D,GAAI,EAAT,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAO2I,IAAI,gBAAX,6BACA,eAAC,KAAD,CACIlP,KAAK,OACLM,KAAK,gBACLqD,GAAG,gBACH2M,MAAO9D,EAAY6J,cACnBjH,SAAU8E,SAKtB,eAAC,KAAD,CAAK3N,GAAI,EAAT,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAO2I,IAAI,gBAAX,8BACA,eAAC,KAAD,CACIlP,KAAK,OACLM,KAAK,gBACLqD,GAAG,gBACHyL,SAAU8E,SAItB,eAAC,KAAD,CAAK3N,GAAI,IACT,eAAC,KAAD,CAAKA,GAAI,EAAT,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAO2I,IAAI,gBAAX,6BACI,0BACIyH,aAAc,SACdvH,SAAU8E,EACVzQ,UAAU,eACVnD,KAAK,YACLqD,GAAG,YALP,UAOA,yBAAQmJ,MAAM,SAASkD,UAAQ,EAA/B,uBAIA,uDAIZ,eAAC,KAAD,CAAKzJ,GAAI,EAAT,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAO2I,IAAI,aAAX,wBACA,0BACIyH,aAAc,SACdvH,SAAU8E,EACVzQ,UAAU,eACVnD,KAAK,WACLqD,GAAG,WALP,UAOI,yBAAQmJ,MAAM,SAASkD,UAAQ,EAA/B,uBAGA,6CACA,mDAIJ,eAAC,KAAD,UACKtD,EAAON,2BAIpB,eAAC,KAAD,CAAK7F,GAAI,IACT,eAAC,KAAD,CAAKA,GAAI,EAAG9C,UAAU,mBAAtB,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAOyL,IAAI,aAAX,oBAEA,0BACIyH,aAAc,SACdhT,GAAG,OACHF,UAAU,eACVnD,KAAK,OACL8O,SAAU8E,EALd,UAOI,yBAAQpH,MAAM,SAASkD,UAAQ,EAA/B,uBAIA,kDAEJ,eAAC,KAAD,UACKtD,EAAON,2BAKpB,eAAC,KAAD,CAAK7F,GAAI,EAAT,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAO2I,IAAI,aAAX,6BAEI,0BACIyH,aAAc,SACdhT,GAAG,kBACHF,UAAU,eACVnD,KAAK,kBACL8O,SAAU8E,EALd,UAOI,yBAAQpH,MAAM,SAASkD,UAAQ,EAA/B,uBAIA,kDAER,eAAC,KAAD,UACKtD,EAAON,2BAIpB,eAAC,KAAD,CAAK7F,GAAI,EAAT,SAEI,gBAACsB,GAAA,EAAD,CAAU+O,GAAG,IAAInV,MAAM,QAAQqJ,QAhM1D,SAAA0C,GACb,GAAGR,IAAH,CACA,IAAM6J,EAAa,uBAAOhW,GAAP,CAAmB2L,IACtCiK,EAAcI,GACdrU,QAAQC,IAAIoU,KA4LgF/O,KAAK,QAAQvG,MAAO,CAAEiH,UAAU,IAApF,UACI,eAACsO,GAAA,EAAD,CAAMxW,KAAK,SADf,kBAIJ,wBACA,wBACA,eAAC,KAAD,CAAKiG,GAAI,GAAT,SACM,sBAAK9C,UAAWwC,EAAQ8Q,KAAxB,SACClW,EAAWqN,OAAQ,EAEhB,eAAC8I,GAAA,EAAD,UACA,gBAAC,KAAD,CAAQ9D,SAAO,EAACC,YAAU,EAA1B,UACM,iCACI,gCACI,uCACA,6CACA,gDAGR,iCACCtS,EAAWX,KAAI,SAACW,EAAYwN,GAAb,OAEZ,eAAC4H,GAAD,CAEI5H,MAAOA,EACPxN,WAAYA,EACZqV,iBAAkBA,GAHb7H,aAUpB,OAIT,wBACA,eAAC,KAAD,CAAK9H,GAAI,GAAT,SACKsF,EACG,uCACI,eAAC,KAAD,IADJ,IACgB,2DAGhB,QAKR,eAAC,KAAD,CACI7L,KAAK,SACL6K,QAAQ,YACRpJ,MAAM,UACNgC,UAAWwC,EAAQ4C,OACnBkC,UAAW,eAAC,KAAD,IACXiF,SAAUnP,EAAWqN,OAAQ,KAAK,GAAe,OANrD,kBAWJ,eAAC,KAAD,CACIrD,QAAQ,YACRpJ,MAAM,UACNqJ,QAAStN,EAAM2M,aACf1G,UAAWwC,EAAQ4C,OACnBkC,UAAW,eAAC,KAAD,IALf,uC,+BC6azBkM,GA1uBU,WACvB,OACE,eAAC,WAAD,UAGE,uBAAKxT,UAAU,MAAf,UACA,sBAAKA,UAAU,8BAAf,SACI,uBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,6BAAf,SACE,qBAAIA,UAAU,aAAd,2BAEF,sBAAKA,UAAU,YAAf,SACE,eAAC,KAAD,CACElC,MAAO,CAAEyD,OAAQ,SACjBrB,GAAG,aACHF,UAAU,yCAHZ,SAKE,sBAAIA,UAAU,WAAd,UACE,8BACE,uBAAKA,UAAU,iBAAf,UACE,sBAAKA,UAAU,aAAf,SACE,sBAAMyT,IAAI,GAAGjV,MAAM,SAErB,uBAAKwB,UAAU,aAAf,UACE,qBAAIA,UAAU,OAAd,0BACA,wBAAOA,UAAU,UAAjB,wCAIF,gBAAC0T,GAAA,EAAD,CAAU1T,UAAU,WAApB,UACE,eAAC0T,GAAA,EAASC,OAAV,CACEvM,QAAQ,gBACRpH,UAAU,qBAFZ,SAIE,sBACExB,MAAM,OACN+C,OAAO,OACPqS,QAAQ,YACRC,QAAQ,MAJV,SAME,qBACEC,OAAO,OACPC,YAAY,IACZC,KAAK,OACLC,SAAS,UAJX,UAME,uBAAMpK,EAAE,IAAIqK,EAAE,IAAI1V,MAAM,KAAK+C,OAAO,OACpC,yBAAQyS,KAAK,UAAUG,GAAG,IAAIC,GAAG,KAAKC,EAAE,MACxC,yBAAQL,KAAK,UAAUG,GAAG,KAAKC,GAAG,KAAKC,EAAE,MACzC,yBAAQL,KAAK,UAAUG,GAAG,KAAKC,GAAG,KAAKC,EAAE,aAI/C,gBAACX,GAAA,EAASY,KAAV,CAAetU,UAAU,gBAAzB,UACE,eAAC0T,GAAA,EAASa,KAAV,CACEvU,UAAU,gBACVrC,GAAG,gBAFL,kBAMA,eAAC+V,GAAA,EAASa,KAAV,CACEvU,UAAU,gBACVrC,GAAG,gBAFL,+BAUR,8BACE,uBAAKqC,UAAU,iBAAf,UACE,sBAAKA,UAAU,wBAAf,gBACA,uBAAKA,UAAU,aAAf,UACE,qBAAIA,UAAU,OAAd,+BACA,wBAAOA,UAAU,UAAjB,wCAIF,gBAAC0T,GAAA,EAAD,CAAU1T,UAAU,WAApB,UACE,eAAC0T,GAAA,EAASC,OAAV,CACEvM,QAAQ,SACRpH,UAAU,6BAFZ,SAIE,sBACExB,MAAM,OACN+C,OAAO,OACPqS,QAAQ,YACRC,QAAQ,MAJV,SAME,qBACEC,OAAO,OACPC,YAAY,IACZC,KAAK,OACLC,SAAS,UAJX,UAME,uBAAMpK,EAAE,IAAIqK,EAAE,IAAI1V,MAAM,KAAK+C,OAAO,OACpC,yBAAQyS,KAAK,UAAUG,GAAG,IAAIC,GAAG,KAAKC,EAAE,MACxC,yBAAQL,KAAK,UAAUG,GAAG,KAAKC,GAAG,KAAKC,EAAE,MACzC,yBAAQL,KAAK,UAAUG,GAAG,KAAKC,GAAG,KAAKC,EAAE,aAI/C,gBAACX,GAAA,EAASY,KAAV,CAAetU,UAAU,gBAAzB,UACE,eAAC0T,GAAA,EAASa,KAAV,CACEvU,UAAU,gBACVrC,GAAG,gBAFL,kBAMA,eAAC+V,GAAA,EAASa,KAAV,CACEvU,UAAU,gBACVrC,GAAG,gBAFL,+BAUR,8BACE,uBAAKqC,UAAU,iBAAf,UACE,sBAAKA,UAAU,2BAAf,SACE,oBAAGA,UAAU,iBAEf,uBAAKA,UAAU,aAAf,UACE,qBAAIA,UAAU,OAAd,4BACA,wBAAOA,UAAU,UAAjB,wCAIF,gBAAC0T,GAAA,EAAD,CAAU1T,UAAU,WAApB,UACE,eAAC0T,GAAA,EAASC,OAAV,CACEvM,QAAQ,SACRpH,UAAU,iCAFZ,SAIE,sBACExB,MAAM,OACN+C,OAAO,OACPqS,QAAQ,YACRC,QAAQ,MAJV,SAME,qBACEC,OAAO,OACPC,YAAY,IACZC,KAAK,OACLC,SAAS,UAJX,UAME,uBAAMpK,EAAE,IAAIqK,EAAE,IAAI1V,MAAM,KAAK+C,OAAO,OACpC,yBAAQyS,KAAK,UAAUG,GAAG,IAAIC,GAAG,KAAKC,EAAE,MACxC,yBAAQL,KAAK,UAAUG,GAAG,KAAKC,GAAG,KAAKC,EAAE,MACzC,yBAAQL,KAAK,UAAUG,GAAG,KAAKC,GAAG,KAAKC,EAAE,aAI/C,gBAACX,GAAA,EAASY,KAAV,CAAetU,UAAU,gBAAzB,UACE,eAAC0T,GAAA,EAASa,KAAV,CACEvU,UAAU,gBACVrC,GAAG,gBAFL,kBAMA,eAAC+V,GAAA,EAASa,KAAV,CACEvU,UAAU,gBACVrC,GAAG,gBAFL,+BAUR,8BACE,uBAAKqC,UAAU,iBAAf,UACE,sBAAKA,UAAU,aAAf,SACE,sBAAMyT,IAAI,GAAGjV,MAAM,SAErB,uBAAKwB,UAAU,aAAf,UACE,qBAAIA,UAAU,OAAd,uCACA,wBAAOA,UAAU,UAAjB,wCAIF,gBAAC0T,GAAA,EAAD,CAAU1T,UAAU,WAApB,UACE,eAAC0T,GAAA,EAASC,OAAV,CACEvM,QAAQ,gBACRpH,UAAU,qBAFZ,SAIE,sBACExB,MAAM,OACN+C,OAAO,OACPqS,QAAQ,YACRC,QAAQ,MAJV,SAME,qBACEC,OAAO,OACPC,YAAY,IACZC,KAAK,OACLC,SAAS,UAJX,UAME,uBAAMpK,EAAE,IAAIqK,EAAE,IAAI1V,MAAM,KAAK+C,OAAO,OACpC,yBAAQyS,KAAK,UAAUG,GAAG,IAAIC,GAAG,KAAKC,EAAE,MACxC,yBAAQL,KAAK,UAAUG,GAAG,KAAKC,GAAG,KAAKC,EAAE,MACzC,yBAAQL,KAAK,UAAUG,GAAG,KAAKC,GAAG,KAAKC,EAAE,aAI/C,gBAACX,GAAA,EAASY,KAAV,CAAetU,UAAU,gBAAzB,UACE,eAAC0T,GAAA,EAASa,KAAV,CACEvU,UAAU,gBACVrC,GAAG,gBAFL,kBAMA,eAAC+V,GAAA,EAASa,KAAV,CACEvU,UAAU,gBACVrC,GAAG,gBAFL,+BAUR,8BACE,uBAAKqC,UAAU,iBAAf,UACE,sBAAKA,UAAU,0BAAf,gBACA,uBAAKA,UAAU,aAAf,UACE,qBAAIA,UAAU,OAAd,0BACA,wBAAOA,UAAU,UAAjB,wCAIF,gBAAC0T,GAAA,EAAD,CAAU1T,UAAU,WAApB,UACE,eAAC0T,GAAA,EAASC,OAAV,CACEpX,KAAK,SACLyD,UAAU,kDACV,cAAY,WAHd,SAKE,sBACExB,MAAM,OACN+C,OAAO,OACPqS,QAAQ,YACRC,QAAQ,MAJV,SAME,qBACEC,OAAO,OACPC,YAAY,IACZC,KAAK,OACLC,SAAS,UAJX,UAME,uBAAMpK,EAAE,IAAIqK,EAAE,IAAI1V,MAAM,KAAK+C,OAAO,OACpC,yBAAQyS,KAAK,UAAUG,GAAG,IAAIC,GAAG,KAAKC,EAAE,MACxC,yBAAQL,KAAK,UAAUG,GAAG,KAAKC,GAAG,KAAKC,EAAE,MACzC,yBAAQL,KAAK,UAAUG,GAAG,KAAKC,GAAG,KAAKC,EAAE,aAI/C,gBAACX,GAAA,EAASY,KAAV,CAAetU,UAAU,gBAAzB,UACE,eAAC0T,GAAA,EAASa,KAAV,CACEvU,UAAU,gBACVrC,GAAG,gBAFL,kBAMA,eAAC+V,GAAA,EAASa,KAAV,CACEvU,UAAU,gBACVrC,GAAG,gBAFL,+BAUR,8BACE,uBAAKqC,UAAU,iBAAf,UACE,sBAAKA,UAAU,2BAAf,SACE,oBAAGA,UAAU,iBAEf,uBAAKA,UAAU,aAAf,UACE,qBAAIA,UAAU,OAAd,0BACA,wBAAOA,UAAU,UAAjB,wCAIF,gBAAC0T,GAAA,EAAD,CAAU1T,UAAU,WAApB,UACE,eAAC0T,GAAA,EAASC,OAAV,CACEvM,QAAQ,gBACRpH,UAAU,qBAFZ,SAIE,sBACExB,MAAM,OACN+C,OAAO,OACPqS,QAAQ,YACRC,QAAQ,MAJV,SAME,qBACEC,OAAO,OACPC,YAAY,IACZC,KAAK,OACLC,SAAS,UAJX,UAME,uBAAMpK,EAAE,IAAIqK,EAAE,IAAI1V,MAAM,KAAK+C,OAAO,OACpC,yBAAQyS,KAAK,UAAUG,GAAG,IAAIC,GAAG,KAAKC,EAAE,MACxC,yBAAQL,KAAK,UAAUG,GAAG,KAAKC,GAAG,KAAKC,EAAE,MACzC,yBAAQL,KAAK,UAAUG,GAAG,KAAKC,GAAG,KAAKC,EAAE,aAI/C,gBAACX,GAAA,EAASY,KAAV,CAAetU,UAAU,gBAAzB,UACE,eAAC0T,GAAA,EAASa,KAAV,CACEvU,UAAU,gBACVrC,GAAG,gBAFL,kBAMA,eAAC+V,GAAA,EAASa,KAAV,CACEvU,UAAU,gBACVrC,GAAG,gBAFL,2CAelB,sBAAKqC,UAAU,8BAAf,SACE,uBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,4BAAf,SACE,qBAAIA,UAAU,aAAd,wCAEF,sBAAKA,UAAU,YAAf,SACE,eAAC,KAAD,CACElC,MAAO,CAAEyD,OAAQ,SACjBrB,GAAG,gBACHF,UAAU,sDAHZ,SAKE,sBAAIA,UAAU,WAAd,UACE,gCACE,sBAAKA,UAAU,2BACf,gBAAC,IAAD,CACEA,UAAU,4BACVrC,GAAG,gBAFL,UAIE,gDACA,sBAAIqC,UAAU,OAAd,kCACwB,IAAI,wBAC1B,yBAAQA,UAAU,eAAlB,0BAFF,OAIA,sBAAIA,UAAU,OAAd,uBACa,IAAI,wBACf,yBAAQA,UAAU,eAAlB,0BAFF,OAIA,sBAAIA,UAAU,OAAd,iCACuB,IAAI,wBACzB,yBAAQA,UAAU,eAAlB,0BAFF,aAMJ,gCACE,sBAAKA,UAAU,wBACf,gBAAC,IAAD,CACEA,UAAU,4BACVrC,GAAG,gBAFL,UAIE,gDACA,sBAAIqC,UAAU,OAAd,kCACwB,IAAI,wBAC1B,yBAAQA,UAAU,eAAlB,0BAFF,OAIA,sBAAIA,UAAU,OAAd,uBACa,IAAI,wBACf,yBAAQA,UAAU,eAAlB,0BAFF,OAIA,sBAAIA,UAAU,OAAd,iCACuB,IAAI,wBACzB,yBAAQA,UAAU,eAAlB,0BAFF,aAMJ,gCACE,sBAAKA,UAAU,0BACf,gBAAC,IAAD,CACEA,UAAU,4BACVrC,GAAG,gBAFL,UAIG,gDACD,sBAAIqC,UAAU,OAAd,kCACwB,IAAI,wBAC1B,yBAAQA,UAAU,eAAlB,0BAFF,OAIA,sBAAIA,UAAU,OAAd,uBACa,IAAI,wBACf,yBAAQA,UAAU,eAAlB,0BAFF,OAIA,sBAAIA,UAAU,OAAd,iCACuB,IAAI,wBACzB,yBAAQA,UAAU,eAAlB,0BAFF,aAMJ,gCACE,sBAAKA,UAAU,2BACf,gBAAC,IAAD,CACEA,UAAU,4BACVrC,GAAG,gBAFL,UAIG,gDACD,sBAAIqC,UAAU,OAAd,kCACwB,IAAI,wBAC1B,yBAAQA,UAAU,eAAlB,0BAFF,OAIA,sBAAIA,UAAU,OAAd,uBACa,IAAI,wBACf,yBAAQA,UAAU,eAAlB,0BAFF,OAIA,sBAAIA,UAAU,OAAd,iCACuB,IAAI,wBACzB,yBAAQA,UAAU,eAAlB,0BAFF,aAMJ,gCACE,sBAAKA,UAAU,2BACf,gBAAC,IAAD,CACEA,UAAU,4BACVrC,GAAG,gBAFL,UAIG,gDACD,sBAAIqC,UAAU,OAAd,kCACwB,IAAI,wBAC1B,yBAAQA,UAAU,eAAlB,0BAFF,OAIA,sBAAIA,UAAU,OAAd,uBACa,IAAI,wBACf,yBAAQA,UAAU,eAAlB,0BAFF,OAIA,sBAAIA,UAAU,OAAd,iCACuB,IAAI,wBACzB,yBAAQA,UAAU,eAAlB,0BAFF,aAMJ,gCACE,sBAAKA,UAAU,wBACf,gBAAC,IAAD,CACEA,UAAU,4BACVrC,GAAG,gBAFL,UAIG,gDACD,sBAAIqC,UAAU,OAAd,kCACwB,IAAI,wBAC1B,yBAAQA,UAAU,eAAlB,0BAFF,OAIA,sBAAIA,UAAU,OAAd,uBACa,IAAI,wBACf,yBAAQA,UAAU,eAAlB,0BAFF,OAIA,sBAAIA,UAAU,OAAd,iCACuB,IAAI,wBACzB,yBAAQA,UAAU,eAAlB,0BAFF,yBAWd,sBAAKA,UAAU,8BAAf,SACE,uBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,4BAAf,SACE,qBAAIA,UAAU,aAAd,gCAEF,sBAAKA,UAAU,YAAf,SACE,eAAC,KAAD,CACElC,MAAO,CAAEyD,OAAQ,SACjBrB,GAAG,iBACHF,UAAU,8DAHZ,SAKE,sBAAIA,UAAU,WAAd,UACE,gCACE,sBAAKA,UAAU,2BACf,gBAAC,IAAD,CACEA,UAAU,4BACVrC,GAAG,gBAFL,UAIC,gDACC,sBAAIqC,UAAU,OAAd,4DAEkC,IAChC,0BAAQA,UAAU,YAAlB,iCAAkD,wBAAlD,6BAGF,qBAAGA,UAAU,OAAb,wBACa,wBADb,kBAIA,0BAAQA,UAAU,eAAlB,6BACoB,wBADpB,kBAGQ,wBACT,0BAAQA,UAAU,eAAlB,4BACkB,wBADlB,SAGS,wBACT,0BAAQA,UAAU,YAAlB,4BACe,wBADf,SAIA,0BAAQA,UAAU,OAAlB,gBACG,wBADH,wCAGQ,wBACT,0BAAQA,UAAU,OAAlB,qBACQ,uBADR,wBAQF,gCACE,sBAAKA,UAAU,wBACf,gBAAC,IAAD,CACEA,UAAU,4BACVrC,GAAG,gBAFL,UAIE,gDACA,sBAAIqC,UAAU,OAAd,4DAEkC,IAChC,0BAAQA,UAAU,YAAlB,iCAAkD,wBAAlD,6BAGF,qBAAGA,UAAU,OAAb,wBACa,wBADb,kBAIA,0BAAQA,UAAU,eAAlB,6BACoB,wBADpB,kBAGQ,wBACT,0BAAQA,UAAU,eAAlB,4BACkB,wBADlB,SAGS,wBACT,0BAAQA,UAAU,YAAlB,4BACe,wBADf,SAIA,0BAAQA,UAAU,OAAlB,gBACG,wBADH,wCAGQ,wBACT,0BAAQA,UAAU,OAAlB,qBACQ,uBADR,wBAQF,gCACE,sBAAKA,UAAU,0BACf,gBAAC,IAAD,CACEA,UAAU,4BACVrC,GAAG,gBAFL,UAIE,gDACA,sBAAIqC,UAAU,OAAd,4DAEkC,IAChC,0BAAQA,UAAU,YAAlB,iCAAkD,wBAAlD,6BAGF,qBAAGA,UAAU,OAAb,wBACa,wBADb,kBAIA,0BAAQA,UAAU,eAAlB,6BACoB,wBADpB,kBAGQ,wBACT,0BAAQA,UAAU,eAAlB,4BACkB,wBADlB,SAGS,wBACT,0BAAQA,UAAU,YAAlB,4BACe,wBADf,SAIA,0BAAQA,UAAU,OAAlB,gBACG,wBADH,wCAGQ,wBACT,0BAAQA,UAAU,OAAlB,qBACQ,uBADR,wBAQF,gCACE,sBAAKA,UAAU,2BACf,gBAAC,IAAD,CACEA,UAAU,4BACVrC,GAAG,gBAFL,UAIE,gDACA,sBAAIqC,UAAU,OAAd,4DAEkC,IAChC,0BAAQA,UAAU,YAAlB,iCAAkD,wBAAlD,6BAGF,qBAAGA,UAAU,OAAb,wBACa,wBADb,kBAIA,0BAAQA,UAAU,eAAlB,6BACoB,wBADpB,kBAGQ,wBACT,0BAAQA,UAAU,eAAlB,4BACkB,wBADlB,SAGS,wBACT,0BAAQA,UAAU,YAAlB,4BACe,wBADf,SAIA,0BAAQA,UAAU,OAAlB,gBACG,wBADH,wCAGQ,wBACT,0BAAQA,UAAU,OAAlB,qBACQ,uBADR,wBAQF,gCACE,sBAAKA,UAAU,2BACf,gBAAC,IAAD,CACEA,UAAU,4BACVrC,GAAG,gBAFL,UAIE,gDACA,sBAAIqC,UAAU,OAAd,4DAEkC,IAChC,0BAAQA,UAAU,YAAlB,iCAAkD,wBAAlD,6BAGF,qBAAGA,UAAU,OAAb,wBACa,wBADb,kBAIA,0BAAQA,UAAU,eAAlB,6BACoB,wBADpB,kBAGQ,wBACT,0BAAQA,UAAU,eAAlB,4BACkB,wBADlB,SAGS,wBACT,0BAAQA,UAAU,YAAlB,4BACe,wBADf,SAIA,0BAAQA,UAAU,OAAlB,gBACG,wBADH,wCAGQ,wBACT,0BAAQA,UAAU,OAAlB,qBACQ,uBADR,wBAQF,gCACE,sBAAKA,UAAU,wBACf,gBAAC,IAAD,CACEA,UAAU,4BACVrC,GAAG,gBAFL,UAIE,gDACA,sBAAIqC,UAAU,OAAd,4DAEkC,IAChC,0BAAQA,UAAU,YAAlB,iCAAkD,wBAAlD,6BAGF,qBAAGA,UAAU,OAAb,wBACa,wBADb,kBAIA,0BAAQA,UAAU,eAAlB,6BACoB,wBADpB,kBAGQ,wBACT,0BAAQA,UAAU,eAAlB,4BACkB,wBADlB,SAGS,wBACT,0BAAQA,UAAU,YAAlB,4BACe,wBADf,SAIA,0BAAQA,UAAU,OAAlB,gBACG,wBADH,wCAGQ,wBACT,0BAAQA,UAAU,OAAlB,qBACQ,uBADR,0CC9qBdwU,GAAa,CACf,CACI,GAAM,KACN,KAAQ,CACJ,QAAW,GACX,WAAc,eACd,WAAc,GACd,YAAe,aACf,YAAe,GACf,YAAe,CACX,GAAM,IACN,KAAQ,SACR,QAAW,QACX,SAAY,KACZ,aAAgB,eAEpB,eAAkB,WAClB,eAAkB,CACd,GAAM,IACN,KAAQ,uCACR,QAAW,SACX,SAAY,KACZ,aAAgB,uBAEpB,gBAAmB,CACf,CACI,aAAgB,GAChB,mBAAsB,GACtB,qBAAwB,KACxB,qBAAwB,KAGhC,iBAAoB,YACpB,kBAAqB,EACrB,kBAAqB,aACrB,kBAAqB,GACrB,mBAAsB,GACtB,oBAAuB,GACvB,qBAAwB,KACxB,qBAAwB,GACxB,qBAAwB,GACxB,sBAAyB,GACzB,sBAAyB,EACzB,sBAAyB,GACzB,sBAAyB,CACrB,GAAM,IACN,KAAQ,uCACR,QAAW,4BACX,SAAY,KACZ,cAAiB,yBAErB,uBAA0B,GAC1B,wBAA2B,GAC3B,yBAA4B,IAEhC,YAAe,IACf,qCAAwC,CACpC,GAAM,KACN,KAAQ,YACR,YAAe,wBACf,wBAA2B,EAC3B,yBAA4B,IAC5B,QAAW,KACX,2BAA8B,KAC9B,iCAAoC,MAExC,KAAQ,yCAyDDvZ,GAtDO,SAAClB,GACnB,MAA8BmB,mBAAS,IAAvC,mBACA,GADA,UAC0BA,oBAAS,IAAnC,mBAAO2S,EAAP,KAAcC,EAAd,KAeM1S,EAAmB,GAe3B,OAbEoZ,GAAY7J,SAAQ,SAAStB,EAAOuB,EAAOC,GAEvC,IADA,IAAM4J,EAAcD,GACZtI,EAAE,EAAGA,EAAEuI,EAAYhK,OAAQyB,IAC/B,IAAK,IAAI3M,KAAOkV,EAAYvI,GAEF,OAAtBuI,EAAYvI,GAAG3M,IAAgBkV,EAAYvI,GAAG3M,GAAKmV,uBAAyB,GAChFtZ,EAAiB0P,KAAKzB,MAQ5B,iCACI,wBACA,eAAC,KAAD,CACM9M,KAAK,SACL6K,QAAQ,YACRpJ,MAAM,UACNqJ,QAAS,WAxBjByG,GAAUD,IAyBF7N,UAAU,kBALhB,+BASE,wBACF,wBACD,eAAC,GAAD,IACA,eAAC2U,GAAD,CAAiBnO,YAAaqH,EAAOnH,aA5CtB,kBAAMoH,GAAUD,UCxGzB,SAAS+G,KACtB,OAEI,iCACA,eAAC,IAAD,IAGE,gBAAC,IAAD,WAEE,eAAC,IAAD,CAAOC,KAAK,cAAZ,SACE,eAACC,GAAD,MAEF,eAAC,IAAD,CAAOD,KAAK,sBAAZ,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,wBAAZ,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,oBAAZ,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,eAAC,GAAD,YCxCZ,IAYeE,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB9J,MAAK,YAAkD,IAA/C+J,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,UCPVO,GAAY,MAEHC,GAAc,CAC1B,CACCzU,WAAY,UACZ8S,QAAS,QACT4B,OAAQ,WACRC,SAAU,UACVC,YAAa,UACbC,UAAW,UACXC,aAAc,OACdC,gBAAiB,QACjBC,eAAgB,QAChBC,gBAAiB,OACjBT,UAAWA,IAEZ,CACCxU,WAAY,UACZ8S,QAAS,QACT4B,OAAQ,WACRtT,QAAS,UACTuT,SAAU,UACVC,YAAa,UACbC,UAAW,UACXC,aAAc,OACdC,gBAAiB,QACjBC,eAAgB,QAChBC,gBAAiB,OACjBT,UAAWA,IAEX,CACAxU,WAAY,UACZ8S,QAAS,QACT4B,OAAQ,WACRE,YAAa,WACbD,SAAU,UACVE,UAAW,WACXC,aAAc,OACdC,gBAAiB,QACjBC,eAAgB,QAChBC,gBAAiB,OACjB7T,QAAS,WACToT,UAAWA,IAEZ,CAECxU,WAAY,UACZ8S,QAAS,OACT4B,OAAQ,WACRC,SAAU,UACVC,YAAa,UACbC,UAAW,UACXC,aAAc,OACdC,gBAAiB,QACjBC,eAAgB,QAChBC,gBAAiB,OACjB7T,QAAS,UACToT,UAAWA,IAEZ,CAECxU,WAAY,UACZ8S,QAAS,QACT4B,OAAQ,WACRE,YAAa,WACbD,SAAU,UACVG,aAAc,OACdD,UAAW,UACXE,gBAAiB,QACjBC,eAAgB,QAChBC,gBAAiB,OACjB7T,QAAS,WACToT,UAAWA,IAGZ,CAECxU,WAAY,UACZ8S,QAAS,QACT4B,OAAQ,aACRE,YAAa,UACbD,SAAU,UACVE,UAAW,UACXC,aAAc,SACdC,gBAAiB,SACjBC,eAAgB,QAChBC,gBAAiB,OACjB7T,QAAS,UACToT,UAAWA,KCrFAU,GAAeC,0BA0RbC,GAxRc,SAACpc,GAC7B,MAAwCmB,mBAAS,CAAEmO,MAAO,OAAQiD,MAAO,SAAzE,mBAAO8J,EAAP,KAAqBC,EAArB,KACA,EAA8Cnb,mBAAS,CAAEmO,MAAO,QAASiD,MAAO,UAAhF,mBAAOgK,EAAP,KAAwBC,EAAxB,KACG,EAA4Crb,mBAAS,CAAEmO,MAAO,QAASiD,MAAO,UAA9E,mBAAOkK,EAAP,KAAuBC,EAAvB,KACA,EAA0Cvb,mBAAS,CAAEmO,MAAO,WAAYiD,MAAO,aAA/E,mBAAOoK,EAAP,KAAsBC,EAAtB,KACH,EAAkCzb,mBAAS,CAAEmO,MAAO,MAAOiD,MAAO,QAAlE,mBAAOiJ,EAAP,KAAkBqB,EAAlB,KACA,EAAwC1b,mBAAS,WAAjD,mBAAO2b,EAAP,KAAqBC,EAArB,KACA,EAA8C5b,mBAAS,WAAvD,mBAAO6b,EAAP,KAAwBC,EAAxB,KACA,EAAoC9b,mBAAS,WAA7C,mBAAO+b,EAAP,KAAmBC,EAAnB,KACA,EAAwChc,mBAAS,WAAjD,mBAAOic,EAAP,KAAqBC,EAArB,KACA,EAAkClc,oBAAS,GAA3C,mBAAOmc,EAAP,KAAkBC,EAAlB,KACA,EAAoCpc,oBAAS,GAA7C,mBAAOqc,EAAP,KAAmBC,EAAnB,KACA,EAAoCtc,mBAAS,CAAEmO,MAAO,QAASiD,MAAO,UAAtE,mBAAOmL,EAAP,KAAmBC,EAAnB,KACA,EAAoDxc,mBAAS,CAACmO,MAAO,aAAciD,MAAO,eAA1F,mBAAOqL,EAAP,KAA2BC,GAA3B,KACSxO,GAAOyO,SAASC,cAAc,QACpC,GAAsC5c,mBAAS,GAA/C,qBAAO6c,GAAP,MAAoBC,GAApB,MACA,GAAwC9c,mBAAS,GAAjD,qBAAO+c,GAAP,MAAqBC,GAArB,MA4DIC,GAAqB,SAACtb,GAC7Bia,EAAgBja,GACbuM,GAAKgP,aAAa,eAAgBvb,IAE9Bwb,GAAwB,SAACxb,GAC7Bma,EAAmBna,GACnBuM,GAAKgP,aAAa,oBAAqBvb,IAEnCyb,GAAmB,SAACzb,GACxBqa,EAAcra,GACduM,GAAKgP,aAAa,gBAAiBvb,IAE/B0b,GAAqB,SAAC1b,GAC1Bua,EAAgBva,GAChBuM,GAAKgP,aAAa,iBAAkBvb,IAEhC2b,GAAuB,SAAC3b,GAC5B0Z,EAAmB1Z,GACnBuM,GAAKgP,aAAa,wBAAyBvb,EAAKwM,QAE5CoP,GAAwB,SAAC5b,GAC7B+Z,EAAa/Z,GACbuM,GAAKgP,aAAa,YAAavb,EAAKwM,OACpC,IAAIqP,EAAOb,SAASC,cAAc,QAClCY,EAAKN,aAAa,MAAOvb,EAAKwM,OAC9BqP,EAAK1Y,UAAYnD,EAAKwM,OAElBsP,GAAsB,SAAC9b,GACR,eAAfA,EAAKwM,OACoB,YAAvB+M,EAAa/M,OACfsN,EAAiB9Z,GACjBuM,GAAKgP,aAAa,cAAevb,EAAKwM,OACtCgN,EAAgB,CAAEhN,MAAO,OAAQiD,MAAO,SACxClD,GAAKgP,aAAa,qBAAsB,UAM1CzB,EAAiB9Z,GACjBuM,GAAKgP,aAAa,cAAevb,EAAKwM,SAGpCuP,GAAqB,SAAC/b,GACE,eAAxB6Z,EAAcrN,OACG,YAAfxM,EAAKwM,MACPwP,MAAM,yDAORxC,EAAgBxZ,GAChBya,EAA4B,eAAfza,EAAKwM,MAAyB,WAAa,IACxDD,GAAKgP,aAAa,qBAAsBvb,EAAKwM,SAI3CyP,GAAsB,SAACjc,GAC3B4Z,EAAkB5Z,GAClBuM,GAAKgP,aAAa,uBAAwBvb,EAAKwM,QAS3C0P,GAAmB,SAAClc,GACxBuM,GAAKgP,aAAa,qBAAsBvb,EAAKwM,OAC7CqO,EAAc7a,IAGVmc,GAA0B,SAACnc,GAC/B+a,GAAsB/a,GACtBuM,GAAKgP,aAAa,iBAAkBvb,EAAKwM,OAC1B,UAAfxM,EAAKwM,OACHuP,GAAmB,CAAEvP,MAAO,UAAWiD,MAAO,aA6ElD,OA7BApQ,qBAAU,WACX,IAAMkN,EAAOyO,SAASC,cAAc,QACjC1O,EAAKgP,aAAa,kBAAmB,WACrChP,EAAKgP,aAAa,qBAAsB,SACxChP,EAAKgP,aAAa,cAAe,YACjChP,EAAKgP,aAAa,eAAgB,WAClChP,EAAKgP,aAAa,oBAAqB,WACvChP,EAAKgP,aAAa,gBAAiB,WACnChP,EAAKgP,aAAa,qBAAsB,WACxChP,EAAKgP,aAAa,iBAAkB,WACpChP,EAAKgP,aAAa,eAAgB,WAClChP,EAAKgP,aAAa,wBAAyB,SAC3ChP,EAAKgP,aAAa,uBAAwB,SAC1ChP,EAAKgP,aAAa,iBAAkB,QACpChP,EAAKgP,aAAa,YAAa,OACjC,IAAIa,EAAe,WAClBjB,GAAekB,OAAOC,YACtBjB,GAAgBgB,OAAOE,aACvBF,OAAOC,YAAc,KAAOD,OAAOC,WAAa,KAC9C/P,EAAKgP,aAAa,qBAAsB,QACxCc,OAAOC,YAAc,IACrB/P,EAAKgP,aAAa,qBAAsB,WACxChP,EAAKgP,aAAa,qBAAsB,SAIzC,OAFAa,IACAC,OAAOG,iBAAiB,SAAUJ,GAC3B,kBAAMC,OAAOI,oBAAoB,SAAUL,MACjD,IAGD,eAAChD,GAAasD,SAAd,CACElQ,MAAO,CACLD,QACAoQ,cArNgB,CACpB,CAAEnQ,MAAO,UAAWiD,MAAO,WAC3B,CAAEjD,MAAO,OAAQiD,MAAO,QACxB,CAAEjD,MAAO,OAAQiD,MAAO,QACxB,CAAEjD,MAAO,SAAUiD,MAAO,UAC1B,CAAEjD,MAAO,UAAWiD,MAAO,WAC3B,CAAEjD,MAAO,aAAciD,MAAO,eAgN1BmN,aA1Ne,CACnB,CAAEpQ,MAAO,WAAYiD,MAAO,YAC5B,CAAEjD,MAAO,aAAciD,MAAO,eAyN1BoN,iBA/MmB,CACvB,CAAErQ,MAAO,QAASiD,MAAO,SACzB,CAAEjD,MAAO,OAAQiD,MAAO,SA8MpBgK,kBACAqD,gBAzMkB,CACtB,CAAEtQ,MAAO,QAASiD,MAAO,SACzB,CAAEjD,MAAO,SAAUiD,MAAO,WAwMtBsN,kBAtMoB,CACxB,CAAEvQ,MAAO,aAAciD,MAAO,cAC9B,CAAEjD,MAAO,QAASiD,MAAO,SACzB,CAAEjD,MAAO,OAAQiD,MAAO,SAoMpBuN,kBAjLoB,CACxB,CAAExQ,MAAO,MAAOiD,MAAO,OACvB,CAAEjD,MAAO,MAAOiD,MAAO,QAgLnBwN,WA9Ka,CACjB,CAAEzQ,MAAO,UAAWiD,MAAO,WAC3B,CAAEjD,MAAO,SAAUiD,MAAO,UAC1B,CAAEjD,MAAO,QAASiD,MAAO,SACzB,CAAEjD,MAAO,WAAYiD,MAAO,aAC5B,CAAEjD,MAAO,gBAAiBiD,MAAO,kBA0KnCuK,eACME,kBACNgB,eACAE,gBACME,sBACAE,yBACAO,sBACAxC,eACAoC,wBACAuB,iBA1NmB,CACvB,CAAE1Q,MAAO,QAASiD,MAAO,SACzB,CAAEjD,MAAO,SAAUiD,MAAO,WAyNtBwM,uBACAtC,iBACAmC,uBACAjC,gBACA+B,yBACAO,2BACAzD,YACAyE,OArNS,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WACA,WACA,WACA,WACA,WACA,YAuMI/C,aACAqB,oBACAC,sBACApB,eACAE,YACAE,aACA0C,eAhIiB,WACE,WAAvB7D,EAAa/M,MACTmO,GAAc,GACdA,GAAc,IA8HduB,oBACAtB,aACAE,qBACNuC,aAlHqB,SAACtZ,EAAM2U,GAE7B,IAAI4E,EAAU,GAGVC,EAAgB5E,GAAY5U,GAEhCwI,GAAKgP,aAAa,kBAAmBgC,EAAcrZ,YAEnDoZ,EAAQ9Q,MAAQ+Q,EAAcvG,QAC9BkF,GAAiBoB,GAEjBA,EAAQ9Q,MAAQ+Q,EAAc3E,OAC9BkD,GAAoBwB,GAGpBhC,GAAmBiC,EAAcjY,SAGjCkW,GAAsB+B,EAAczE,aAGpC2C,GAAiB8B,EAAc1E,UAE/ByE,EAAQ9Q,MAAQ+Q,EAAcvE,aAC9B+C,GAAmBuB,GAGnB5B,GAAmB6B,EAAcxE,WAEjCuE,EAAQ9Q,MAAQ+Q,EAActE,gBAC9B0C,GAAqB2B,GAErBA,EAAQ9Q,MAAQ+Q,EAAcrE,eAC9B+C,GAAoBqB,GAEpBA,EAAQ9Q,MAAQ+Q,EAAcpE,gBAC9BgD,GAAwBmB,GAGxBA,EAAQ9Q,MAAQkM,EAChBkD,GAAsB0B,KAkCnB,SA0CGpgB,EAAMsgB,YC/QbC,IAASC,OACR,eAAC,IAAMC,WAAP,UAEW,eAAC,KAAD,UACI,eAAC,IAAD,CAAeC,SAAS,IAAxB,SACI,eAAC,GAAD,UACI,eAAC7F,GAAD,YAMtBiD,SAAS6C,eAAe,SAE1B3F,O","file":"static/js/main.46af5061.chunk.js","sourcesContent":["//export const  token = (new URLSearchParams(window.location.search)).get(\"jwt\")\r\n//export const url = '/api/'\r\nexport const url =  'http://localhost:8282/api/v1/';\r\nexport const apiUrl =  'http://localhost:8282/api/';\r\nexport const  token = 'eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJndWVzdEBsYW1pc3BsdXMub3JnIiwiYXV0aCI6IlN1cGVyIEFkbWluIiwibmFtZSI6Ikd1ZXN0IEd1ZXN0IiwiZXhwIjoxNjU4NDM0NzUxfQ.Xd94Hza6hwPps2rUw7TfxFBieCV9lqRFVX2C6iJK_UoQlEYBcF2g6c5Wjg92bMzyuasdmhGlBRWHj-Bb_UW_SA';\r\n\r\n","\r\nimport React, {useEffect, useCallback, useState} from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from \"react-redux\";\r\n// import { fetchAllLabTestOrder } from \"./../../../actions/laboratory\";\r\nimport \"./../laboratory.css\";\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport { forwardRef } from 'react';\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\nimport {token, url } from \"../../../../api\";\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst PatientSearch = (props) => {\r\n    const [loading, setLoading] = useState('')\r\n    const [collectedSamples, setCollectedSamples] = useState([])\r\n\r\n     const loadLabTestData = useCallback(async () => {\r\n            try {\r\n                const response = await axios.get(`${url}laboratory/orders/pending-sample-collection`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                //console.log(\"lab test\", response);\r\n                setCollectedSamples(response.data);\r\n            } catch (e) {\r\n                toast.error(\"An error occurred while fetching lab\", {\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n        }, []);\r\n    \r\n     useEffect(() => {\r\n     setLoading('true');\r\n         const onSuccess = () => {\r\n             setLoading(false)\r\n         }\r\n         const onError = () => {\r\n             setLoading(false)\r\n         }\r\n\r\n         loadLabTestData();\r\n            // props.fetchAllLabTestOrderToday(onSuccess, onError);\r\n     }, [loadLabTestData]); //componentDidMount\r\n\r\n    function totalSampleConllected (test){\r\n    console.log(test)\r\n        const  maxVal = []\r\n          for(var i=0; i<test.length; i++){\r\n              for (var key in test[i]) {\r\n                  if ( test[i][key]!==null && test[i][key].labTestOrderStatus)\r\n                        if(test[i][key].labTestOrderStatus >=1)\r\n                            maxVal.push(test[i][key])\r\n              }\r\n          }\r\n        return maxVal.length;\r\n    }\r\n\r\n    const totalSamples = (test) => {\r\n        const  maxVal = []\r\n        for(var i=0; i<test.length; i++){\r\n          for (var key in test[i]) {\r\n              if ( test[i][key]!==null && test[i][key].labTestOrderStatus)\r\n                    if(test[i][key].labTestOrderStatus >=1)\r\n                        maxVal.push(test[i][key])\r\n          }\r\n        }\r\n        return maxVal.length;\r\n    }\r\n    \r\n  return (\r\n      <div>\r\n\r\n          <MaterialTable\r\n           icons={tableIcons}\r\n              title=\"Laboratory Test Orders\"\r\n              columns={[\r\n                  { title: \"Patient ID\", field: \"Id\" },\r\n                  {\r\n                    title: \"Patient Name\",\r\n                    field: \"name\",\r\n                  },\r\n                  { title: \"Date Order\", field: \"date\", type: \"date\" , filtering: false},          \r\n                  {\r\n                    title: \"Lab Tests Orders\",\r\n                    field: \"count\",\r\n                    filtering: false\r\n                  },\r\n                  {\r\n                    title: \"Sample Collected \",\r\n                    field: \"samplecount\",\r\n                    filtering: false\r\n                  },\r\n                   {\r\n                      title: \"Sample Verified \",\r\n                      field: \"sampleVerified\",\r\n                      filtering: false\r\n                    },\r\n                   {\r\n                     title: \"Sample Results\",\r\n                     field: \"sampleresults\",\r\n                     filtering: false\r\n                   },\r\n                  {\r\n                    title: \"Action\",\r\n                    field: \"actions\",\r\n                    filtering: false,\r\n                  },\r\n              ]}\r\n              //isLoading={loading}\r\n              data={ collectedSamples.map((row) => ({\r\n                  Id: row.patientHospitalNumber,\r\n                  name: row.patientFirstName +  ' ' + row.patientLastName,\r\n                  date: row.orderDate + '@' + row.orderTime,\r\n                  count: row.testOrders,\r\n                  samplecount: row.collectedSamples,\r\n                  sampleVerified: row.verifiedSamples,\r\n                  sampleresults: row.reportedResults,\r\n                  actions:  <Link to ={{ \r\n                                  pathname: \"/samples-collection\",  \r\n                                  state: row\r\n                              }} \r\n                                  style={{ cursor: \"pointer\", color: \"blue\", fontStyle: \"bold\"}}\r\n                            >\r\n                                <Tooltip title=\"Collect Sample\">\r\n                                    <IconButton aria-label=\"Collect Sample\" >\r\n                                        <VisibilityIcon color=\"primary\"/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </Link>\r\n\r\n              }))}\r\n\r\n                  options={{\r\n                    headerStyle: {\r\n                        backgroundColor: \"#9F9FA5\",\r\n                        color: \"#000\",\r\n                    },\r\n                    searchFieldStyle: {\r\n                        width : '300%',\r\n                        margingLeft: '250px',\r\n                    },\r\n                    filtering: false,\r\n                    exportButton: false,\r\n                    searchFieldAlignment: 'left',\r\n                    pageSizeOptions:[10,20,100],\r\n                    pageSize:10,\r\n                    debounceInterval: 400\r\n                }}\r\n\r\n          />\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PatientSearch;","\r\nimport React, {useEffect, useCallback, useState} from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from \"react-redux\";\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\nimport \"./../laboratory.css\";\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport { forwardRef } from 'react';\r\nimport axios from \"axios\";\r\nimport {token, url } from \"../../../../api\";\r\nimport { toast } from 'react-toastify';\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst PatientSearch = (props) => {\r\n    const [loading, setLoading] = useState('')\r\n    const [collectedSamples, setCollectedSamples] = useState([])\r\n\r\n    const loadLabTestData = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${url}laboratory/orders/pending-results`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            console.log(\"sample results\", response);\r\n            setCollectedSamples(response.data);\r\n        } catch (e) {\r\n            toast.error(\"An error occurred while fetching lab\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    }, []);\r\n    \r\n    useEffect(() => {\r\n         setLoading('true');\r\n         const onSuccess = () => {\r\n             setLoading(false)\r\n         }\r\n         const onError = () => {\r\n             setLoading(false)\r\n         }\r\n         loadLabTestData();\r\n    }, [loadLabTestData]);\r\n\r\n    const totalSamples = (test) => {\r\n                let  maxVal = 0;\r\n                for(var i=0; i<test.length; i++){\r\n                   maxVal = test[i].samples.length\r\n                }\r\n            return maxVal;\r\n        }\r\n\r\n    function totalSampleVerified (test){\r\n         let  maxVal = 0;\r\n            for(var i=0; i<test.length; i++){\r\n                for(var j=0; j<test[i].length; j++){\r\n                    console.log(\"e\",test[i][j])\r\n                 }\r\n            }\r\n         return maxVal;\r\n    }\r\n\r\n    function totalResultCollected (test){\r\n      const  maxVal = []      \r\n      for(var i=0; i<test.length; i++){\r\n        for (var key in test[i]) {\r\n          if (test[i][key]!==null && test[i][key].lab_test_order_status ===5)\r\n            maxVal.push(test[i][key])\r\n        }\r\n       \r\n      }\r\n      return maxVal.length;\r\n      //return 2\r\n    }\r\n    \r\n  return (\r\n      <div>\r\n          <MaterialTable\r\n           icons={tableIcons}\r\n              title=\"Laboratory Test Result Reporting\"\r\n              columns={[\r\n                  { title: \"Patient ID\", field: \"Id\" },\r\n                  {\r\n                    title: \"Patient Name\",\r\n                    field: \"name\",\r\n                  },\r\n                  { title: \"Date Order\", field: \"date\", type: \"date\" , filtering: false},\r\n                  {\r\n                      title: \"Lab Tests Orders\",\r\n                      field: \"count\",\r\n                      filtering: false\r\n                    },\r\n                  {\r\n                    title: \"Sample Collected\",\r\n                    field: \"samples\",\r\n                    filtering: false\r\n                  },\r\n                   {\r\n                      title: \"Sample Verified\",\r\n                      field: \"sampleverified\",\r\n                      filtering: false\r\n                    },\r\n                  {\r\n                    title: \"Sample Results\",\r\n                    field: \"samplecount\",\r\n                    filtering: false\r\n                  },\r\n                  {\r\n                    title: \"Action\",\r\n                    field: \"actions\",\r\n                    filtering: false,\r\n                  },\r\n              ]}\r\n              //isLoading={loading}\r\n              data={ collectedSamples.map((row) => ({\r\n\r\n              Id: row.patientHospitalNumber,\r\n              name: row.patientFirstName +  ' ' + row.patientLastName,\r\n              date: row.orderDate + '@' + row.orderTime,\r\n              count: row.testOrders,\r\n              samples: row.collectedSamples,\r\n              sampleverified: row.verifiedSamples,\r\n              samplecount: row.reportedResults,\r\n              actions: row.verifiedSamples > 0 ? <Link to ={{\r\n                            pathname: \"/result-reporting\",  \r\n                            state: row\r\n                          }} \r\n                            style={{ cursor: \"pointer\", color: \"blue\", \r\n                            fontStyle: \"bold\" }}>\r\n                              <Tooltip title=\"Enter Result\">\r\n                                <IconButton aria-label=\"Enter Result\" >\r\n                                <NoteAddIcon color=\"primary\"/>\r\n                              </IconButton>\r\n                              </Tooltip>\r\n                            </Link> : \"\"\r\n\r\n                }))}\r\n            // data={query =>\r\n            //       new Promise((resolve, reject) =>\r\n            //           axios.get(`${baseUrl}encounters/${LABSERVICECODE}/{dateStart}/{dateEnd}?size=${query.pageSize}&page=${query.page}&search=${query.search}`)\r\n            //               .then(response => response)\r\n            //               .then(result => {\r\n\r\n            //                   //console.log('in result')\r\n            //                   //console.log( result.headers);\r\n            //                   console.log( result.headers['x-total-count']);\r\n            //                   resolve({\r\n            //                       data: result.data.map((row) => ({\r\n            //                         Id: row.hospitalNumber,\r\n            //                         name: row.firstName +  ' ' + row.lastName,\r\n            //                         date: row.dateEncounter,\r\n            //                         count: row.formDataObj.length,\r\n            //                         samplecount: totalSampleConllected(row.formDataObj),\r\n            //                           actions:\r\n            //                           <Link to ={{ \r\n            //                                         pathname: \"/collect-sample\",  \r\n            //                                         state: row\r\n            //                                     }} \r\n            //                                         style={{ cursor: \"pointer\", color: \"blue\", fontStyle: \"bold\"}}\r\n            //                                     >\r\n            //                                         <Tooltip title=\"Collect Sample\">\r\n            //                                             <IconButton aria-label=\"Collect Sample\" >\r\n            //                                                 <VisibilityIcon color=\"primary\"/>\r\n            //                                             </IconButton>\r\n            //                                         </Tooltip>\r\n            //                                     </Link>\r\n            //                       })),\r\n            //                       page: query.page,\r\n            //                       totalCount: result.headers['x-total-count'],\r\n            //                   })\r\n            //               })\r\n            //       )}\r\n\r\n                  options={{\r\n                    headerStyle: {\r\n                        backgroundColor: \"#9F9FA5\",\r\n                        color: \"#000\",\r\n                    },\r\n                    searchFieldStyle: {\r\n                        width : '300%',\r\n                        margingLeft: '250px',\r\n                    },\r\n                    filtering: false,\r\n                    exportButton: false,\r\n                    searchFieldAlignment: 'left',\r\n                    pageSizeOptions:[10,20,100],\r\n                    pageSize:10,\r\n                    debounceInterval: 400\r\n                }}\r\n\r\n          />\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         patientsTestOrderList: state.laboratory.list\r\n//     };\r\n// };\r\n// const mapActionToProps = {\r\n//     fetchAllLabTestOrderToday: fetchAllLabTestOrder\r\n// };\r\n  \r\nexport default PatientSearch;","\r\nimport React, {useEffect, useCallback, useState} from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from \"react-redux\";\r\n// import { fetchAllLabTestOrder } from \"./../../../actions/laboratory\";\r\nimport \"./../laboratory.css\";\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport { forwardRef } from 'react';\r\nimport axios from \"axios\";\r\nimport {token, url } from \"../../../../api\";\r\nimport { toast } from 'react-toastify';\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst PatientSearch = (props) => {\r\n    const [loading, setLoading] = useState('')\r\n    const [collectedSamples, setCollectedSamples] = useState([])\r\n    \r\n    const loadLabTestData = useCallback(async () => {\r\n            try {\r\n                const response = await axios.get(`${url}laboratory/orders/pending-sample-verification`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                //console.log(\"verify test\", response);\r\n                setCollectedSamples(response.data);\r\n            } catch (e) {\r\n                toast.error(\"An error occurred while fetching lab\", {\r\n                    position: toast.POSITION.TOP_RIGHT\r\n                });\r\n            }\r\n        }, []);\r\n\r\n        useEffect(() => {\r\n             setLoading('true');\r\n             const onSuccess = () => {\r\n                 setLoading(false)\r\n             }\r\n             const onError = () => {\r\n                 setLoading(false)\r\n             }\r\n             loadLabTestData();\r\n        }, [loadLabTestData]);\r\n\r\n    const totalSamples = (test) => {\r\n            let  maxVal = 0;\r\n            for(var i=0; i<test.length; i++){\r\n               maxVal = test[i].samples.length\r\n            }\r\n        return maxVal;\r\n    }\r\n\r\n    function totalSampleVerified (test){\r\n         let  maxVal = 0;\r\n            for(var i=0; i<test.length; i++){\r\n            console.log(\"data\", test[i].samples)\r\n                for (var data in test[i].samples) {\r\n                    console.log(\"data\", data)\r\n                }\r\n\r\n            }\r\n         return maxVal;\r\n    }\r\n    \r\n  return (\r\n      <div>\r\n          \r\n          <MaterialTable\r\n           icons={tableIcons}\r\n              title=\"Laboratory Test Sample Verification\"\r\n              columns={[\r\n                  { title: \"Patient ID\", field: \"Id\" },\r\n                  {\r\n                    title: \"Patient Name\",\r\n                    field: \"name\",\r\n                  },\r\n                  { title: \"Date Order\", field: \"date\", type: \"date\" , filtering: false},\r\n                  {\r\n                      title: \"Lab Tests Orders\",\r\n                      field: \"count\",\r\n                      filtering: false\r\n                    },\r\n                  {\r\n                    title: \"Sample Collected\",\r\n                    field: \"samples\",\r\n                    filtering: false\r\n                  },\r\n                  {\r\n                    title: \"Sample Verified\",\r\n                    field: \"samplecount\",\r\n                    filtering: false\r\n                  },\r\n                   {\r\n                   title: \"Sample Results\",\r\n                   field: \"sampleresults\",\r\n                   filtering: false\r\n                 },\r\n                  {\r\n                    title: \"Action\",\r\n                    field: \"actions\",\r\n                    filtering: false,\r\n                  },\r\n              ]}\r\n              //isLoading={loading}\r\n                data={collectedSamples.map((row) => ({\r\n                Id: row.patientHospitalNumber,\r\n                name: row.patientFirstName +  ' ' + row.patientLastName,\r\n                date: row.orderDate + '@' + row.orderTime,\r\n                count: row.testOrders,\r\n                samples: row.collectedSamples,\r\n                samplecount: row.verifiedSamples,\r\n                sampleresults: row.reportedResults,\r\n                actions: row.collectedSamples > 0 ? <Link to ={{\r\n                                        pathname: \"/samples-verification\",  \r\n                                        state: row\r\n                                    }}  \r\n                                        style={{ cursor: \"pointer\", color: \"blue\", fontStyle: \"bold\" \r\n                                    }}\r\n                        >\r\n                                    <Tooltip title=\"Sample Verification\">\r\n                                        <IconButton aria-label=\"Sample Verification\" >\r\n                                            <VisibilityIcon color=\"primary\"/>\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                        </Link>\r\n                        : \" \"\r\n                })\r\n            )}\r\n            // data={query =>\r\n            //       new Promise((resolve, reject) =>\r\n            //           axios.get(`${baseUrl}encounters/${LABSERVICECODE}/{dateStart}/{dateEnd}?size=${query.pageSize}&page=${query.page}&search=${query.search}`)\r\n            //               .then(response => response)\r\n            //               .then(result => {\r\n\r\n            //                   //console.log('in result')\r\n            //                   //console.log( result.headers);\r\n            //                   console.log( result.headers['x-total-count']);\r\n            //                   resolve({\r\n            //                       data: result.data.map((row) => ({\r\n            //                         Id: row.hospitalNumber,\r\n            //                         name: row.firstName +  ' ' + row.lastName,\r\n            //                         date: row.dateEncounter,\r\n            //                         count: row.formDataObj.length,\r\n            //                         samplecount: totalSampleConllected(row.formDataObj),\r\n            //                           actions:\r\n            //                           <Link to ={{ \r\n            //                                         pathname: \"/collect-sample\",  \r\n            //                                         state: row\r\n            //                                     }} \r\n            //                                         style={{ cursor: \"pointer\", color: \"blue\", fontStyle: \"bold\"}}\r\n            //                                     >\r\n            //                                         <Tooltip title=\"Collect Sample\">\r\n            //                                             <IconButton aria-label=\"Collect Sample\" >\r\n            //                                                 <VisibilityIcon color=\"primary\"/>\r\n            //                                             </IconButton>\r\n            //                                         </Tooltip>\r\n            //                                     </Link>\r\n            //                       })),\r\n            //                       page: query.page,\r\n            //                       totalCount: result.headers['x-total-count'],\r\n            //                   })\r\n            //               })\r\n            //       )}\r\n\r\n                  options={{\r\n                    headerStyle: {\r\n                        backgroundColor: \"#9F9FA5\",\r\n                        color: \"#000\",\r\n                    },\r\n                    searchFieldStyle: {\r\n                        width : '300%',\r\n                        margingLeft: '250px',\r\n                    },\r\n                    filtering: false,\r\n                    exportButton: false,\r\n                    searchFieldAlignment: 'left',\r\n                    pageSizeOptions:[10,20,100],\r\n                    pageSize:10,\r\n                    debounceInterval: 400\r\n                }}\r\n\r\n          />\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         patientsTestOrderList: state.laboratory.list\r\n//     };\r\n// };\r\n// const mapActionToProps = {\r\n//     fetchAllLabTestOrderToday: fetchAllLabTestOrder\r\n// };\r\n  \r\nexport default PatientSearch;","import React, {useState, Fragment, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Row, Col, Card,  Tab, Tabs, } from \"react-bootstrap\";\r\nimport LabTestOrderSearch from './Laboratory/Testorders/LabTestOrderSearch';\r\nimport LabTestResultSearch from './Laboratory/TestResult/LabTestResultSearch';\r\nimport LabTestVerifySampleSearch from './Laboratory/Sampleverifications/LabTestVerifySampleSearch';\r\nimport CheckInPatients from './CheckInPatients/Index';\r\nimport {labObj} from './LabObj'\r\n\r\nconst divStyle = {\r\n  borderRadius: \"2px\",\r\n  fontSize: 14,\r\n};\r\n\r\nconst Home = (props) => {\r\n    const [key, setKey] = useState('collection');\r\n    //const urlIndex = getQueryParams(\"tab\", props.location.search); \r\n    const urlTabs = props.location && props.location.state ? props.location.state : null ;\r\n\r\n  useEffect ( () => {\r\n    switch(urlTabs){  \r\n      case \"collect-sample\": return setKey('collection')\r\n      case \"verification\": return setKey('verification')\r\n      case \"result\": return setKey('result')\r\n      \r\n      default: return setKey('collection')\r\n    }\r\n  }, [urlTabs]);\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n     \r\n      <Row>\r\n       \r\n        <Col xl={12}>\r\n          <Card style={divStyle}>\r\n            \r\n            <Card.Body>\r\n              {/* <!-- Nav tabs --> */}\r\n              <div className=\"custom-tab-1\">\r\n                <Tabs\r\n                    id=\"controlled-tab-example\"\r\n                    activeKey={key}\r\n                    onSelect={(k) => setKey(k)}\r\n                    className=\"mb-3\"\r\n                    >\r\n                    {/* <Tab eventKey=\"home\" title=\"Checked In Patients\">                   \r\n                      <CheckInPatients labObj={labObj} />\r\n                    </Tab> */}\r\n                    <Tab eventKey=\"collection\" title=\"Test Orders\">                   \r\n                      <LabTestOrderSearch />\r\n                    </Tab>\r\n                    <Tab eventKey=\"verification\" title=\"Sample Verification\">                   \r\n                      <LabTestVerifySampleSearch/>\r\n                    </Tab>\r\n                    <Tab eventKey=\"result\" title=\"Result Reporting\">                   \r\n                      <LabTestResultSearch />\r\n                    </Tab>\r\n                    \r\n                    </Tabs>\r\n\r\n\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        \r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport classNames from 'classnames';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n//import Chip from '@material-ui/core/Chip';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { Button } from 'semantic-ui-react';\r\nimport { Grid, Step, Label, Segment, Icon } from \"semantic-ui-react\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Col, Row } from \"reactstrap\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\n//Dtate Picker package\r\n\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: 'bottom',\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: 'center',\r\n  },\r\n  column: {\r\n    flexBasis: '20.33%',\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: 'none',\r\n    '&:hover': {\r\n      textDecoration: 'underline',\r\n    },\r\n  },\r\n});\r\n\r\nfunction PatientCard(props) {\r\n\r\n  const { classes } = props;\r\n\r\n  const patientObj = props.patientObj ? props.patientObj : {}\r\n\r\n    const calculate_age = dob => {\r\n    var today = new Date();\r\n    var dateParts = dob.split(\"-\");\r\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n    var age_now = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                age_now--;\r\n            }\r\n        if (age_now === 0) {\r\n                return m + \" month(s)\";\r\n            }\r\n            return age_now + \" year(s)\";\r\n    };\r\n   \r\n     const CurrentStatus = (currentStatus)=>{\r\n        if(currentStatus===\"4\"){\r\n            return (<Label color=\"blue\" size=\"mini\">Current Status: <b>Admitted</b></Label>);\r\n        }else if(currentStatus===\"5\"){\r\n            return (<Label color=\"olive\" size=\"mini\">Current Status: <b>ICU</b></Label>);\r\n        }else if(currentStatus===\"6\"){\r\n            return (<Label color=\"teal\" size=\"mini\">Current Status: <b>Discharge</b></Label>);\r\n        }else if(currentStatus===\"7\"){\r\n            return (<Label color=\"red\" size=\"mini\">Current Status: <b>Dead</b></Label>);\r\n        }else {\r\n            return   (<Label color=\"green\" size=\"mini\">Current Status: <b>Active</b></Label>);\r\n        }\r\n\r\n    }\r\n\r\n    const VaccinationStatus = (patient)=>{\r\n        //console.log(patient)\r\n        if(patient.vaccination_status===null){\r\n            return (<><Label color=\"yellow\" size=\"mini\">Vaccination Status: Not Vaccinated</Label></> )\r\n        }else if(patient.vaccination_status===\"1\"){\r\n            return (<><Label color=\"teal\" size=\"mini\">Vaccination Status: Partially Vaccinated</Label></> )\r\n        }else if(patient.vaccination_status===\"2\"){\r\n            return (<><Label color=\"green\" size=\"mini\">Vaccination Status: Fully Vaccinated</Label></> )\r\n        }else {\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n       <ExpansionPanel defaultExpanded>\r\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n                \r\n                <Row>\r\n                    \r\n                    <Col md={12}>\r\n                    <Row className={\"mt-1\"}>\r\n                    <Col md={12} className={classes.root2}>\r\n                        <b style={{fontSize: \"25px\"}}>\r\n                        {patientObj.patientFirstName + \" \" + patientObj.patientLastName }\r\n                        </b>\r\n                        \r\n                    </Col>\r\n                    <Col md={4} className={classes.root2}>\r\n                    <span>\r\n                        {\" \"}\r\n                        Patient ID : <b>{patientObj.patientId }</b>\r\n                    </span>\r\n                    </Col>\r\n\r\n                    <Col md={4} className={classes.root2}>\r\n                    <span>\r\n                        Date Of Birth : <b>{patientObj.patientDob }</b>\r\n                    </span>\r\n                    </Col>\r\n                    <Col md={4} className={classes.root2}>\r\n                    <span>\r\n                        {\" \"}\r\n                        Age : <b>{calculate_age(moment(patientObj.patientDob).format(\"DD-MM-YYYY\"))}</b>\r\n                    </span>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                    <span>\r\n                        {\" \"}\r\n                        Gender :{\" \"}\r\n                        <b>{patientObj.patientGender=== \"Male\" ?\"Male\": \"Female\" }</b>\r\n                    </span>\r\n                    </Col>\r\n                    <Col md={4} className={classes.root2}>\r\n                    <span>\r\n                        {\" \"}\r\n                        E-mail : <b>{patientObj.patientPhoneNumber }</b>\r\n                    </span>\r\n                    </Col>\r\n                    <Col md={4} className={classes.root2}>\r\n                    <span>\r\n                        {\" \"}\r\n                        Hospital No: <b>{patientObj.patientHospitalNumber } </b>\r\n                    </span>\r\n                    </Col>\r\n\r\n                    <Col md={12}>\r\n                    {VaccinationStatus(patientObj)}\r\n                    {CurrentStatus(patientObj.current_status)}\r\n                    \r\n                    </Col>\r\n                    </Row>\r\n                    </Col>\r\n                </Row>\r\n                </ExpansionPanelSummary>\r\n\r\n                {/* <ExpansionPanelDetails className={classes.details}>\r\n                <div className={classes.column} >\r\n                    <Button\r\n                            color='red'\r\n                            content='BloodType'\r\n                            //icon='heart'\r\n                            label={{ basic: true, color: 'red', pointing: 'left', content: 'AB+' }}\r\n                            />\r\n                            \r\n                    </div>\r\n                <div className={classes.column}>\r\n                <Button\r\n                            basic\r\n                            color='blue'\r\n                            content='Height'\r\n                            icon='fork'\r\n                            label={{\r\n                                as: 'a',\r\n                                basic: true,\r\n                                color: 'blue',\r\n                                pointing: 'left',\r\n                                content: '74.5 in',\r\n                            }}\r\n                            />\r\n                </div>\r\n                <div className={classes.column}>\r\n                <Button\r\n                            basic\r\n                            color='blue'\r\n                            content='Weight'\r\n                            icon='fork'\r\n                            label={{\r\n                                as: 'a',\r\n                                basic: true,\r\n                                color: 'blue',\r\n                                pointing: 'left',\r\n                                content: '74.5 in',\r\n                            }}\r\n                            />\r\n                </div>\r\n                <div className={classNames(classes.column, classes.helper)}>\r\n                    <Typography variant=\"caption\">\r\n                   \r\n                    </Typography>\r\n                </div>\r\n                </ExpansionPanelDetails>\r\n                <Divider />*/}\r\n\r\n                <ExpansionPanelActions expandIcon={<ExpandMoreIcon />}>\r\n                \r\n                </ExpansionPanelActions>\r\n            </ExpansionPanel>\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nPatientCard.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(PatientCard);\r\n","import React, { useState, useCallback, useEffect }   from 'react';\r\nimport {\r\n    Modal, ModalHeader, ModalBody, Row, Col, FormGroup, Label, Card, CardBody, Alert\r\n} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport { Badge } from 'reactstrap';\r\nimport ReactHtmlParser from 'react-html-parser'\r\nimport Divider from '@material-ui/core/Divider';\r\nimport axios from \"axios\";\r\nimport { toast } from 'react-toastify';\r\nimport {token, url} from '../../../../api'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst ModalViewResult = (props) => {\r\n\r\n    const [collectResult, setCollectResult] = useState([])\r\n\r\n    const classes = useStyles()\r\n    const datasample = props.datasample ? props.datasample : {};\r\n    const sample_type = datasample.sampleTypeName;\r\n    const lab_number = datasample.labNumber;\r\n    const date_sample_verified = datasample.dateSampleVerified;\r\n    const time_sample_verified = datasample.timeSampleVerified;\r\n    const date_result_reported = datasample.id ? datasample.date_result_reported : null ;\r\n    const test_result = datasample.id ? datasample.comment_sample_reported : null ;\r\n    const result_detail = datasample.id && datasample.reported_result ?  datasample.reported_result : null\r\n    const lab_test_id = datasample.id ? datasample.id : 0 ;\r\n\r\n\r\n    const getResults = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${url}laboratory/results/${lab_test_id}`, { headers: {\"Authorization\" : `Bearer ${token}`}});\r\n            console.log(\"results ccxc\", response.data);\r\n            setCollectResult(response.data);\r\n        } catch (e) {\r\n           // toast.error(\"An error occurred while fetching sample results\", {\r\n             //   position: toast.POSITION.TOP_RIGHT\r\n            //});\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getResults();\r\n    }, [getResults]);\r\n\r\n  return (      \r\n      <div>\r\n              <Modal isOpen={props.modalstatus} toggle={props.togglestatus} className={props.className} size=\"lg\">\r\n                  <ModalHeader toggle={props.togglestatus}>Lab Test Order Detail</ModalHeader>\r\n                      <ModalBody>\r\n                          <Card>\r\n                            <CardBody>\r\n                                <Row style={{ marginTop: '20px'}}>\r\n                                    <Col xs=\"12\">\r\n                                    <Alert color=\"success\" style={{color:\"#000\" , fontWeight: 'bolder', }}>\r\n                                     <p style={{marginTop: '.7rem' }}>Lab number: <span style={{ fontWeight: 'bolder'}}>{lab_number}</span>\r\n                                         &nbsp;&nbsp;&nbsp;&nbsp;Sample type:\r\n                                         <span style={{ fontWeight: 'bolder'}}>{\" \"}{sample_type}</span>\r\n                                                 &nbsp;&nbsp;&nbsp;&nbsp; Date sample verified :\r\n                                         <span style={{ fontWeight: 'bolder'}}>{\" \"}{date_sample_verified + \"@\" + time_sample_verified}</span>\r\n                                     </p>\r\n\r\n                                   </Alert>\r\n                                    </Col>\r\n                                    <Col xs=\"12\">\r\n                                        <h4>Results: </h4>\r\n                                        <hr/>\r\n                                    {\r\n                                        !collectResult ? \"\" :\r\n\r\n                                                <Row >\r\n                                        <Col xs=\"4\">\r\n                                        <span style={{ fontWeight: 'bold'}}>Date Assayed </span>: {collectResult.dateAssayed + \" \" + collectResult.timeAssayed }\r\n                                        <br/>\r\n                                    </Col>\r\n                                    <br/>\r\n                                    <Col xs=\"4\">\r\n                                        <span style={{ fontWeight: 'bold'}}>Date Reported </span>: {collectResult.dateResultReported + \" \" + collectResult.timeResultReported}\r\n                                        <br/>    \r\n                                    </Col>\r\n                                   \r\n                                    <Col xs=\"4\">\r\n                                        {/*<span style={{ fontWeight: 'bold'}}> Result </span>:*/}\r\n                                        <Badge  color=\"info\"> {ReactHtmlParser(\"Result Available\")}</Badge>\r\n                                    </Col>\r\n                                                   {/* <Col xs=\"6\">\r\n                                                        <span style={{ fontWeight: 'bold'}}> Unit Measurement </span>: {unit_measurement}\r\n                                                    </Col> */}\r\n\r\n                                    <Col xs=\"12\">\r\n                                    <br />\r\n                                        <span style={{ fontWeight: 'bold'}}> Notes </span>: {ReactHtmlParser(collectResult.resultReported)}\r\n                                        <Divider  />\r\n                                    </Col>  \r\n                                    </Row>\r\n                                    }\r\n                                </Col>\r\n                    \r\n                                </Row>\r\n                            <br/>\r\n                          \r\n                            <MatButton\r\n                              variant='contained'\r\n                              color='default'\r\n                              onClick={props.togglestatus}\r\n                              className={classes.button}\r\n                              startIcon={<CancelIcon />}\r\n                            >\r\n                              Cancel\r\n                            </MatButton>\r\n                      </CardBody>\r\n                </Card>\r\n          </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ModalViewResult;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {Modal,ModalHeader, ModalBody,Form,FormFeedback,Row,Alert,Col,Input,FormGroup,Label,Card,CardBody,} from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport { connect } from \"react-redux\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/styles.css\";\r\nimport { DateTimePicker } from \"react-widgets\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\nimport { token, url } from \"../../../../api\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { toast} from \"react-toastify\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        \"& > *\": {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    input: {\r\n        display: \"none\",\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"12.8px\",\r\n    },\r\n}));\r\n\r\nconst ModalSample = (props) => {\r\n\r\n    const history = useHistory();\r\n\r\n\r\n    const classes = useStyles()\r\n    const datasample = props.datasample && props.datasample!==null ? props.datasample : {};\r\n    const order_priority = datasample.id && datasample.orderPriority ? datasample.orderPriorityName : null;\r\n    const lab_test_group = datasample.id ? datasample.labTestGroupName : null ;\r\n    const sample_ordered_by = datasample.data ? datasample.data.sample_ordered_by : null ;\r\n    const description = datasample.labTestName ? datasample.labTestName : null ;\r\n    const lab_number = props.labnumber;\r\n   \r\n    const labId = datasample.id\r\n    const [loading, setLoading] = useState(false)\r\n    const [visible, setVisible] = useState(true);\r\n    const onDismiss = () => setVisible(false);\r\n    const [samples, setSamples] = useState({});\r\n    const [optionsample, setOptionsample] = useState([]);\r\n    const [saveButtonStatus, setSaveButtonStatus] = useState(false);\r\n    const [otherfields, setOtherFields] = useState({sample_collected_by:\"\",sample_ordered_by:\"\",sample_priority:\"\",time_sample_collected:\"\", comment_sample_collected:\"\"});\r\n\r\n    //This is to get SAMPLE TYPE from application Codeset\r\n    const [errors, setErrors] = useState({});\r\n    const [samplesCollected, setSamplesCollected] = useState({\r\n         \"commentSampleCollected\": \"\",\r\n          \"dateSampleCollected\": moment(new Date()).format(\"HH:mm:ss\"),\r\n          \"id\": 0,\r\n          \"sampleCollectedBy\": 0,\r\n          \"sampleCollectionMode\": 0,\r\n          \"sampleTypeId\": 0,\r\n          \"testId\": 0,\r\n          \"timeSampleCollected\": \"\",\r\n    });\r\n\r\n    useEffect(() => {\r\n        async function getCharacters() {\r\n            try {\r\n                const response = await axios.get(`${url}application-codesets/v2/SAMPLE_TYPE`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                const body = response.data;\r\n\r\n                setOptionsample(\r\n                    body.map(({ display, id }) => ({ title: display, value: id }))\r\n                );\r\n            } catch (error) {\r\n            }\r\n        }\r\n        getCharacters();\r\n    }, []);\r\n\r\n    const handleInputChangeSample = (e) => {\r\n        setSamples({ ...samples, [e.target.name]: e.target.value });\r\n    };\r\n    const handleOtherFieldInputChange = (e) => {\r\n        setOtherFields({ ...otherfields, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    /*****  Validation */\r\n    const validate = () => {\r\n        let temp = { ...errors };\r\n        temp.date_sample_collected = samples.date_sample_collected\r\n            ? \"\"\r\n            : \"Date is required\";\r\n//        temp.time_sample_collected = otherfields.time_sample_collected\r\n//            ? \"\"\r\n//            : \"Time  is required.\";\r\n        temp.sample_type = samples.sample_type ? \"\" : \"Sample Type.\";\r\n        temp.sample_collected_by = otherfields.sample_collected_by\r\n            ? \"\"\r\n            : \"Collected By  is required.\";\r\n        //temp.comment = samples.comment ? \"\" : \"This field is required.\";\r\n        setErrors({\r\n            ...temp,\r\n        });\r\n        return Object.values(temp).every((x) => x == \"\");\r\n    };\r\n\r\n    const saveSample = async (e) => {\r\n        e.preventDefault();\r\n\r\n         try {\r\n\r\n             if (validate()) {\r\n                setLoading(true);\r\n                const newDatenow = moment(samples.date_sample_collected).format(\r\n                    \"YYYY-MM-DD\"\r\n                );\r\n\r\n                const newTimeSampleCollected = moment(samples.date_sample_collected).format(\"HH:mm:ss\");\r\n\r\n                samplesCollected.commentSampleCollected = samples.comment;\r\n                samplesCollected.dateSampleCollected = newDatenow;\r\n                samplesCollected.sampleCollectedBy = otherfields[\"sample_collected_by\"];\r\n                samplesCollected.timeSampleCollected = newTimeSampleCollected;\r\n                samplesCollected.testId = labId;\r\n\r\n\r\n                if (samples.sample_type.length > 0) {\r\n                    const arr = [];\r\n                    samples.sample_type.forEach(function (value, index, array) {\r\n                        arr.push(value[\"value\"]);\r\n                    });\r\n                    const sampletostring = arr.toString();\r\n                    samplesCollected.sampleTypeId = sampletostring;\r\n                } else {\r\n                    datasample.sample_type = datasample.data.sample_type;\r\n                }\r\n\r\n               //console.log(\"samples collection\", samplesCollected)\r\n\r\n                await axios.post(`${url}laboratory/samples/${lab_number}`, samplesCollected,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}}).then(resp => {\r\n                    //console.log(\"sample collected\", resp);\r\n                    setLoading(!true);\r\n                     toast.success(\"Sample collection saved successfully!!\", {\r\n                        position: toast.POSITION.TOP_RIGHT\r\n                    });\r\n                });\r\n\r\n                /* end of the process */\r\n//                const onSuccess = () => {\r\n//                    setLoading(false);\r\n//                    props.togglestatus();\r\n//                };\r\n//                const onError = () => {\r\n//                    setLoading(false);\r\n//                    props.togglestatus();\r\n//                };\r\n\r\n                 history.push('/');\r\n\r\n            }\r\n\r\n         } catch (e) {\r\n\r\n            toast.error(\"An error occurred during sample collection\", {\r\n                 position: toast.POSITION.TOP_RIGHT\r\n             });\r\n         }\r\n    };\r\n\r\n    function checklanumber(lab_num) {       \r\n        if (lab_num === \"\" || lab_num===null) {\r\n            return (\r\n                <Alert color=\"danger\" isOpen={visible} toggle={onDismiss}>\r\n                    Please make sure you enter a lab number\r\n                </Alert>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <Card >\r\n                <CardBody>\r\n                    <Modal isOpen={props.modalstatus} toggle={props.togglestatus} className={props.className} size=\"lg\">\r\n                        <Form onSubmit={saveSample}>\r\n                            <ModalHeader toggle={props.togglestatus}>Collect Sample </ModalHeader>\r\n                            <ModalBody>\r\n                                {checklanumber(lab_number)}\r\n                                <Card >\r\n                                    <CardBody>\r\n                                        <Row >\r\n                                            <Col md={12} >\r\n                                                <Alert color=\"primary\" style={{color:\"#000\" , fontWeight: 'bolder', fontSize:'14px'}}>\r\n                                                    <p style={{marginTop: '.7rem' }}>Lab Test Group : <span style={{ fontWeight: 'bolder'}}>{lab_test_group }</span>\r\n                                                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lab Test : &nbsp;&nbsp;\r\n                                                        <span style={{ fontWeight: 'bolder'}}>{description}</span>\r\n                                                        &nbsp;&nbsp;&nbsp;\r\n                                                        &nbsp;&nbsp;&nbsp; Priority : &nbsp;&nbsp;\r\n                                                        <span style={{ fontWeight: 'bolder'}}>{order_priority}</span>\r\n                                                    </p>\r\n\r\n                                                </Alert>\r\n                                            </Col>\r\n                                            <Col md={6}>\r\n                                                <FormGroup>\r\n                                                    <Label for='date collected'>Date Collected</Label>\r\n                                                    <DateTimePicker\r\n                                                        time={false}\r\n                                                        name=\"date_sample_collected\"\r\n                                                        id=\"date_sample_collected\"\r\n                                                        value={samples.date_sample_collected}\r\n                                                        onChange={value1 =>\r\n                                                            setSamples({ ...samples, date_sample_collected: value1 })\r\n                                                        }\r\n                                                        {...(errors.date_sample_collected && { invalid: true})}\r\n                                                    />\r\n                                                    {errors.date_sample_collected !=\"\" ? (\r\n                                                        <span className={classes.error}>{errors.date_sample_collected}</span>\r\n                                                    ) : \"\" }\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col md={6}>\r\n                                                <FormGroup>\r\n                                                    <Label for='time collected'>Time Collected</Label>\r\n\r\n                                                    <Input\r\n                                                        type=\"text\"\r\n                                                        name=\"time_sample_collected\"\r\n                                                        id=\"time_sample_collected\"\r\n                                                        onChange={value1 =>\r\n                                                            setOtherFields({ ...otherfields, time_sample_collected: value1 })\r\n                                                        }\r\n                                                        value={samplesCollected.dateSampleCollected}\r\n                                                    />\r\n\r\n                                                   {/* {errors.time_sample_collected !=\"\" ? (\r\n                                                        <span className={classes.error}>{errors.time_sample_collected}</span>\r\n                                                    ) : \"\" } */}\r\n                                                </FormGroup>\r\n                                            </Col>\r\n               \r\n                                            <Col md={6}>\r\n                                                <FormGroup>\r\n                                                    <Label for=\"sample type\">Sample Type</Label>\r\n                                                    <Autocomplete\r\n                                                        multiple=\"true\"\r\n                                                        id=\"sample_type\"\r\n                                                        size=\"small\"\r\n                                                        options={optionsample}\r\n                                                        getOptionLabel={(option) => option.title}\r\n                                                        onChange={(e, i) => {\r\n                                                            setSamples({ ...samples, sample_type: i });\r\n                                                        }}\r\n                                                        renderTags={(value, getTagProps) =>\r\n                                                            value.map((option, index) => (\r\n                                                                <Chip\r\n                                                                    label={option.title}\r\n                                                                    {...getTagProps({ index })}\r\n                                                                    disabled={index === 0}\r\n                                                                />\r\n                                                            ))\r\n                                                        }\r\n                                                        style={{ width: \"auto\", marginTop: \"-1rem\" }}\r\n                                                        s\r\n                                                        renderInput={(params) => (\r\n                                                            <TextField\r\n                                                                {...params}\r\n                                                                variant=\"outlined\"\r\n                                                                margin=\"normal\"\r\n                                                            />\r\n                                                        )}\r\n                                                        required\r\n                                                    />\r\n                                                    {errors.sample_type != \"\" ? (\r\n                                                        <span className={classes.error}>\r\n                                                    {errors.sample_type}\r\n                                                    </span>\r\n                                                    ) : (\r\n                                                        \"\"\r\n                                                    )}\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col md={6}>\r\n                                                <FormGroup>\r\n                                                    <Label for=\"collected\">Collected by </Label>\r\n\r\n                                                    <Input\r\n                                                        type=\"select\"\r\n                                                        name=\"sample_collected_by\"\r\n                                                        id=\"sample_collected_by\"\r\n                                                        vaule={otherfields.sample_collected_by}\r\n                                                        onChange={handleOtherFieldInputChange}\r\n                                                        {...(errors.sample_collected_by && {\r\n                                                            invalid: true,\r\n                                                        })}\r\n                                                    >\r\n                                                        <option value=\"\"> </option>\r\n                                                        <option value=\"1\"> Dorcas </option>\r\n                                                        <option value=\"2\"> Jeph </option>\r\n                                                        <option value=\"3\"> Debora </option>\r\n                                                    </Input>\r\n                                                    <FormFeedback>\r\n                                                        {errors.sample_collected_by}\r\n                                                    </FormFeedback>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col md={12}>\r\n                                                <FormGroup>\r\n                                                    <Label for=\"Note\">Note</Label>\r\n                                                    <Input\r\n                                                        type=\"textarea\"\r\n                                                        name=\"comment\"\r\n                                                        id=\"comment\"\r\n                                                        style={{ minHeight: 100, fontSize: 14 }}\r\n                                                        onChange={handleInputChangeSample}\r\n                                                        value={samples.comment}\r\n                                                        {...(errors.comment && { invalid: true })}\r\n                                                    ></Input>\r\n                                                    <FormFeedback>{errors.comment}</FormFeedback>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n\r\n                                            <br />\r\n                                            <br />\r\n                                            <Col md={12}>\r\n                                                {loading ? (\r\n                                                    <>\r\n                                                        <Spinner /> <p> &nbsp;&nbsp;Processing...</p>\r\n                                                    </>\r\n                                                ) : (\r\n                                                    \"\"\r\n                                                )}\r\n                                            </Col>\r\n                                        </Row>\r\n                                        {lab_number && lab_number !== null ? (\r\n                                            <MatButton\r\n                                                type=\"submit\"\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.button}\r\n                                                startIcon={<SaveIcon />}\r\n                                                disabled={loading}\r\n                                            >\r\n                                                Save\r\n                                            </MatButton>\r\n                                        ) : (\r\n                                            <MatButton\r\n                                                type=\"submit\"\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.button}\r\n                                                startIcon={<SaveIcon />}\r\n                                                disabled=\"true\"\r\n                                            >\r\n                                                Save\r\n                                            </MatButton>\r\n                                        )}\r\n                                        <MatButton\r\n                                            variant=\"contained\"\r\n                                            color=\"default\"\r\n                                            onClick={props.togglestatus}\r\n                                            className={classes.button}\r\n                                            startIcon={<CancelIcon />}\r\n                                        >\r\n                                            Cancel\r\n                                        </MatButton>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </ModalBody>\r\n                        </Form>\r\n                    </Modal>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalSample;\r\n","import React from 'react'\r\nimport {Card, CardBody,CardHeader,Col,Row,Alert,Table, Form,FormGroup,Label,Input} from 'reactstrap'\r\nimport { useState , useEffect} from 'react'\r\nimport { TiArrowBack } from 'react-icons/ti'\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { Link } from 'react-router-dom'\r\nimport {FaPlusSquare} from 'react-icons/fa';\r\nimport {TiArrowForward} from 'react-icons/ti';\r\nimport 'react-widgets/styles.css'\r\nimport { ToastContainer } from \"react-toastify\";\r\n//Date Picker\r\n\r\nimport { Spinner } from 'reactstrap';\r\nimport { Badge } from 'reactstrap';\r\nimport {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\n\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ModalViewResult from './../TestResult/ViewResult';\r\n// import ModalSampleTransfer from './../TransferSample/TransferSampleModal';\r\nimport SampleCollection from './CollectSampleModal'\r\nimport { checkStatus } from '../../../../utils'\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%'\r\n    },\r\n    container: {\r\n        maxHeight: 440\r\n    },\r\n    td: { borderBottom :'#fff'}\r\n})\r\n\r\n  const SampleList = (props) => {\r\n\r\n    const testOrders = [];\r\n    const sampleCollections = props.patientObj ? props.patientObj : {};\r\n    const laborderArray = sampleCollections.labOrder.tests;\r\n\r\n    //console.log(\"xxx\", sampleCollections)\r\n    const encounterDate = null ;\r\n    const hospitalNumber =  null;\r\n    //const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState('')\r\n    const [fetchTestOrders, setFetchTestOrders] = useState(sampleCollections)\r\n\r\n    const classes = useStyles()\r\n    useEffect(() => {\r\n\r\n    }, []); //componentDidMount \r\n\r\n        //Get list of test type\r\n        const labTestType = [];\r\n            if(testOrders !== null || testOrders ===\"\"){\r\n                testOrders.forEach(function(value, index, array) {\r\n                    if(value['data']!==null)\r\n                        labTestType.push(value['data'].lab_test_group);\r\n                });\r\n            }\r\n\r\n        //Make the list contain unique list of Data \r\n        const uniqueValues = [...new Set(labTestType)];\r\n        const [modal, setModal] = useState(false) //Modal to collect sample \r\n        const toggleModal = () => setModal(!modal)\r\n        const [modal2, setModal2] = useState(false)//modal to transfer sample\r\n        const toggleModal2 = () => setModal2(!modal2)\r\n        const [modal4, setModal4] = useState(false)//modal to transfer sample Confirmation\r\n        const toggleModal4 = () => setModal4(!modal4)\r\n        const [modal3, setModal3] = useState(false)//modal to View Result\r\n        const toggleModal3 = () => setModal3(!modal3)\r\n        const [collectModal, setcollectModal] = useState([])//to collect array of datas into the modal and pass it as props\r\n        const [labNum, setlabNum] = useState({lab_number:\"\"})\r\n        const [labNumValue, setlabNumValue] = useState(\"\")\r\n\r\n        let  labNumber = \"\" //check if that key exist in the array\r\n            testOrders.forEach(function(value, index, array) {\r\n                if(value['data']!==null && value['data'].hasOwnProperty(\"lab_number\")){\r\n                   // setlabNum({lab_number:value['data'].lab_number})\r\n                    if(value['data'].lab_number !== null){\r\n                        labNumber = value['data'].lab_number\r\n                    }\r\n                }               \r\n            });\r\n\r\n    const handleLabNumber = e => {\r\n        e.preventDefault();   \r\n            setlabNum({ ...labNum, [e.target.name]: e.target.value })\r\n            labNumber = e.target.value\r\n\r\n            //localStorage.setItem('labnumber', labNumber);\r\n    }\r\n\r\n    const handleSample = (row,dateEncounter) => { \r\n        //console.log('fg', row)\r\n        setlabNumValue(labNumber ===\"\" ? labNum.lab_number  : labNumber)\r\n        ///return console.log(labNumber ===\"\" ? labNum.lab_number  : labNumber)\r\n        setcollectModal({...collectModal, ...row, dateEncounter, hospitalNumber});\r\n        setModal(!modal) \r\n       // console.log(labNumber ===\"\" ? labNum.lab_number  : labNumber)\r\n    }\r\n\r\n    const transferSample = (row) => {\r\n        setModal2(!modal2)\r\n        setcollectModal({...collectModal, ...row});\r\n    }\r\n    const transferSampleConfirmation = (row) => {\r\n        //console.log('row', row);\r\n        setModal3(!modal3)\r\n        setcollectModal({...collectModal, ...row});\r\n\r\n        //console.log('collected', collectModal);\r\n    }\r\n\r\n    const viewresult = (row) => {  \r\n        setcollectModal({...collectModal, ...row});\r\n        setModal3(!modal3) \r\n    }\r\n\r\n    const getGroup = e => {\r\n        const getValue =e.target.value;\r\n        if(getValue!=='All' || getValue ===null)\r\n        { \r\n            //const testOrders = fetchTestOrders.length >0 ? fetchTestOrders:{}\r\n            const getNewTestOrder = testOrders.find(x => x.data!==null && x.data.lab_test_group === getValue)\r\n            setFetchTestOrders([getNewTestOrder])\r\n           // testOrders =[...getNewTestOrder] \r\n        }else{\r\n            setFetchTestOrders(testOrders)\r\n        }\r\n    };\r\n\r\n    //This is function to check for the status of each collection to display on the tablist below \r\n    const sampleStatus = e =>{\r\n        if(e===1){\r\n            return <p><Badge  color=\"light\">Sample Collected</Badge></p>\r\n        }else if(e===2){\r\n            return <p><Badge  color=\"light\">Sample Transfered</Badge></p>\r\n        }else if(e===3){\r\n            return <p><Badge  color=\"light\">Sample Verified</Badge></p>\r\n        }else if(e===4){\r\n            return <p><Badge  color=\"light\">Sample Rejected</Badge></p>\r\n        }else if(e===5){\r\n            return <p><Badge  color=\"light\">Result Available</Badge></p>\r\n        }else{\r\n            return <p><Badge  color=\"warning\">Pending Collection</Badge></p>\r\n        }\r\n    }\r\n\r\n    function sampleTypeList (test){\r\n        \r\n        const  maxVal = []\r\n        if (test != null && test.length > 0) {\r\n          for(var i=0; i<test.length; i++){\r\n             \r\n                  if ( test[i].display!==null && test[i].display)\r\n                        console.log(test[i])\r\n                            maxVal.push(test[i].display)\r\n              \r\n          }\r\n        return maxVal.toString();\r\n        }\r\n    }\r\n//This is function to check for the status of each collection to display on the tablist below \r\n    const sampleAction = (row,dateEncounter) =>{\r\n            if(row.labTestOrderStatus ===0 || row.labTestOrderStatus ===null){\r\n                return (  <Menu>\r\n                            <MenuButton style={{ backgroundColor:\"#3F51B5\", color:\"#fff\", border:\"2px solid #3F51B5\", borderRadius:\"4px\"}}>\r\n                                Action <span aria-hidden>▾</span>\r\n                            </MenuButton>\r\n                                <MenuList style={{hover:\"#eee\"}}>\r\n                                <MenuItem onSelect={() => handleSample(row,dateEncounter)}><FaPlusSquare size=\"15\" style={{color: '#000'}}/>{\" \"}Collect Sample</MenuItem>\r\n                                </MenuList>\r\n                            </Menu>    \r\n                        )\r\n            }\r\n            if(row.labTestOrderStatus ===1){\r\n                return (  <Menu>\r\n                            <MenuButton style={{ backgroundColor:\"#3F51B5\", color:\"#fff\", border:\"2px solid #3F51B5\", borderRadius:\"4px\"}}>\r\n                                Action <span aria-hidden>▾</span>\r\n                            </MenuButton>\r\n                                <MenuList style={{hover:\"#eee\"}}>\r\n                                <MenuItem onSelect={() => transferSampleConfirmation(row)}><TiArrowForward size=\"15\" style={{color: '#000'}}/>{\" \"} Transfer Sample</MenuItem>\r\n                                </MenuList>\r\n                            </Menu>    \r\n                        )\r\n            }\r\n            if(row.labTestOrderStatus===5){\r\n                return (  <Menu>\r\n                            <MenuButton style={{ backgroundColor:\"#3F51B5\", color:\"#fff\", border:\"2px solid #3F51B5\", borderRadius:\"4px\"}}>\r\n                                Action <span aria-hidden>▾</span>\r\n                            </MenuButton>\r\n                                <MenuList style={{hover:\"#eee\"}}>\r\n                                <MenuItem onSelect={() => viewresult(row,dateEncounter)}><FaPlusSquare size=\"15\" style={{color: '#000'}}/>{\" \"}View Result</MenuItem>\r\n                                </MenuList>\r\n                            </Menu>    \r\n                        )\r\n            }\r\n  }\r\n\r\nreturn (\r\n    <div>\r\n\r\n        <Breadcrumbs aria-label=\"breadcrumb\">\r\n            <Link color=\"inherit\" \r\n                to={{pathname: \"/laboratory\",\r\n                state: 'collect-sample'\r\n                }} \r\n            >\r\n                    Laboratory\r\n            </Link>\r\n           \r\n            <Typography color=\"textPrimary\">Sample Collection  </Typography>\r\n            \r\n         </Breadcrumbs>\r\n        <br/>    \r\n        <br/>\r\n        <Row>\r\n            <Col>\r\n                <div >\r\n                   \r\n                </div>\r\n                <br/>\r\n                <Card className=\"mb-12\">\r\n                    <CardHeader> <span style={{  textTransform: 'capitalize'}}>Test Order Details </span>\r\n                        <Link \r\n                            to ={{ \r\n                              pathname: \"/\",  \r\n                              state: 'collect-sample'\r\n                            }} \r\n                        >\r\n                                \r\n                            <MatButton\r\n                                type='submit'\r\n                                variant='contained'\r\n                                color='primary'\r\n                                //className={classes.button}                        \r\n                                className=\" float-right mr-1\"\r\n                            >\r\n                                <TiArrowBack/>{\" \"} Back\r\n                            </MatButton>\r\n                      \r\n                        </Link>\r\n                  </CardHeader>\r\n                <CardBody>\r\n                    <Alert color=\"primary\">\r\n                        Please make sure you enter Lab number before collecting sample \r\n                    </Alert>\r\n                <br />\r\n                    <Row>\r\n                       \r\n                            <Card body>\r\n                                <Row >\r\n                                    <Col md=\"3\">\r\n                                        <FormGroup>\r\n                                            <Label for=\"occupation\">Lab Test Group </Label>\r\n\r\n                                                <Input\r\n                                                  type=\"select\"\r\n                                                  name=\"testgroup\"\r\n                                                  id=\"testgroup\"\r\n                                                  onChange={getGroup}\r\n                                                >\r\n                                                   <option value=\"All\"> All </option>\r\n                                                    {\r\n                                                      uniqueValues.map(x => \r\n                                                        <option key={x} value={x}>\r\n                                                          {x}\r\n                                                        </option>\r\n                                                    )}\r\n                                                    \r\n                                              </Input>\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                    <Col md=\"3\" className='float-right mr-1'>\r\n                                        {/* {labNum['lab_number']===\"\" ? */}\r\n                                        <FormGroup>\r\n                                            <Label for=\"occupation\">Lab Number </Label>\r\n                                        <Input\r\n                                            type='text'\r\n                                            name='lab_number'\r\n                                            id='lab_number'\r\n                                            value={labNumber!==\"\" ? labNumber : labNum.lab_number}\r\n                                            onChange={handleLabNumber}\r\n                                            disabled={labNumber && labNum.lab_number ? 'true' : ''}\r\n                                        />\r\n                                        </FormGroup>                            \r\n                                    </Col>\r\n                                </Row>\r\n                                \r\n                                    <Form >\r\n                                    <br/>\r\n                                        <Table  striped responsive>\r\n                                            <thead style={{  backgroundColor:'#000000', color:'#ffffff' }}>\r\n                                                <tr>\r\n                                                    <th>Test Group</th>\r\n                                                    <th>Test Type</th>\r\n                                                    <th>Date Requested</th>\r\n                                                    <th>Status</th>\r\n                                                    <th>Action</th>\r\n                                                    <th ></th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {!loading ? fetchTestOrders.labOrder.tests.map((row) => (\r\n                                                  row !== null && row.labTestOrderStatus === 0 ?\r\n                                                   <tr key={row.id} style={{ borderBottomColor: '#fff' }}>\r\n                                                    <th className={classes.td}>{row.labTestGroupName}</th>\r\n                                                     <td className={classes.td}>{row.labTestName}</td>\r\n                                                     <td className={classes.td}>{fetchTestOrders.labOrder.orderDate+ '@' + fetchTestOrders.labOrder.orderTime}</td>\r\n                                                     <td className={classes.td}>{sampleStatus(0)}</td>\r\n                                                     <td className={classes.td}>{sampleAction(row, fetchTestOrders.labOrder.orderDate)}</td>\r\n                                                     <td className={classes.td}></td>\r\n                                                   </tr>\r\n                                                   :\r\n                                                   <tr></tr>\r\n                                                 ))\r\n                                                 :<p> <Spinner color=\"primary\" /> Loading Please Wait</p>\r\n                                               }\r\n                                            </tbody>\r\n                                        </Table>\r\n                                        <br />\r\n                                  \r\n                                    </Form>\r\n                                \r\n                              </Card>\r\n                        \r\n                  </Row>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n        </Row>\r\n        {modal || modal2  || modal3 || modal4 ? \r\n      (\r\n        <>\r\n            <SampleCollection modalstatus={modal} togglestatus={toggleModal} datasample={collectModal} labnumber={labNumValue}/>\r\n            {/* <ModalSampleTransfer modalstatus={modal2} togglestatus={toggleModal2} datasample={collectModal} labnumber={labNumber!==\"\" ? labNumber : labNum}/> */}\r\n            <ModalViewResult modalstatus={modal3} togglestatus={toggleModal3} datasample={collectModal} />\r\n            {/* <TransferModalConfirmation modalstatus={modal4} togglestatusConfirmation={toggleModal4} datasample={collectModal} actionButton={transferSample} labnumber={labNumber!==\"\" ? labNumber : labNum}/> */}\r\n       </>\r\n      ) \r\n      : \"\"\r\n      } \r\n    </div>\r\n  )  \r\n}\r\n\r\nexport default SampleList","import React, {useEffect, useCallback, useState} from 'react';\r\nimport {token, url } from \"../../../../api\";\r\nimport axios from \"axios\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom'\r\nimport ButtonMui from \"@material-ui/core/Button\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport PatientCardDetail from './../../Patient/PatientCard';\r\nimport SampleList from './SampleList';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { toast } from 'react-toastify';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: 'bottom',\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: 'center',\r\n  },\r\n  column: {\r\n    flexBasis: '20.33%',\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: 'none',\r\n    '&:hover': {\r\n      textDecoration: 'underline',\r\n    },\r\n  },\r\n});\r\n\r\n\r\nfunction PatientCard(props) {\r\n    let history = useHistory();\r\n    const [labObj, setLabObj] = useState({});\r\n    const { classes } = props;\r\n\r\n    const patientObj = history.location && history.location.state ? history.location.state : {}\r\n    //console.log(\"pobj\", patientObj.orderId)\r\n\r\n    const loadData = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${url}laboratory/orders/${patientObj.orderId}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            console.log(\"lab test obj\", response);\r\n            setLabObj(response.data);\r\n        } catch (e) {\r\n            toast.error(\"An error occurred while fetching lab\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    }, []);\r\n\r\n     useEffect(() => {\r\n         loadData();\r\n     }, [loadData]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Card >\r\n        <CardContent>\r\n        {\r\n            Object.entries(labObj).length !== 0 ?\r\n            <>\r\n            <PatientCardDetail patientObj={labObj}/>\r\n            <br/>\r\n            <SampleList  patientObj={labObj}/>\r\n            </>\r\n            : \"Error Page!!!\"\r\n        }\r\n         </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default withStyles(styles)(PatientCard);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {Modal,ModalHeader, ModalBody,Form,FormFeedback,Row,Alert,Col,Input,FormGroup,Label,Card,CardBody,} from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport { connect } from \"react-redux\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/styles.css\";\r\nimport { DateTimePicker } from \"react-widgets\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\nimport { token, url } from \"../../../../api\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { toast} from \"react-toastify\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        \"& > *\": {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    input: {\r\n        display: \"none\",\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"12.8px\",\r\n    },\r\n}));\r\n\r\nconst ModalVerifySample = (props) => {\r\n    const history = useHistory();\r\n\r\n    //console.log('modal', props)\r\n    const classes = useStyles()\r\n    const datasample = props.datasample && props.datasample!==null ? props.datasample : {};\r\n    //console.log('modal', datasample)\r\n\r\n    const sample_type = datasample.sampleTypeName;\r\n    const lab_number = datasample.labNumber;\r\n    const date_sample_collected = datasample.dateSampleCollected;\r\n    const time_sample_collected = datasample.timeSampleCollected;\r\n    const lab_test_id = datasample.id;\r\n\r\n    const sampleId = datasample.id;\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [visible, setVisible] = useState(true);\r\n    const onDismiss = () => setVisible(false);\r\n    const [samples, setSamples] = useState({});\r\n    const [optionsample, setOptionsample] = useState([]);\r\n    const [saveButtonStatus, setSaveButtonStatus] = useState(false);\r\n    const [otherFields, setotherFields] = useState({\r\n                        date_sample_verified:\"\",\r\n                        sample_verified_by:\"\",\r\n                        sample_priority:\"\",\r\n                        time_sample_verified:\"\",\r\n                        comment:\"\",\r\n                        verification_status:\"\",\r\n                        comment_sample_verified:\"\"\r\n                    });\r\n\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const [samplesVerified, setSamplesVerified] = useState({\r\n          \"commentSampleVerified\": \"\",\r\n          \"dateSampleVerified\": moment(new Date()).format(\"HH:mm:ss\"),\r\n          \"sampleAccepted\": \"string\",\r\n          \"sampleVerifiedBy\": \"string\",\r\n          \"testId\": 0,\r\n          \"timeSampleVerified\": \"\"\r\n    });\r\n\r\n    useEffect(() => {\r\n        async function getCharacters() {\r\n            try {\r\n            } catch (error) {\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    const handleInputChangeSample = (e) => {\r\n        setSamples({ ...samples, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const handleOtherFieldInputChange = e => {\r\n      setotherFields ({ ...otherFields, [e.target.name]: e.target.value });\r\n    }\r\n\r\n    /*****  Validation */\r\n   const validate = () => {\r\n         let temp = { ...errors }\r\n         temp.date_sample_verified = otherFields.date_sample_verified ? \"\" : \"Date is required\"\r\n         //temp.time_sample_verified = otherFields.time_sample_verified ? \"\" : \"Time  is required.\"\r\n         //temp.sample_verified_by = otherFields.sample_verified_by ? \"\" : \"This filed is required.\"\r\n         temp.comment = otherFields.comment ? \"\" : \"Comment is required.\"\r\n         //temp.verification_status = otherFields.verification_status ? \"\" : \"This filed is required.\"\r\n         setErrors({\r\n             ...temp\r\n         })\r\n         return Object.values(temp).every(x => x == \"\")\r\n       }\r\n\r\n    const saveSample = async (e) => {\r\n        e.preventDefault();\r\n\r\n         try {\r\n\r\n             if (validate()) {\r\n                setLoading(true);\r\n\r\n                const newDatenow = moment(otherFields.date_sample_verified).format(\r\n                                    \"YYYY-MM-DD\"\r\n                                );\r\n                const newTimeSampleVerified = moment(otherFields.date_sample_verified).format(\"HH:mm:ss\");\r\n\r\n                samplesVerified.commentSampleVerified = otherFields.comment;\r\n                samplesVerified.dateSampleVerified = newDatenow;\r\n                samplesVerified.sampleAccepted = otherFields.verification_status;\r\n                samplesVerified.sampleVerifiedBy = otherFields.sample_verified_by;\r\n                samplesVerified.testId = lab_test_id;\r\n                samplesVerified.timeSampleVerified = newTimeSampleVerified;\r\n\r\n                await axios.post(`${url}laboratory/verified-samples/${lab_test_id}`, samplesVerified,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}}).then(resp => {\r\n                    console.log(\"sample verify\", resp);\r\n                    setLoading(!true);\r\n                     toast.success(\"Sample verified successfully!!\", {\r\n                        position: toast.POSITION.TOP_RIGHT\r\n                    });\r\n                });\r\n\r\n                history.push('/');\r\n            }\r\n\r\n         } catch (e) {\r\n\r\n            toast.error(\"An error occurred during sample collection\", {\r\n                 position: toast.POSITION.TOP_RIGHT\r\n             });\r\n         }\r\n    };\r\n\r\n    function checklanumber(lab_num) {\r\n        if (lab_num === \"\" || lab_num===null) {\r\n            return (\r\n                <Alert color=\"danger\" isOpen={visible} toggle={onDismiss}>\r\n                    Please make sure you enter a lab number\r\n                </Alert>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <Card >\r\n                <CardBody>\r\n                    <Modal isOpen={props.modalstatus} toggle={props.togglestatus} className={props.className} size=\"lg\">\r\n                        <Form onSubmit={saveSample}>\r\n                            <ModalHeader toggle={props.togglestatus}>Verify Sample </ModalHeader>\r\n                            <ModalBody>\r\n                                {/**{checklanumber(lab_number)}*/}\r\n                                <Card >\r\n                                    <CardBody>\r\n                                        <Row >\r\n                                            <Col md={12} >\r\n                                               <Alert color=\"primary\" style={{color:\"#000\" , fontWeight: 'bolder', }}>\r\n                                                <p style={{marginTop: '.7rem' }}>Lab number: <span style={{ fontWeight: 'bolder'}}>{lab_number}</span>\r\n                                                    &nbsp;&nbsp;&nbsp;&nbsp;Sample type:\r\n                                                    <span style={{ fontWeight: 'bolder'}}>{\" \"}{sample_type}</span>\r\n                                                            &nbsp;&nbsp;&nbsp;&nbsp; Date sample collected :\r\n                                                    <span style={{ fontWeight: 'bolder'}}>{\" \"}{date_sample_collected + \"@\" + time_sample_collected}</span>\r\n                                                </p>\r\n\r\n                                              </Alert>\r\n                                        </Col>\r\n                                            <Col md={6}>\r\n                                              <FormGroup>\r\n                                                <Label for='maritalStatus'>Date Verified</Label>\r\n                                                <DateTimePicker\r\n                                                    time={false}\r\n                                                    name=\"date_sample_verified\"\r\n                                                    id=\"date_sample_verified\"\r\n                                                    onChange={value1 =>\r\n                                                      setotherFields({ ...otherFields, date_sample_verified: value1 })\r\n                                                    }\r\n                                                />\r\n                                                  {errors.time_sample_transfered !=\"\" ? (\r\n                                                    <span className={classes.error}>{errors.time_sample_transfered}</span>\r\n                                                  ) : \"\" }\r\n                                              </FormGroup>\r\n                                            </Col>\r\n                                            <Col md={6}>\r\n                                              <FormGroup>\r\n                                                <Label for=''>Time Verified</Label>\r\n\r\n                                                 <Input\r\n                                                    type=\"text\"\r\n                                                    name=\"time_sample_verified\"\r\n                                                    id=\"time_sample_verified\"\r\n                                                    onChange={value1 =>\r\n                                                        setotherFields({ ...otherFields, time_sample_verified: value1 })\r\n                                                    }\r\n                                                    value={samplesVerified.dateSampleVerified}\r\n                                                />\r\n\r\n                                                  {/*  {errors.time_sample_verified !=\"\" ? (\r\n                                                      <span className={classes.error}>{errors.time_sample_verified}</span>\r\n                                                      ) : \"\" } */}\r\n                                              </FormGroup>\r\n                                              </Col>\r\n                                          <Col md={6}>\r\n                                              <FormGroup>\r\n                                                <Label for=\"exampleSelect\">Confirm Sample</Label>\r\n                                                <Input type=\"select\" name=\"verification_status\" id=\"verification_status\"\r\n                                                  value={otherFields.verification_status}\r\n                                                  {...(errors.verification_status && { invalid: true})}\r\n                                                onChange={handleOtherFieldInputChange}>\r\n                                                  <option>Select</option>\r\n                                                  <option value=\"Valid\">Sample Valid </option>\r\n                                                  <option value=\"Rejected\">Sample Rejected</option>\r\n\r\n                                                </Input>\r\n                                                <FormFeedback>{errors.verification_status}</FormFeedback>\r\n                                              </FormGroup>\r\n                                              </Col>\r\n                                              <Col md={6}>\r\n                                                <FormGroup>\r\n                                                    <Label for=\"sample_verified_by\">Verify by </Label>\r\n\r\n                                                        <Input\r\n                                                          type=\"select\"\r\n                                                          name=\"sample_verified_by\"\r\n                                                          id=\"sample_verified_by\"\r\n                                                          vaule={otherFields.sample_verified_by}\r\n                                                          onChange={handleOtherFieldInputChange}\r\n                                                          {...(errors.sample_verified_by && { invalid: true})}\r\n                                                        >\r\n                                                          <option value=\"\"> </option>\r\n                                                          <option value=\"Dorcas\"> Dorcas </option>\r\n                                                          <option value=\"Mike\"> Mike </option>\r\n                                                          <option value=\"Admin\"> Admin </option>\r\n                                                      </Input>\r\n                                                          <FormFeedback>{errors.sample_verified_by}</FormFeedback>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                              <Col md={12}>\r\n                                              <FormGroup>\r\n                                                <Label for='maritalStatus'>Note</Label>\r\n                                                <Input\r\n                                                  type='textarea'\r\n                                                  name='comment'\r\n                                                  id='comment'\r\n                                                  style={{ minHeight: 100, fontSize: 14 }}\r\n                                                  onChange={handleOtherFieldInputChange}\r\n                                                  value = {otherFields.comment}\r\n                                                  {...(errors.comment && { invalid: true})}\r\n                                                  >\r\n                                                  </Input>\r\n                                                  <FormFeedback>{errors.comment}</FormFeedback>\r\n\r\n                                              </FormGroup>\r\n                                            </Col>\r\n\r\n                                            <br />\r\n                                            <br />\r\n                                            <Col md={12}>\r\n                                                {loading ? (\r\n                                                    <>\r\n                                                        <Spinner /> <p> &nbsp;&nbsp;Processing...</p>\r\n                                                    </>\r\n                                                ) : (\r\n                                                    \"\"\r\n                                                )}\r\n                                            </Col>\r\n                                        </Row>\r\n                                        {lab_number && lab_number !== null ? (\r\n                                            <MatButton\r\n                                                type=\"submit\"\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.button}\r\n                                                startIcon={<SaveIcon />}\r\n                                                disabled={loading}\r\n                                            >\r\n                                                Save\r\n                                            </MatButton>\r\n                                        ) : (\r\n                                            <MatButton\r\n                                                type=\"submit\"\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.button}\r\n                                                startIcon={<SaveIcon />}\r\n                                                disabled=\"true\"\r\n                                            >\r\n                                                Save\r\n                                            </MatButton>\r\n                                        )}\r\n                                        <MatButton\r\n                                            variant=\"contained\"\r\n                                            color=\"default\"\r\n                                            onClick={props.togglestatus}\r\n                                            className={classes.button}\r\n                                            startIcon={<CancelIcon />}\r\n                                        >\r\n                                            Cancel\r\n                                        </MatButton>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </ModalBody>\r\n                        </Form>\r\n                    </Modal>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalVerifySample;\r\n","import React from 'react'\r\nimport {Card, CardBody,CardHeader,Col,Row,Alert,Table, Form,FormGroup,Label,Input} from 'reactstrap'\r\nimport { useState , useEffect} from 'react'\r\nimport { TiArrowBack } from 'react-icons/ti'\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { Link } from 'react-router-dom'\r\nimport {FaPlusSquare} from 'react-icons/fa';\r\nimport 'react-widgets/styles.css'\r\nimport { ToastContainer } from \"react-toastify\";\r\n//Date Picker\r\n\r\nimport { Spinner } from 'reactstrap';\r\nimport { Badge } from 'reactstrap';\r\nimport {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport {FaRegEye} from 'react-icons/fa';\r\nimport {GoChecklist} from 'react-icons/go';\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ModalViewResult from './../TestResult/ViewResult';\r\n// import ModalSampleTransfer from './../TransferSample/TransferSampleModal';\r\nimport SampleVerification from './SampleVerification'\r\nimport { checkStatus } from '../../../../utils'\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%'\r\n    },\r\n    container: {\r\n        maxHeight: 440\r\n    },\r\n    td: { borderBottom :'#fff'}\r\n})\r\n\r\n  const SampleList = (props) => {\r\n\r\n    const testOrders = [];\r\n    const sampleCollections = props.patientObj ? props.patientObj : {};\r\n   // console.log(\"row\", sampleCollections)\r\n    const encounterDate = null ;\r\n    const hospitalNumber =  null;\r\n    //const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState('')\r\n    const [fetchTestOrders, setFetchTestOrders] = useState(sampleCollections)\r\n    const classes = useStyles()\r\n   \r\n    useEffect(() => {\r\n\r\n    }, []); //componentDidMount \r\n\r\n        //Get list of test type\r\n        const labTestType = [];\r\n            if(testOrders !== null || testOrders ===\"\"){\r\n                testOrders.forEach(function(value, index, array) {\r\n                    if(value['data']!==null)\r\n                        labTestType.push(value['data'].lab_test_group);\r\n                });\r\n            }\r\n\r\n        //Make the list contain unique list of Data \r\n        const uniqueValues = [...new Set(labTestType)];\r\n        const [modal, setModal] = useState(false) //Modal to collect sample \r\n        const toggleModal = () => setModal(!modal)\r\n        const [modal2, setModal2] = useState(false)//modal to transfer sample\r\n        const toggleModal2 = () => setModal2(!modal2)\r\n        const [modal4, setModal4] = useState(false)//modal to transfer sample Confirmation\r\n        const toggleModal4 = () => setModal4(!modal4)\r\n        const [modal3, setModal3] = useState(false)//modal to View Result\r\n        const toggleModal3 = () => setModal3(!modal3)\r\n        const [collectModal, setcollectModal] = useState([])//to collect array of datas into the modal and pass it as props\r\n        const [labNum, setlabNum] = useState({lab_number:\"\"})\r\n\r\n//    testOrders.forEach(function(value, index, array) {\r\n//                if(value['data']!==null && value['data'].hasOwnProperty(\"lab_number\")){\r\n//                   // setlabNum({lab_number:value['data'].lab_number})\r\n//                    if(value['data'].lab_number !== null){\r\n//                        labNumber = value['data'].lab_number\r\n//                    }\r\n//                }\r\n//            });\r\n    const handleLabNumber = e => {\r\n        e.preventDefault();   \r\n            setlabNum({ ...labNum, [e.target.name]: e.target.value })\r\n            //labNumber = e.target.value\r\n    }\r\n\r\n    const handleVerifySample = (row) => {\r\n        //console.log('rowsx', row, sid);\r\n        //row['sampleID'] = sid;\r\n        setcollectModal({...collectModal, ...row});\r\n\r\n        setModal(!modal)\r\n      }\r\n\r\n    const handleRecollectSample = (row) => {\r\n        setcollectModal({...collectModal, ...row});\r\n        setModal2(!modal2) \r\n    }\r\n    const addResult = (row) => {  \r\n        setcollectModal({...collectModal, ...row});\r\n        setModal4(!modal4) \r\n    }\r\n\r\n    const viewresult = (row) => {  \r\n        setcollectModal({...collectModal, ...row});\r\n        setModal3(!modal3) \r\n    }\r\n\r\n    const getGroup = e => {\r\n        const getValue =e.target.value;\r\n        if(getValue!=='All' || getValue ===null)\r\n        { \r\n            //const testOrders = fetchTestOrders.length >0 ? fetchTestOrders:{}\r\n            const getNewTestOrder = testOrders.find(x => x.data!==null && x.data.lab_test_group === getValue)\r\n           setFetchTestOrders([getNewTestOrder])\r\n           // testOrders =[...getNewTestOrder] \r\n        }else{\r\n            setFetchTestOrders(testOrders)\r\n        }\r\n    };\r\n    //This is function to check for the status of each collection to display on the tablist below \r\n    const sampleStatus = e =>{\r\n        if(e===1){\r\n            return <p><Badge  color=\"info\">Sample Collected</Badge></p>\r\n        }else if(e===2){\r\n            return <p><Badge  color=\"light\">Sample Transfered</Badge></p>\r\n        }else if(e===3){\r\n            return <p><Badge  color=\"light\">Sample Verified</Badge></p>\r\n        }else if(e===4){\r\n            return <p><Badge  color=\"light\">Sample Rejected</Badge></p>\r\n        }else if(e===5){\r\n            return <p><Badge  color=\"light\">Result Available</Badge></p>\r\n        }else{\r\n            return <p><Badge  color=\"warning\">Pending Collection</Badge></p>\r\n        }\r\n    }\r\n\r\n    function sampleTypeList (test){\r\n        \r\n        const  maxVal = []\r\n        if (test != null && test.length > 0) {\r\n          for(var i=0; i<test.length; i++){\r\n             \r\n                  if ( test[i].display!==null && test[i].display)\r\n                        console.log(test[i])\r\n                            maxVal.push(test[i].display)\r\n              \r\n          }\r\n        return maxVal.toString();\r\n        }\r\n    }\r\n//This is function to check for the status of each collection to display on the tablist below \r\n    const sampleAction = (id, row) =>{\r\n        if(id ===1){\r\n            return (\r\n                    <Menu>\r\n                    <MenuButton style={{ backgroundColor:\"#3F51B5\", color:\"#fff\", border:\"2px solid #3F51B5\", borderRadius:\"4px\"}}>\r\n                        Action <span aria-hidden>▾</span>\r\n                    </MenuButton>\r\n                        <MenuList style={{hover:\"#eee\"}}>\r\n                        <MenuItem onSelect={() => handleVerifySample(row)}><GoChecklist size=\"15\" style={{color: '#3F51B5'}}/>{\" \"}Verify Sample</MenuItem>\r\n                        </MenuList>\r\n                    </Menu>\r\n                )\r\n            }\r\n            if(row.labTestOrderStatus===4){\r\n                return (\r\n                        <Menu>\r\n                        <MenuButton style={{ backgroundColor:\"#3F51B5\", color:\"#fff\", border:\"2px solid #3F51B5\", borderRadius:\"4px\"}}>\r\n                            Action <span aria-hidden>▾</span>\r\n                        </MenuButton>\r\n                            <MenuList style={{hover:\"#eee\"}}>\r\n                            <MenuItem onSelect={() => handleRecollectSample(row)}><FaPlusSquare size=\"15\" style={{color: '#3F51B5'}}/>{\" \"}Re-collect Sample</MenuItem>\r\n                            </MenuList>\r\n                        </Menu>\r\n                    )\r\n                }\r\n                if(row.labTestOrderStatus===5){\r\n                    return (\r\n                            <Menu>\r\n                            <MenuButton style={{ backgroundColor:\"#3F51B5\", color:\"#fff\", border:\"2px solid #3F51B5\", borderRadius:\"4px\"}}>\r\n                                Action <span aria-hidden>▾</span>\r\n                            </MenuButton>\r\n                                <MenuList style={{hover:\"#eee\"}}>\r\n                                    <MenuItem onSelect={() => viewresult(row)}><FaRegEye size=\"15\" style={{color: '#3F51B5'}}/>{\" \"}View Result</MenuItem>\r\n                                    <MenuItem onSelect={() => addResult(row)}><FaPlusSquare size=\"15\" style={{color: '#3F51B5'}}/>{\" \"}Add Result</MenuItem>\r\n                                </MenuList>\r\n\r\n                            </Menu>\r\n                        )\r\n                    }\r\n            }\r\n\r\nreturn (\r\n    <div>\r\n\r\n        <Breadcrumbs aria-label=\"breadcrumb\">\r\n            <Link color=\"inherit\" \r\n                to={{pathname: \"/laboratory\",\r\n                state: 'collect-sample'\r\n                }} \r\n            >\r\n                    Laboratory\r\n            </Link>\r\n           \r\n            <Typography color=\"textPrimary\">Sample Verification  </Typography>\r\n            \r\n         </Breadcrumbs>\r\n        <br/>    \r\n        <br/>\r\n        <Row>\r\n            <Col>\r\n                <div >\r\n                   \r\n                </div>\r\n                <br/>\r\n                <Card className=\"mb-12\">\r\n                    <CardHeader> <span style={{  textTransform: 'capitalize'}}>Test Order Details </span>\r\n                        <Link \r\n                            to ={{ \r\n                              pathname: \"/laboratory\",  \r\n                              state: 'verification'\r\n                            }} \r\n                        >\r\n                                \r\n                            <MatButton\r\n                                type='submit'\r\n                                variant='contained'\r\n                                color='primary'\r\n                                //className={classes.button}                        \r\n                                className=\" float-right mr-1\"\r\n                            >\r\n                                <TiArrowBack/>{\" \"} Back\r\n                            </MatButton>\r\n                      \r\n                        </Link>\r\n                  </CardHeader>\r\n                <CardBody>\r\n                    { /* <Alert color=\"primary\">\r\n                        Please make sure you enter Lab number before collecting sample\r\n                    </Alert>*/}\r\n                <br />\r\n                    <Row>\r\n                       \r\n                            <Card body>\r\n                                <Row >\r\n                                    <Col md=\"3\">\r\n                                        <FormGroup>\r\n                                            <Label for=\"occupation\">Lab Test Group </Label>\r\n\r\n                                                <Input\r\n                                                  type=\"select\"\r\n                                                  name=\"testgroup\"\r\n                                                  id=\"testgroup\"\r\n                                                  onChange={getGroup}\r\n                                                >\r\n                                                   <option value=\"All\"> All </option>\r\n                                                    {\r\n                                                      uniqueValues.map(x => \r\n                                                        <option key={x} value={x}>\r\n                                                          {x}\r\n                                                        </option>\r\n                                                    )}\r\n                                                    \r\n                                              </Input>\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                    {/*\r\n                                   <Col md=\"3\" className='float-right mr-1'>\r\n\r\n                                        <FormGroup>\r\n                                            <Label for=\"occupation\">Lab Number </Label>\r\n                                        <Input\r\n                                            type='text'\r\n                                            name='lab_number'\r\n                                            id='lab_number'\r\n                                            value={labNumber!==\"\" ? labNumber : labNum.lab_number}\r\n                                            onChange={handleLabNumber}\r\n                                            disabled={labNumber && labNum.lab_number ? 'true' : ''}\r\n                                        />\r\n                                        </FormGroup>\r\n                                    </Col> */}\r\n\r\n                                </Row>\r\n                                \r\n                                    <Form >\r\n                                    <br/>\r\n                                        <Table  striped responsive>\r\n                                            <thead style={{  backgroundColor:'#000000', color:'#ffffff' }}>\r\n                                                <tr>\r\n                                                    <th>Test Group</th>\r\n                                                    <th>Test Type</th>\r\n                                                    <th>Sample Type</th>\r\n                                                    <th>Date Collected</th>\r\n                                                    <th >Status</th>\r\n                                                    <th>Action</th>\r\n                                                    <th ></th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {!loading ? fetchTestOrders.labOrder.tests.map((row) => (\r\n                                                    row.samples.map((sample) => (\r\n                                                         sample.dateSampleCollected !== null && row.labTestOrderStatus === 1 ?\r\n                                                           <tr key={row.id} style={{ borderBottomColor: '#fff' }}>\r\n                                                             <th className={classes.td}>{row.labTestGroupName}</th>\r\n                                                             <td className={classes.td}>{row.labTestName}</td>\r\n                                                             <td className={classes.td}><Badge  color=\"primary\">{sample.sampleTypeName}</Badge></td>\r\n                                                             <td className={classes.td}>{sample.dateSampleCollected + '@' + sample.timeSampleCollected}</td>\r\n                                                             <td className={classes.td}>{sampleStatus(1)}</td>\r\n                                                             <td className={classes.td}>{sampleAction(1, sample)}</td>\r\n                                                             <td className={classes.td}></td>\r\n                                                           </tr>\r\n                                                           :\r\n                                                           <tr></tr>\r\n                                                    ))\r\n                                                 ))\r\n                                                 :<p> <Spinner color=\"primary\" /> Loading Please Wait</p>\r\n                                               }\r\n                                            </tbody>\r\n                                        </Table>\r\n                                        <br />\r\n                                  \r\n                                    </Form>\r\n                                \r\n                              </Card>\r\n                        \r\n                  </Row>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n        </Row>\r\n        {modal || modal2  || modal3 || modal4 ? \r\n      (\r\n        <>\r\n            <SampleVerification modalstatus={modal} togglestatus={toggleModal} datasample={collectModal}/>\r\n            {/* <ModalSampleTransfer modalstatus={modal2} togglestatus={toggleModal2} datasample={collectModal} labnumber={labNumber!==\"\" ? labNumber : labNum}/> */}\r\n            <ModalViewResult modalstatus={modal3} togglestatus={toggleModal3} datasample={collectModal} />\r\n            {/* <TransferModalConfirmation modalstatus={modal4} togglestatusConfirmation={toggleModal4} datasample={collectModal} actionButton={transferSample} labnumber={labNumber!==\"\" ? labNumber : labNum}/> */}\r\n       </>\r\n      ) \r\n      : \"\"\r\n      } \r\n    </div>\r\n  )  \r\n}\r\n\r\nexport default SampleList","import React, {useEffect, useCallback, useState} from 'react';\r\nimport {token, url } from \"../../../../api\";\r\nimport axios from \"axios\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom'\r\nimport ButtonMui from \"@material-ui/core/Button\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport PatientCardDetail from './../../Patient/PatientCard';\r\nimport SampleList from './SampleList';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { toast } from 'react-toastify';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: 'bottom',\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: 'center',\r\n  },\r\n  column: {\r\n    flexBasis: '20.33%',\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: 'none',\r\n    '&:hover': {\r\n      textDecoration: 'underline',\r\n    },\r\n  },\r\n});\r\n\r\n\r\nfunction PatientCard(props) {\r\n    let history = useHistory();\r\n    const [labObj, setLabObj] = useState({});\r\n    const { classes } = props;\r\n\r\n    const patientObj = history.location && history.location.state ? history.location.state : {}\r\n    //console.log(\"pobj\", patientObj.orderId)\r\n\r\n    const loadData = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${url}laboratory/orders/${patientObj.orderId}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            console.log(\"verify test obj\", response);\r\n            setLabObj(response.data);\r\n        } catch (e) {\r\n            toast.error(\"An error occurred while fetching lab\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    }, []);\r\n\r\n     useEffect(() => {\r\n         loadData();\r\n     }, [loadData]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Card >\r\n        <CardContent>\r\n        {\r\n            Object.entries(labObj).length !== 0 ?\r\n            <>\r\n            <PatientCardDetail patientObj={labObj}/>\r\n            <br/>\r\n            <SampleList  patientObj={labObj}/>\r\n            </>\r\n            : \"Error Page!!!\"\r\n        }\r\n         </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default withStyles(styles)(PatientCard);\r\n","import React, {useState} from 'react';\r\nimport { Modal, ModalHeader, ModalBody,Form,FormFeedback,Row,Col,\r\nFormGroup,Label,Input,Card,CardBody} from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport axios from \"axios\";\r\nimport \"react-widgets/styles.css\";\r\nimport { DateTimePicker } from 'react-widgets';\r\nimport Moment from 'moment';\r\nimport momentLocalizer from 'react-widgets-moment';\r\nimport moment from \"moment\";\r\nimport {token, url} from '../../../../api'\r\n// import { useSelector, useDispatch } from 'react-redux';\r\n// import { createCollectedSample, fetchFormById } from '../../../actions/laboratory'\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\nimport { Alert } from 'reactstrap';\r\nimport { Spinner } from 'reactstrap';\r\nimport { toast} from \"react-toastify\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst ModalSampleResult = (props) => {\r\n    const history = useHistory();\r\n    const classes = useStyles()\r\n    const datasample = props.datasample ? props.datasample : {};\r\n    const sample_type = datasample.sampleTypeName;\r\n\r\n    const lab_number = datasample.labNumber;\r\n    const date_sample_collected = datasample.dateSampleCollected;\r\n    const time_sample_collected = datasample.timeSampleCollected;\r\n    const lab_test_id = datasample.id;\r\n\r\n    const unit_measurement = datasample.id ? datasample.unitMeasurement : null ;\r\n    const labId = datasample.id\r\n\r\n\r\n    const [visible, setVisible] = useState(true);\r\n    const onDismiss = () => setVisible(false);\r\n    const [loading, setLoading] = useState(false)\r\n    const [samples, setSamples] = useState({}) \r\n    const [otherfields, setOtherFields] = \r\n            useState({\r\n            time_result_enetered:\"\",\r\n            date_result_reported:\"\",\r\n            resultReported:\"\",\r\n            //test_result:\"\",\r\n            date_asseyed:\"\",\r\n            timeAssayed:\"\",\r\n            //result_reported_by: \"\"\r\n          }); \r\n    const [errors, setErrors] = useState({});\r\n\r\n    const [sampleResult, setSampleResult] = useState({\r\n          \"dateAssayed\": \"\",\r\n          \"dateResultReported\": \"\",\r\n          \"id\": 0,\r\n          \"resultReported\": \"\",\r\n          \"testId\": 0,\r\n          \"timeAssayed\": moment(new Date()).format(\"HH:mm:ss\"),\r\n          \"timeResultReported\": moment(new Date()).format(\"HH:mm:ss\"),\r\n    });\r\n\r\n  const handleOtherFieldInputChange = e => {\r\n      setOtherFields ({ ...otherfields, [e.target.name]: e.target.value });\r\n  }\r\n\r\n  const validate = () => {\r\n      let temp = { ...errors }\r\n      ///temp.time_result_enetered = otherfields.time_result_enetered ? \"\" : \"Date is required\"\r\n      temp.date_result_reported = otherfields.date_result_reported ? \"\" : \"Date  is required.\"\r\n      //temp.result_reported_by = otherfields.result_reported_by ? \"\" : \"This filed is required.\"\r\n      temp.date_asseyed = otherfields.date_asseyed ? \"\" : \"This filed is required.\" \r\n      //temp.resultReported = otherfields.resultReported ? \"\" : \"This filed is required.\"\r\n      setErrors({\r\n          ...temp\r\n      })\r\n      return Object.values(temp).every(x => x == \"\")\r\n  }\r\n\r\n    const saveSample = async (e) => {\r\n        e.preventDefault()\r\n        if(validate()){\r\n              setLoading(true);\r\n\r\n              const newDateReported = moment(otherfields.date_result_reported).format(\r\n                                                  \"YYYY-MM-DD\"\r\n                                              );\r\n              const newTimeSampleEntered = moment(otherfields.date_result_reported).format(\"HH:mm:ss\");\r\n\r\n              sampleResult.dateAssayed = newDateReported;\r\n              sampleResult.dateResultReported = newDateReported;\r\n              sampleResult.testId = lab_test_id;\r\n              sampleResult.timeAssayed = newTimeSampleEntered;\r\n              sampleResult.timeResultReported = newTimeSampleEntered;\r\n              sampleResult.resultReported = otherfields.resultReported;\r\n\r\n              console.log(\"samples result\", otherfields, sampleResult);\r\n\r\n              await axios.post(`${url}laboratory/results`, sampleResult,\r\n              { headers: {\"Authorization\" : `Bearer ${token}`}}).then(resp => {\r\n                  console.log(\"sample result\", resp);\r\n                  setLoading(!true);\r\n                   toast.success(\"Sample verified successfully!!\", {\r\n                      position: toast.POSITION.TOP_RIGHT\r\n                  });\r\n\r\n                  //localStorage.removeItem('labnumber');\r\n\r\n                  //history.push('/result-reporting');\r\n              });\r\n\r\n\r\n\r\n      }\r\n    }\r\n    const textstyle = {\r\n        fontSize: '14px',\r\n        fontWeight: 'bolder'\r\n      };\r\n\r\n   function checklanumber(lab_num) {\r\n          if (lab_num === \"\" || lab_num===null) {\r\n              return (\r\n                  <Alert color=\"danger\" isOpen={visible} toggle={onDismiss}>\r\n                      Please make sure you enter the sample lab number\r\n                  </Alert>\r\n              );\r\n          }\r\n      }\r\n      \r\n  return (\r\n      <div >\r\n          <Modal isOpen={props.modalstatus} toggle={props.togglestatus} className={props.className} size=\"lg\">\r\n              <Form onSubmit={saveSample}>\r\n                  <ModalHeader toggle={props.togglestatus}>Result Reporting</ModalHeader>\r\n                      <ModalBody>\r\n                            {/*{checklanumber(lab_number)}*/}\r\n                          <Card>\r\n                              <CardBody>\r\n                                  <Row style={{ marginTop: '20px'}}>\r\n                                      <Col md=\"12\" >\r\n                                          <Alert color=\"primary\" style={{color:\"#000\" , fontWeight: 'bolder', }}>\r\n                                          <p style={{marginTop: '.7rem' }}>Lab number: <span style={{ fontWeight: 'bolder'}}>{lab_number}</span>\r\n                                              &nbsp;&nbsp;&nbsp;&nbsp;Sample type:\r\n                                              <span style={{ fontWeight: 'bolder'}}>{\" \"}{sample_type}</span>\r\n                                                      &nbsp;&nbsp;&nbsp;&nbsp; Date sample collected :\r\n                                              <span style={{ fontWeight: 'bolder'}}>{\" \"}{date_sample_collected + \"@\" + time_sample_collected}</span>\r\n                                          </p>\r\n\r\n                                        </Alert>\r\n                                            <br />\r\n                                      </Col>\r\n\r\n                                      <Col xs=\"6\">\r\n                                          Date Assayed\r\n                                            <br/>\r\n                                            <DateTimePicker time={false} name=\"date_asseyed\"  id=\"date_asseyed\"  \r\n                                              onChange={value1 =>\r\n                                                setOtherFields({ ...otherfields, date_asseyed: value1 })\r\n                                              }\r\n                                            /> \r\n                                      </Col>\r\n                                      <Col xs=\"6\">\r\n                                          Date Reported\r\n                                              <br/>\r\n                                              <DateTimePicker time={false} name=\"date_result_reported\"  id=\"date_result_reported\"  \r\n                                                onChange={value1 =>\r\n                                                  setOtherFields({ ...otherfields, date_result_reported: value1 })\r\n                                                }\r\n                                              />            \r\n                                      </Col>\r\n                                      <Col md={6}>\r\n                                          <FormGroup>\r\n                                            <Label for=''>Time Assayed</Label>\r\n\r\n                                             <Input\r\n                                                type=\"text\"\r\n                                                name=\"time_result_assayed\"\r\n                                                id=\"time_result_assayed\"\r\n                                                onChange={value1 =>\r\n                                                    setOtherFields({ ...otherfields, timeAssayed: value1 })\r\n                                                }\r\n                                                value={sampleResult.timeAssayed}\r\n                                            />\r\n\r\n                                              {/*  {errors.time_sample_verified !=\"\" ? (\r\n                                                  <span className={classes.error}>{errors.time_sample_verified}</span>\r\n                                                  ) : \"\" } */}\r\n                                          </FormGroup>\r\n                                      </Col>\r\n                                        <Col md={6}>\r\n                                            <FormGroup>\r\n                                              <Label for=''>Time Reported</Label>\r\n\r\n                                               <Input\r\n                                                  type=\"text\"\r\n                                                  name=\"time_result_reported\"\r\n                                                  id=\"time_result_reported\"\r\n                                                  onChange={value1 =>\r\n                                                      setOtherFields({ ...otherfields, timeResultReported: value1 })\r\n                                                  }\r\n                                                  value={sampleResult.timeResultReported}\r\n                                              />\r\n\r\n                                                {/*  {errors.time_sample_verified !=\"\" ? (\r\n                                                    <span className={classes.error}>{errors.time_sample_verified}</span>\r\n                                                    ) : \"\" } */}\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                  </Row>\r\n                                  <Row>             \r\n                                     <Col md={12}>\r\n                                       <FormGroup>\r\n                                         <Label for='resultReported'>Result Report</Label>\r\n                                         <Input\r\n                                           type='textarea'\r\n                                           name='resultReported'\r\n                                           id='resultReported'\r\n                                           style={{ minHeight: 100, fontSize: 14 }}\r\n                                           onChange={handleOtherFieldInputChange}\r\n                                           >\r\n                                           </Input>\r\n                                       </FormGroup>\r\n                                     </Col>\r\n\r\n                                </Row>\r\n                                    <br/>\r\n                                    {loading ? <Spinner /> : \"\"}\r\n                                    <br/>\r\n                                         {lab_number && lab_number !== null ? (\r\n                                           <MatButton\r\n                                               type=\"submit\"\r\n                                               variant=\"contained\"\r\n                                               color=\"primary\"\r\n                                               className={classes.button}\r\n                                               startIcon={<SaveIcon />}\r\n                                               disabled={loading}\r\n                                           >\r\n                                               Save\r\n                                           </MatButton>\r\n                                       ) : (\r\n                                           <MatButton\r\n                                               type=\"submit\"\r\n                                               variant=\"contained\"\r\n                                               color=\"primary\"\r\n                                               className={classes.button}\r\n                                               startIcon={<SaveIcon />}\r\n                                               disabled=\"true\"\r\n                                           >\r\n                                               Save\r\n                                           </MatButton>\r\n                                       )}\r\n                                       <MatButton\r\n                                           variant=\"contained\"\r\n                                           color=\"default\"\r\n                                           onClick={props.togglestatus}\r\n                                           className={classes.button}\r\n                                           startIcon={<CancelIcon />}\r\n                                       >\r\n                                           Cancel\r\n                                       </MatButton>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </ModalBody>\r\n              </Form>\r\n          </Modal>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default ModalSampleResult;\r\n","import React from 'react'\r\nimport {Card, CardBody,CardHeader,Col,Row,Alert,Table, Form,FormGroup,Label,Input} from 'reactstrap'\r\nimport { useState, useCallback, useEffect} from 'react'\r\nimport { TiArrowBack, TiDocumentText } from 'react-icons/ti'\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { Link } from 'react-router-dom'\r\nimport {FaPlusSquare} from 'react-icons/fa';\r\nimport 'react-widgets/styles.css'\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { checkStatus } from '../../../../utils'\r\nimport MaterialTable from 'material-table';\r\nimport { Spinner } from 'reactstrap';\r\nimport { Badge } from 'reactstrap';\r\nimport {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport {FaRegEye} from 'react-icons/fa';\r\nimport {GoChecklist} from 'react-icons/go';\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ModalViewResult from './../TestResult/ViewResult';\r\n// import ModalSampleTransfer from './../TransferSample/TransferSampleModal';\r\nimport ModalEnterResult from './EnterResult'\r\nimport axios from \"axios\";\r\nimport {token, url} from '../../../../api'\r\nimport { toast} from \"react-toastify\";\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%'\r\n    },\r\n    container: {\r\n        maxHeight: 440\r\n    },\r\n    td: { borderBottom :'#fff'}\r\n})\r\n\r\n  const SampleList = (props) => {\r\n    //console.log(\"sr\",props.patientObj)\r\n\r\n    const testOrders = [];\r\n    const sampleCollections = props.patientObj ? props.patientObj : {};\r\n    const encounterDate = null ;\r\n    const hospitalNumber =  null;\r\n    //const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState('')\r\n    const [fetchTestOrders, setFetchTestOrders] = useState(sampleCollections)\r\n\r\n    const [flipTable, setFlipTable] = useState(false)\r\n    const [previousRecords, setPreviousRecords] = useState([]);\r\n\r\n    const classes = useStyles()\r\n\r\n     const previousData = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${url}laboratory/results/patients/${props.patientObj.patientId}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            console.log(\"prev results\", response);\r\n            setPreviousRecords(response.data);\r\n        } catch (e) {\r\n            toast.error(\"An error occurred while fetching previous results\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    }, []);\r\n   \r\n    useEffect(() => {\r\n        previousData()\r\n    }, [previousData]);\r\n\r\n        //Get list of test type\r\n        const labTestType = [];\r\n        if(testOrders !== null || testOrders ===\"\"){\r\n                testOrders.forEach(function(value, index, array) {\r\n                    if(value['data']!==null)\r\n                        labTestType.push(value['data'].lab_test_group);\r\n                });\r\n            }\r\n\r\n        //Make the list contain unique list of Data \r\n        const uniqueValues = [...new Set(labTestType)];\r\n        const [modal, setModal] = useState(false) //Modal to collect sample \r\n        const toggleModal = () => setModal(!modal)\r\n        const [modal2, setModal2] = useState(false)//modal to transfer sample\r\n        const toggleModal2 = () => setModal2(!modal2)\r\n        const [modal4, setModal4] = useState(false)//modal to transfer sample Confirmation\r\n        const toggleModal4 = () => setModal4(!modal4)\r\n        const [modal3, setModal3] = useState(false)//modal to View Result\r\n        const toggleModal3 = () => setModal3(!modal3)\r\n        const [collectModal, setcollectModal] = useState([])//to collect array of datas into the modal and pass it as props\r\n        const [labNum, setlabNum] = useState({lab_number:\"\"})\r\n\r\n        let  labNumber = \"\" //check if that key exist in the array\r\n\r\n        let lab = localStorage.getItem('labnumber');\r\n\r\n        console.log(\"TR\",lab);\r\n\r\n        if (lab !== null) {\r\n            labNumber = lab;\r\n        }\r\n\r\n    const handleLabNumber = e => {\r\n        e.preventDefault();   \r\n            setlabNum({ ...labNum, [e.target.name]: e.target.value })\r\n            labNumber = e.target.value\r\n    }\r\n\r\n    const handleVerifySample = (row) => {  \r\n        setcollectModal({...collectModal, ...row});\r\n        setModal(!modal) \r\n      }\r\n\r\n    const handleRecollectSample = (row) => {\r\n        setcollectModal({...collectModal, ...row});\r\n        setModal2(!modal2) \r\n    }\r\n    const addResult = (row) => {  \r\n        setcollectModal({...collectModal, ...row});\r\n        setModal(!modal)\r\n    }\r\n\r\n    const viewresult = (row) => {  \r\n        setcollectModal({...collectModal, ...row});\r\n        setModal3(!modal3) \r\n    }\r\n\r\n    const getGroup = e => {\r\n        const getValue =e.target.value;\r\n        if(getValue!=='All' || getValue ===null)\r\n        { \r\n            //const testOrders = fetchTestOrders.length >0 ? fetchTestOrders:{}\r\n           const getNewTestOrder = testOrders.find(x => x.data!==null && x.data.lab_test_group === getValue)\r\n           setFetchTestOrders([getNewTestOrder])\r\n           // testOrders =[...getNewTestOrder] \r\n        }else{\r\n            setFetchTestOrders(testOrders)\r\n        }\r\n    };\r\n    //This is function to check for the status of each collection to display on the tablist below\r\n    const sampleStatus = e =>{\r\n        if(e===1){\r\n            return <p><Badge  color=\"light\">Sample Collected</Badge></p>\r\n        }else if(e===2){\r\n            return <p><Badge  color=\"light\">Sample Transfered</Badge></p>\r\n        }else if(e===3){\r\n            return <p><Badge  color=\"success\">Sample Verified</Badge></p>\r\n        }else if(e===4){\r\n            return <p><Badge  color=\"light\">Sample Rejected</Badge></p>\r\n        }else if(e===5){\r\n            return <p><Badge  color=\"light\">Result Available</Badge></p>\r\n        }else{\r\n            return <p><Badge  color=\"light\">Pending Collection</Badge></p>\r\n        }\r\n    }\r\n\r\n    function sampleTypeList (test){\r\n        \r\n        const  maxVal = []\r\n        if (test != null && test.length > 0) {\r\n          for(var i=0; i<test.length; i++){\r\n             \r\n                  if ( test[i].display!==null && test[i].display)\r\n                        console.log(test[i])\r\n                            maxVal.push(test[i].display)\r\n              \r\n          }\r\n        return maxVal.toString();\r\n        }\r\n    }\r\n\r\n    const sampleAction = (id, row) =>{\r\n    if(id===3){\r\n        return (\r\n                <Menu>\r\n                <MenuButton style={{ backgroundColor:\"#3F51B5\", color:\"#fff\", border:\"2px solid #3F51B5\", borderRadius:\"4px\"}}>\r\n                    Action <span aria-hidden>▾</span>\r\n                </MenuButton>\r\n                    <MenuList style={{hover:\"#eee\"}}>\r\n                        <MenuItem onSelect={() => viewresult(row)}><FaRegEye size=\"15\" style={{color: '#3F51B5'}}/>{\" \"}View Result</MenuItem>\r\n                        <MenuItem onSelect={() => addResult(row)}><FaPlusSquare size=\"15\" style={{color: '#3F51B5'}}/>{\" \"} Add Result</MenuItem>\r\n                    </MenuList>\r\n\r\n                </Menu>\r\n            )\r\n        }\r\n    }\r\n\r\n    const handleTableChange = () => {\r\n        setFlipTable(!flipTable)\r\n    }\r\n\r\nreturn (\r\n    <div>\r\n\r\n        <Breadcrumbs aria-label=\"breadcrumb\">\r\n            <Link color=\"inherit\" \r\n                to={{pathname: \"/laboratory\",\r\n                state: 'result'\r\n                }} \r\n            >\r\n                    Laboratory\r\n            </Link>\r\n           \r\n            <Typography color=\"textPrimary\">Result Reporting  </Typography>\r\n            \r\n         </Breadcrumbs>\r\n        <br/>    \r\n        <br/>\r\n        <Row>\r\n            <Col>\r\n                <div >\r\n\r\n                </div>\r\n                <br/>\r\n                <Card className=\"mb-12\">\r\n                    <CardHeader> <span style={{  textTransform: 'capitalize'}}>Test Order Details </span>\r\n                        <Link \r\n                            to ={{ \r\n                              pathname: \"/laboratory\",  \r\n                              state: 'collect-sample'\r\n                            }} \r\n                        >\r\n                                \r\n                            <MatButton\r\n                                type='submit'\r\n                                variant='contained'\r\n                                color='primary'\r\n                                className=\" float-right mr-1\"\r\n                            >\r\n                                <TiArrowBack/>{\" \"} Back\r\n                            </MatButton>\r\n                        </Link>\r\n\r\n                  </CardHeader>\r\n                <CardBody>\r\n                    <Row>\r\n\r\n                       <Card body>\r\n                            <Row >\r\n                                <Col md=\"3\" className='float-right mr-1'>\r\n                                     <MatButton\r\n                                        type='submit'\r\n                                        variant='contained'\r\n                                        color={flipTable === true ? \"primary\": \"secondary\"}\r\n                                        className=\" float-right mr-1\"\r\n                                        onClick={() => handleTableChange()}\r\n                                    >\r\n                                        <TiDocumentText/>{\" \"} { flipTable === true ? \"View Recent Results\": \"Historical Sample Results\"}\r\n                                    </MatButton>\r\n                                </Col>\r\n                            </Row>\r\n                            <br />\r\n\r\n\r\n                                    {\r\n                                        flipTable === true ?\r\n                                        <MaterialTable\r\n\r\n                                          title=\"Historical patient sample results\"\r\n                                          columns={[\r\n                                              { title: \"Patient ID\", field: \"Id\" },\r\n                                              {\r\n                                                title: \"Patient Name\",\r\n                                                field: \"name\",\r\n                                              },\r\n                                              { title: \"Date Order\", field: \"date\", type: \"date\" , filtering: false},\r\n                                              {\r\n                                                  title: \"Sample type\",\r\n                                                  field: \"samplecount\",\r\n                                                  filtering: false\r\n                                                },\r\n                                              {\r\n                                                  title: \"Date sample collected\",\r\n                                                  field: \"count\",\r\n                                                  filtering: false\r\n                                                },\r\n                                              {\r\n                                                title: \"Date Sample verified\",\r\n                                                field: \"samples\",\r\n                                                filtering: false\r\n                                              },\r\n                                               {\r\n                                                  title: \"Date sample result reported\",\r\n                                                  field: \"sampleverified\",\r\n                                                  filtering: false\r\n                                                },\r\n                                                 {\r\n                                                  title: \"Result\",\r\n                                                  field: \"results\",\r\n                                                  filtering: false\r\n                                                },\r\n\r\n                                          ]}\r\n                                          //isLoading={loading}\r\n                                          data={ previousRecords.map((row) => ({\r\n\r\n                                          Id: row.patientId,\r\n                                          name: row.patientFirstName +  ' ' + row.patientLastName,\r\n                                          date: row.orderDate + '@' + row.orderTime,\r\n                                          samplecount: row.sampleTypeName,\r\n                                          count: row.DateSampleCollected === null ? \"----\" : row.DateSampleCollected + '@'+ row.TimeSampleCollected,\r\n                                          samples: row.dateSampleVerified === null ? \"----\": row.dateSampleVerified + '@' + row.timeSampleVerified,\r\n                                          sampleverified: row.dateResultReported === null ? \"----\" : row.dateResultReported + '@' + row.timeResultReported,\r\n                                          results:  row.dateResultReported !== null ? \"Available\" : \"Not Available\"\r\n                                          }))}\r\n                                        />\r\n                                        :\r\n                                        <>\r\n                                        <Row >\r\n                                            <Col md=\"3\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"occupation\">Lab Test Group </Label>\r\n\r\n                                                        <Input\r\n                                                          type=\"select\"\r\n                                                          name=\"testgroup\"\r\n                                                          id=\"testgroup\"\r\n                                                          onChange={getGroup}\r\n                                                        >\r\n                                                           <option value=\"All\"> All </option>\r\n                                                            {\r\n                                                              uniqueValues.map(x =>\r\n                                                                <option key={x} value={x}>\r\n                                                                  {x}\r\n                                                                </option>\r\n                                                            )}\r\n\r\n                                                      </Input>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            {/*<Col md=\"3\" className='float-right mr-1'>\r\n\r\n                                                <FormGroup>\r\n                                                    <Label for=\"occupation\">Lab Number </Label>\r\n                                                <Input\r\n                                                    type='text'\r\n                                                    name='lab_number'\r\n                                                    id='lab_number'\r\n                                                    value={labNumber!==\"\" ? labNumber : labNum.lab_number}\r\n                                                    onChange={handleLabNumber}\r\n                                                    disabled={labNumber && labNum.lab_number ? 'true' : ''}\r\n                                                />\r\n                                                </FormGroup>\r\n                                            </Col>*/}\r\n\r\n                                        </Row>\r\n                                         <Form >\r\n                                            <br/>\r\n                                            <Table  striped responsive>\r\n                                                <thead style={{  backgroundColor:'#000000', color:'#ffffff' }}>\r\n                                                    <tr>\r\n                                                        <th>Test Group</th>\r\n                                                        <th>Test Type</th>\r\n                                                         <th>Sample Type</th>\r\n                                                        <th>Date Verified</th>\r\n                                                        <th >Status</th>\r\n                                                        <th>Action</th>\r\n                                                        <th ></th>\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                 {!loading ? fetchTestOrders.labOrder.tests.map((row) => (\r\n                                                        row.samples.map((sample) => (\r\n                                                             sample.dateSampleCollected !== null && row.labTestOrderStatus !== 1 ?\r\n                                                               <tr key={row.id} style={{ borderBottomColor: '#fff' }}>\r\n                                                                 <th className={classes.td}>{row.labTestGroupName}</th>\r\n                                                                <td className={classes.td}>{row.labTestName}</td>\r\n                                                                 <td className={classes.td}><Badge  color=\"primary\">{sample.sampleTypeName}</Badge></td>\r\n                                                                 <td className={classes.td}>{sample.dateSampleVerified + '@' + sample.timeSampleVerified}</td>\r\n                                                                 <td className={classes.td}>{sampleStatus(3)}</td>\r\n                                                                 <td className={classes.td}>{sampleAction(3, sample)}</td>\r\n                                                                 <td className={classes.td}></td>\r\n                                                               </tr>\r\n                                                               :\r\n                                                               <tr></tr>\r\n                                                        ))\r\n                                                     ))\r\n                                                     :<p> <Spinner color=\"primary\" /> Loading Please Wait</p>\r\n                                                   }\r\n                                                </tbody>\r\n                                            </Table>\r\n                                            <br />\r\n\r\n                                        </Form>\r\n                                      </>\r\n                                    }\r\n\r\n                              </Card>\r\n\r\n                  </Row>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n        </Row>\r\n        {modal || modal2  || modal3 || modal4 ? \r\n      (\r\n        <>\r\n            <ModalEnterResult modalstatus={modal} togglestatus={toggleModal} datasample={collectModal} labnumber={labNumber !==\"\" ? labNumber : labNum['lab_number'] }/>\r\n            <ModalViewResult modalstatus={modal3} togglestatus={toggleModal3} datasample={collectModal} />\r\n            {/* <TransferModalConfirmation modalstatus={modal4} togglestatusConfirmation={toggleModal4} datasample={collectModal} actionButton={transferSample} labnumber={labNumber!==\"\" ? labNumber : labNum}/> */}\r\n       </>\r\n      ) \r\n      : \"\"\r\n      } \r\n    </div>\r\n  )  \r\n}\r\n\r\nexport default SampleList","import React, {useEffect, useCallback, useState} from 'react';\r\nimport {token, url } from \"../../../../api\";\r\nimport axios from \"axios\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom'\r\nimport ButtonMui from \"@material-ui/core/Button\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport PatientCardDetail from './../../Patient/PatientCard';\r\nimport SampleList from './SampleList';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { toast } from 'react-toastify';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: 'bottom',\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: 'center',\r\n  },\r\n  column: {\r\n    flexBasis: '20.33%',\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: 'none',\r\n    '&:hover': {\r\n      textDecoration: 'underline',\r\n    },\r\n  },\r\n});\r\n\r\n\r\nfunction PatientCard(props) {\r\n    let history = useHistory();\r\n    const [labObj, setLabObj] = useState({});\r\n    const { classes } = props;\r\n\r\n    const patientObj = history.location && history.location.state ? history.location.state : {}\r\n    //console.log(\"pobj\", patientObj.orderId)\r\n\r\n    const loadData = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${url}laboratory/orders/${patientObj.orderId}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            //console.log(\"lab test obj\", response);\r\n            setLabObj(response.data);\r\n        } catch (e) {\r\n            toast.error(\"An error occurred while fetching lab\", {\r\n                position: toast.POSITION.TOP_RIGHT\r\n            });\r\n        }\r\n    }, []);\r\n\r\n     useEffect(() => {\r\n         loadData();\r\n     }, [loadData]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Card >\r\n        <CardContent>\r\n        {\r\n            Object.entries(labObj).length !== 0 ?\r\n            <>\r\n            <PatientCardDetail patientObj={labObj}/>\r\n            <br/>\r\n            <SampleList  patientObj={labObj}/>\r\n            </>\r\n            : \"Loading..\"\r\n        }\r\n         </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default withStyles(styles)(PatientCard);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {Modal,ModalHeader, ModalBody,Form,FormFeedback,Row,Alert,Col,Input,FormGroup,Label,Card,CardBody,Table} from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/styles.css\";\r\nimport {Icon, List, Label as LabelSui} from 'semantic-ui-react'\r\nimport moment from \"moment\";\r\nimport { url } from \"../../../../api\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        \"& > *\": {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    input: {\r\n        display: \"none\",\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"12.8px\",\r\n    },\r\n}));\r\n\r\nconst ModalSample = (props) => {\r\n    const classes = useStyles()\r\n\r\n    const [loading, setLoading] = useState(false)\r\n    const [visible, setVisible] = useState(true);\r\n    const onDismiss = () => setVisible(false);\r\n    const [samples, setSamples] = useState({});\r\n    const [otherfields, setOtherFields] = useState({test:\"\",encounterDate:\"\",encounterTime:\"\",testGroup:\"\", priority:\"\", sampleOrderedBy:\"\"});\r\n    //This is to get SAMPLE TYPE from application Codeset\r\n    const [errors, setErrors] = useState({});\r\n    const [testOrders, settestOrders] = useState([]);\r\n    const [locationListArray2, setLocationListArray2] = useState([])\r\n\r\n    useEffect(() => {\r\n       \r\n    }, []);\r\n\r\n    const addOrder = e => { \r\n        if(validate()){ \r\n        const alltestOrders = [...testOrders, otherfields];\r\n        settestOrders(alltestOrders);\r\n        console.log(alltestOrders)\r\n        }else{\r\n\r\n            return;\r\n        }\r\n        \r\n    }\r\n\r\n    const handleOtherFieldInputChange = (e) => {\r\n        \r\n        setOtherFields({ ...otherfields, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    /* Remove Relative Location function **/\r\n    const removeTestOrders = index => {       \r\n        testOrders.splice(index, 1);\r\n        settestOrders([...testOrders]);\r\n       \r\n    };\r\n    /*****  Validation */\r\n    const validate = () => {\r\n        let temp = { ...errors };\r\n        temp.test = otherfields.test\r\n            ? \"\"\r\n            : \"This field is required.\";\r\n        temp.encounterDate = otherfields.encounterDate\r\n            ? \"\"\r\n            : \"This field is required.\";\r\n        temp.encounterTime = otherfields.encounterTime ? \"\" : \"This field is required.\";\r\n        temp.testGroup = otherfields.testGroup\r\n            ? \"\"\r\n            : \"This field is required.\";\r\n        temp.priority = otherfields.priority ? \"\" : \"This field is required.\";\r\n        temp.sampleOrderedBy = otherfields.sampleOrderedBy ? \"\" : \"This field is required.\";\r\n        setErrors({\r\n            ...temp,\r\n        });\r\n        return Object.values(temp).every((x) => x == \"\");\r\n    };\r\n    const saveSample = (e) => {\r\n        e.preventDefault();\r\n        if (validate()) {\r\n            setLoading(true);\r\n            \r\n           \r\n            /* end of the process */\r\n            const onSuccess = () => {\r\n                setLoading(false);\r\n                props.togglestatus();\r\n            };\r\n            const onError = () => {\r\n                setLoading(false);\r\n                props.togglestatus();\r\n            };\r\n\r\n            //return console.log(datasample)\r\n            //props.createCollectedSample(datasample, labId, onSuccess, onError);\r\n        }\r\n    };\r\n    console.log(testOrders.length >0)\r\n\r\n    return (\r\n        <div >\r\n            <Card >\r\n                <CardBody>\r\n                    <Modal isOpen={props.modalstatus} toggle={props.togglestatus} className={props.className} size=\"xl\">\r\n                        <Form onSubmit={saveSample}>\r\n                            <ModalHeader toggle={props.togglestatus}>Create Test Order </ModalHeader>\r\n                            <ModalBody>\r\n                               \r\n                                <Card >\r\n                                    <CardBody>\r\n                                        <Row >\r\n                                            \r\n                                            <Col md={5}>\r\n                                                <FormGroup>\r\n                                                    <Label for='maritalStatus'>Test Order Date</Label>\r\n                                                    <Input\r\n                                                        type=\"date\"\r\n                                                        name=\"encounterDate\"\r\n                                                        id=\"encounterDate\"\r\n                                                        vaule={otherfields.encounterDate}\r\n                                                        onChange={handleOtherFieldInputChange}\r\n                                                       \r\n                                                    ></Input>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col md={5}>\r\n                                                <FormGroup>\r\n                                                    <Label for='maritalStatus'>Test Order Time </Label>\r\n                                                    <Input\r\n                                                        type=\"time\"\r\n                                                        name=\"encounterTime\"\r\n                                                        id=\"encounterTime\"\r\n                                                        onChange={handleOtherFieldInputChange}\r\n                                                    ></Input>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col md={2}></Col>\r\n                                            <Col md={5}>\r\n                                                <FormGroup>\r\n                                                    <Label for=\"maritalStatus\">Test Order Type</Label>\r\n                                                        <select\r\n                                                            defaultValue={\"option\"}\r\n                                                            onChange={handleOtherFieldInputChange}\r\n                                                            className=\"form-control\"\r\n                                                            name=\"testGroup\"\r\n                                                            id=\"testGroup\"\r\n                                                        >\r\n                                                        <option value=\"option\" disabled>\r\n                                                        Choose...\r\n                                                        </option>\r\n                                                       \r\n                                                        <option>Option 3</option>\r\n                                                        </select>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col md={5}>\r\n                                                <FormGroup>\r\n                                                    <Label for=\"occupation\">Priority* </Label>\r\n                                                    <select\r\n                                                        defaultValue={\"option\"}\r\n                                                        onChange={handleOtherFieldInputChange}\r\n                                                        className=\"form-control\"\r\n                                                        name=\"priority\"\r\n                                                        id=\"priority\"\r\n                                                    >\r\n                                                        <option value=\"option\" disabled>\r\n                                                        Choose...\r\n                                                        </option>\r\n                                                        <option>Normal</option>\r\n                                                        <option>Emergency</option>\r\n                                                       \r\n                                                    </select>\r\n                                                    \r\n                                                    <FormFeedback>\r\n                                                        {errors.sample_collected_by}\r\n                                                    </FormFeedback>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col md={2}></Col>\r\n                                            <Col md={5} className='float-right mr-1'>\r\n                                                <FormGroup>\r\n                                                    <Label for=\"occupation\">Test* </Label>\r\n\r\n                                                    <select\r\n                                                        defaultValue={\"option\"}\r\n                                                        id=\"test\"\r\n                                                        className=\"form-control\"\r\n                                                        name=\"test\"\r\n                                                        onChange={handleOtherFieldInputChange}\r\n                                                    >\r\n                                                        <option value=\"option\" disabled>\r\n                                                        Choose...\r\n                                                        </option>\r\n                                                        \r\n                                                        <option>Option 3</option>\r\n                                                    </select>\r\n                                                    <FormFeedback>\r\n                                                        {errors.sample_collected_by}\r\n                                                    </FormFeedback>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            \r\n                                            <Col md={5}>\r\n                                                <FormGroup>\r\n                                                    <Label for=\"occupation\">Test Order By* </Label>\r\n\r\n                                                        <select\r\n                                                            defaultValue={\"option\"}\r\n                                                            id=\"sampleOrderedBy\"\r\n                                                            className=\"form-control\"\r\n                                                            name=\"sampleOrderedBy\"\r\n                                                            onChange={handleOtherFieldInputChange}\r\n                                                        >\r\n                                                            <option value=\"option\" disabled>\r\n                                                            Choose...\r\n                                                            </option>\r\n                                                           \r\n                                                            <option>Option 3</option>\r\n                                                        </select>\r\n                                                    <FormFeedback>\r\n                                                        {errors.sample_collected_by}\r\n                                                    </FormFeedback>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col md={2}>\r\n\r\n                                                <LabelSui as='a' color='black' onClick={addOrder}   size='small' style={{ marginTop:35}}>\r\n                                                    <Icon name='plus' /> Add Order\r\n                                                </LabelSui>\r\n                                            </Col>\r\n                                            <hr/>\r\n                                            <br />\r\n                                            <Col md={12}>\r\n                                                  <div className={classes.demo}>\r\n                                                  {testOrders.length >0 \r\n                                                    ?\r\n                                                      <List>\r\n                                                      <Table  striped responsive>\r\n                                                            <thead >\r\n                                                                <tr>\r\n                                                                    <th>Test</th>\r\n                                                                    <th>Test Group</th>\r\n                                                                    <th >Order By</th>\r\n                                                                </tr>\r\n                                                            </thead>\r\n                                                            <tbody>\r\n                                                            {testOrders.map((testOrders, index) => (\r\n\r\n                                                                <TestOrderList\r\n                                                                    key={index}\r\n                                                                    index={index}\r\n                                                                    testOrders={testOrders}\r\n                                                                    removeTestOrders={removeTestOrders}\r\n                                                                />\r\n                                                          ))}\r\n                                                          </tbody>\r\n                                                        </Table>\r\n                                                      </List>\r\n                                                     :\r\n                                                     \"\"\r\n                                                  }               \r\n                                                  </div>\r\n                                            </Col>\r\n                                            <br />\r\n                                            <Col md={12}>\r\n                                                {loading ? (\r\n                                                    <>\r\n                                                        <Spinner /> <p> &nbsp;&nbsp;Processing...</p>\r\n                                                    </>\r\n                                                ) : (\r\n                                                    \"\"\r\n                                                )}\r\n                                            </Col>\r\n                                        </Row>\r\n                                        \r\n                                            <MatButton\r\n                                                type=\"submit\"\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.button}\r\n                                                startIcon={<SaveIcon />}\r\n                                                disabled={testOrders.length >0 ===true ? false : \"true\"}\r\n                                            >\r\n                                                Save\r\n                                            </MatButton>\r\n                                     \r\n                                        <MatButton\r\n                                            variant=\"contained\"\r\n                                            color=\"default\"\r\n                                            onClick={props.togglestatus}\r\n                                            className={classes.button}\r\n                                            startIcon={<CancelIcon />}\r\n                                        >\r\n                                            Cancel\r\n                                        </MatButton>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </ModalBody>\r\n                        </Form>\r\n                    </Modal>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nfunction TestOrderList({\r\n    testOrders,\r\n    index,\r\n    removeTestOrders,\r\n  }) {\r\n    function displayDetail (detailObj){\r\n\r\n        return(\r\n            <>\r\n                  <List>\r\n                    {detailObj.name!==null && detailObj.name!==\"\" ? (\r\n                    <List.Item>\r\n                    <List.Icon name='user' />\r\n                    <List.Content>{detailObj.name}</List.Content>\r\n                    </List.Item>\r\n                    ) :\r\n                    \"\"\r\n                    }\r\n                    {detailObj.address!==null && detailObj.address!==\"\" ? (\r\n                    <List.Item>\r\n                    <List.Icon name='marker' />\r\n                    <List.Content> {detailObj.address}</List.Content>\r\n                    </List.Item>\r\n                    ) :\r\n                    \"\"\r\n                    }\r\n                    {detailObj.email!==null && detailObj.email!==\"\"? (\r\n                    <List.Item>\r\n                    <List.Icon name='mail' />\r\n                    <List.Content>\r\n                        {detailObj.email}\r\n                    </List.Content>\r\n                    </List.Item>\r\n                    ) :\r\n                    \"\"\r\n                    }\r\n                    {detailObj.phone!==null && detailObj.phone!==\"\"? (\r\n                    <List.Item>\r\n                    <List.Icon name='phone' />\r\n                    <List.Content>\r\n                        {detailObj.phone}\r\n                    </List.Content>\r\n                    </List.Item>\r\n                    ) :\r\n                    \"\"\r\n                    }\r\n                </List>  \r\n            </>\r\n        )\r\n    }\r\n    return (\r\n            <tr>\r\n                <th>{testOrders.test}</th>\r\n                <th>{testOrders.testGroup}</th>\r\n                <th></th>\r\n                <th >\r\n                    <IconButton aria-label=\"delete\" size=\"small\" color=\"error\" onClick={() =>removeTestOrders(index)}>\r\n                        <DeleteIcon fontSize=\"inherit\" />\r\n                    </IconButton>\r\n                    \r\n                </th>\r\n            </tr> \r\n    );\r\n  }\r\n\r\nexport default ModalSample;\r\n","import React, { Fragment } from \"react\";\r\n// BS\r\nimport { Dropdown, Nav, Tab } from \"react-bootstrap\";\r\n/// Scroll\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\nimport { Link } from \"react-router-dom\";\r\n// images\r\n\r\n// Page titie\r\n\r\n\r\nconst RecentActivities = () => {\r\n  return (\r\n    <Fragment>\r\n      {/* <Ext /> */}\r\n     \r\n      <div className=\"row\">\r\n      <div className=\"col-xl-4 col-xxl-4 col-lg-4\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header  border-0 pb-0\">\r\n              <h4 className=\"card-title\">Test Orders</h4>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <PerfectScrollbar\r\n                style={{ height: \"370px\" }}\r\n                id=\"DZ_W_Todo1\"\r\n                className=\"widget-media dz-scroll ps ps--active-y\"\r\n              >\r\n                <ul className=\"timeline\">\r\n                  <li>\r\n                    <div className=\"timeline-panel\">\r\n                      <div className=\"media me-2\">\r\n                        <img  alt=\"\" width=\"50\"  />\r\n                      </div>\r\n                      <div className=\"media-body\">\r\n                        <h5 className=\"mb-1\">Biochemistry</h5>\r\n                        <small className=\"d-block\">\r\n                          29 July 2022 - 02:26 PM\r\n                        </small>\r\n                      </div>\r\n                      <Dropdown className=\"dropdown\">\r\n                        <Dropdown.Toggle\r\n                          variant=\"primary light\"\r\n                          className=\" i-false p-0 sharp\"\r\n                        >\r\n                          <svg\r\n                            width=\"18px\"\r\n                            height=\"18px\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            version=\"1.1\"\r\n                          >\r\n                            <g\r\n                              stroke=\"none\"\r\n                              strokeWidth=\"1\"\r\n                              fill=\"none\"\r\n                              fillRule=\"evenodd\"\r\n                            >\r\n                              <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\r\n                              <circle fill=\"#000000\" cx=\"5\" cy=\"12\" r=\"2\" />\r\n                              <circle fill=\"#000000\" cx=\"12\" cy=\"12\" r=\"2\" />\r\n                              <circle fill=\"#000000\" cx=\"19\" cy=\"12\" r=\"2\" />\r\n                            </g>\r\n                          </svg>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu className=\"dropdown-menu\">\r\n                          <Dropdown.Item\r\n                            className=\"dropdown-item\"\r\n                            to=\"/widget-basic\"\r\n                          >\r\n                            Edit\r\n                          </Dropdown.Item>\r\n                          <Dropdown.Item\r\n                            className=\"dropdown-item\"\r\n                            to=\"/widget-basic\"\r\n                          >\r\n                            Delete\r\n                          </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                      </Dropdown>\r\n                    </div>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-panel\">\r\n                      <div className=\"media me-2 media-info\">RA</div>\r\n                      <div className=\"media-body\">\r\n                        <h5 className=\"mb-1\">Sample Collection</h5>\r\n                        <small className=\"d-block\">\r\n                          29 July 2022 - 02:26 PM\r\n                        </small>\r\n                      </div>\r\n                      <Dropdown className=\"dropdown\">\r\n                        <Dropdown.Toggle\r\n                          variant=\" light\"\r\n                          className=\"i-false p-0 btn-info sharp\"\r\n                        >\r\n                          <svg\r\n                            width=\"18px\"\r\n                            height=\"18px\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            version=\"1.1\"\r\n                          >\r\n                            <g\r\n                              stroke=\"none\"\r\n                              strokeWidth=\"1\"\r\n                              fill=\"none\"\r\n                              fillRule=\"evenodd\"\r\n                            >\r\n                              <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\r\n                              <circle fill=\"#000000\" cx=\"5\" cy=\"12\" r=\"2\" />\r\n                              <circle fill=\"#000000\" cx=\"12\" cy=\"12\" r=\"2\" />\r\n                              <circle fill=\"#000000\" cx=\"19\" cy=\"12\" r=\"2\" />\r\n                            </g>\r\n                          </svg>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu className=\"dropdown-menu\">\r\n                          <Dropdown.Item\r\n                            className=\"dropdown-item\"\r\n                            to=\"/widget-basic\"\r\n                          >\r\n                            Edit\r\n                          </Dropdown.Item>\r\n                          <Dropdown.Item\r\n                            className=\"dropdown-item\"\r\n                            to=\"/widget-basic\"\r\n                          >\r\n                            Delete\r\n                          </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                      </Dropdown>\r\n                    </div>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-panel\">\r\n                      <div className=\"media me-2 media-success\">\r\n                        <i className=\"fa fa-home\"></i>\r\n                      </div>\r\n                      <div className=\"media-body\">\r\n                        <h5 className=\"mb-1\">Lab Test Order</h5>\r\n                        <small className=\"d-block\">\r\n                          29 July 2022 - 02:26 PM\r\n                        </small>\r\n                      </div>\r\n                      <Dropdown className=\"dropdown\">\r\n                        <Dropdown.Toggle\r\n                          variant=\" light\"\r\n                          className=\" i-false p-0 btn-success sharp\"\r\n                        >\r\n                          <svg\r\n                            width=\"18px\"\r\n                            height=\"18px\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            version=\"1.1\"\r\n                          >\r\n                            <g\r\n                              stroke=\"none\"\r\n                              strokeWidth=\"1\"\r\n                              fill=\"none\"\r\n                              fillRule=\"evenodd\"\r\n                            >\r\n                              <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\r\n                              <circle fill=\"#000000\" cx=\"5\" cy=\"12\" r=\"2\" />\r\n                              <circle fill=\"#000000\" cx=\"12\" cy=\"12\" r=\"2\" />\r\n                              <circle fill=\"#000000\" cx=\"19\" cy=\"12\" r=\"2\" />\r\n                            </g>\r\n                          </svg>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu className=\"dropdown-menu\">\r\n                          <Dropdown.Item\r\n                            className=\"dropdown-item\"\r\n                            to=\"/widget-basic\"\r\n                          >\r\n                            Edit\r\n                          </Dropdown.Item>\r\n                          <Dropdown.Item\r\n                            className=\"dropdown-item\"\r\n                            to=\"/widget-basic\"\r\n                          >\r\n                            Delete\r\n                          </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                      </Dropdown>\r\n                    </div>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-panel\">\r\n                      <div className=\"media me-2\">\r\n                        <img  alt=\"\" width=\"50\"  />\r\n                      </div>\r\n                      <div className=\"media-body\">\r\n                        <h5 className=\"mb-1\">Dr sultads Send you Photo</h5>\r\n                        <small className=\"d-block\">\r\n                          29 July 2020 - 02:26 PM\r\n                        </small>\r\n                      </div>\r\n                      <Dropdown className=\"dropdown\">\r\n                        <Dropdown.Toggle\r\n                          variant=\"primary light\"\r\n                          className=\" i-false p-0 sharp\"\r\n                        >\r\n                          <svg\r\n                            width=\"18px\"\r\n                            height=\"18px\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            version=\"1.1\"\r\n                          >\r\n                            <g\r\n                              stroke=\"none\"\r\n                              strokeWidth=\"1\"\r\n                              fill=\"none\"\r\n                              fillRule=\"evenodd\"\r\n                            >\r\n                              <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\r\n                              <circle fill=\"#000000\" cx=\"5\" cy=\"12\" r=\"2\" />\r\n                              <circle fill=\"#000000\" cx=\"12\" cy=\"12\" r=\"2\" />\r\n                              <circle fill=\"#000000\" cx=\"19\" cy=\"12\" r=\"2\" />\r\n                            </g>\r\n                          </svg>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu className=\"dropdown-menu\">\r\n                          <Dropdown.Item\r\n                            className=\"dropdown-item\"\r\n                            to=\"/widget-basic\"\r\n                          >\r\n                            Edit\r\n                          </Dropdown.Item>\r\n                          <Dropdown.Item\r\n                            className=\"dropdown-item\"\r\n                            to=\"/widget-basic\"\r\n                          >\r\n                            Delete\r\n                          </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                      </Dropdown>\r\n                    </div>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-panel\">\r\n                      <div className=\"media me-2 media-danger\">RA</div>\r\n                      <div className=\"media-body\">\r\n                        <h5 className=\"mb-1\">Clinic Visit</h5>\r\n                        <small className=\"d-block\">\r\n                          29 July 2020 - 02:26 PM\r\n                        </small>\r\n                      </div>\r\n                      <Dropdown className=\"dropdown\">\r\n                        <Dropdown.Toggle\r\n                          type=\"button\"\r\n                          className=\"btn btn-danger light sharp   i-false p-0 sharp \"\r\n                          data-toggle=\"dropdown\"\r\n                        >\r\n                          <svg\r\n                            width=\"18px\"\r\n                            height=\"18px\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            version=\"1.1\"\r\n                          >\r\n                            <g\r\n                              stroke=\"none\"\r\n                              strokeWidth=\"1\"\r\n                              fill=\"none\"\r\n                              fillRule=\"evenodd\"\r\n                            >\r\n                              <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\r\n                              <circle fill=\"#000000\" cx=\"5\" cy=\"12\" r=\"2\" />\r\n                              <circle fill=\"#000000\" cx=\"12\" cy=\"12\" r=\"2\" />\r\n                              <circle fill=\"#000000\" cx=\"19\" cy=\"12\" r=\"2\" />\r\n                            </g>\r\n                          </svg>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu className=\"dropdown-menu\">\r\n                          <Dropdown.Item\r\n                            className=\"dropdown-item\"\r\n                            to=\"/widget-basic\"\r\n                          >\r\n                            Edit\r\n                          </Dropdown.Item>\r\n                          <Dropdown.Item\r\n                            className=\"dropdown-item\"\r\n                            to=\"/widget-basic\"\r\n                          >\r\n                            Delete\r\n                          </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                      </Dropdown>\r\n                    </div>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-panel\">\r\n                      <div className=\"media me-2 media-primary\">\r\n                        <i className=\"fa fa-home\"></i>\r\n                      </div>\r\n                      <div className=\"media-body\">\r\n                        <h5 className=\"mb-1\">Clinic Visit</h5>\r\n                        <small className=\"d-block\">\r\n                          29 July 2020 - 02:26 PM\r\n                        </small>\r\n                      </div>\r\n                      <Dropdown className=\"dropdown\">\r\n                        <Dropdown.Toggle\r\n                          variant=\"primary light\"\r\n                          className=\" i-false p-0 sharp\"\r\n                        >\r\n                          <svg\r\n                            width=\"18px\"\r\n                            height=\"18px\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            version=\"1.1\"\r\n                          >\r\n                            <g\r\n                              stroke=\"none\"\r\n                              strokeWidth=\"1\"\r\n                              fill=\"none\"\r\n                              fillRule=\"evenodd\"\r\n                            >\r\n                              <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\r\n                              <circle fill=\"#000000\" cx=\"5\" cy=\"12\" r=\"2\" />\r\n                              <circle fill=\"#000000\" cx=\"12\" cy=\"12\" r=\"2\" />\r\n                              <circle fill=\"#000000\" cx=\"19\" cy=\"12\" r=\"2\" />\r\n                            </g>\r\n                          </svg>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu className=\"dropdown-menu\">\r\n                          <Dropdown.Item\r\n                            className=\"dropdown-item\"\r\n                            to=\"/widget-basic\"\r\n                          >\r\n                            Edit\r\n                          </Dropdown.Item>\r\n                          <Dropdown.Item\r\n                            className=\"dropdown-item\"\r\n                            to=\"/widget-basic\"\r\n                          >\r\n                            Delete\r\n                          </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                      </Dropdown>\r\n                    </div>\r\n                  </li>\r\n                </ul>\r\n              </PerfectScrollbar>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-xl-4 col-xxl-4 col-lg-4\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header border-0 pb-0\">\r\n              <h4 className=\"card-title\">Sample Collection Status</h4>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <PerfectScrollbar\r\n                style={{ height: \"370px\" }}\r\n                id=\"DZ_W_TimeLine\"\r\n                className=\"widget-timeline dz-scroll height370 ps ps--active-y\"\r\n              >\r\n                <ul className=\"timeline\">\r\n                  <li>\r\n                    <div className=\"timeline-badge primary\"></div>\r\n                    <Link\r\n                      className=\"timeline-panel text-muted\"\r\n                      to=\"/widget-basic\"\r\n                    >\r\n                      <span>10 Days ago</span>\r\n                      <h6 className=\"mb-0\">\r\n                        Date Sample Collected{\" \"}<br/>\r\n                        <strong className=\"text-primary\">04 Nov, 2021</strong>.\r\n                      </h6>\r\n                      <h6 className=\"mb-0\">\r\n                        Date Assay{\" \"}<br/>\r\n                        <strong className=\"text-primary\">04 Nov, 2021</strong>.\r\n                      </h6>\r\n                      <h6 className=\"mb-0\">\r\n                        Date Result Received{\" \"}<br/>\r\n                        <strong className=\"text-primary\">04 Nov, 2021</strong>.\r\n                      </h6>\r\n                    </Link>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge info\"></div>\r\n                    <Link\r\n                      className=\"timeline-panel text-muted\"\r\n                      to=\"/widget-basic\"\r\n                    >\r\n                      <span>10 Days ago</span>\r\n                      <h6 className=\"mb-0\">\r\n                        Date Sample Collected{\" \"}<br/>\r\n                        <strong className=\"text-primary\">04 Nov, 2021</strong>.\r\n                      </h6>\r\n                      <h6 className=\"mb-0\">\r\n                        Date Assay{\" \"}<br/>\r\n                        <strong className=\"text-primary\">04 Nov, 2021</strong>.\r\n                      </h6>\r\n                      <h6 className=\"mb-0\">\r\n                        Date Result Received{\" \"}<br/>\r\n                        <strong className=\"text-primary\">04 Nov, 2021</strong>.\r\n                      </h6>\r\n                    </Link>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge danger\"></div>\r\n                    <Link\r\n                      className=\"timeline-panel text-muted\"\r\n                      to=\"/widget-basic\"\r\n                    >\r\n                       <span>10 Days ago</span>\r\n                      <h6 className=\"mb-0\">\r\n                        Date Sample Collected{\" \"}<br/>\r\n                        <strong className=\"text-primary\">04 Nov, 2021</strong>.\r\n                      </h6>\r\n                      <h6 className=\"mb-0\">\r\n                        Date Assay{\" \"}<br/>\r\n                        <strong className=\"text-primary\">04 Nov, 2021</strong>.\r\n                      </h6>\r\n                      <h6 className=\"mb-0\">\r\n                        Date Result Received{\" \"}<br/>\r\n                        <strong className=\"text-primary\">04 Nov, 2021</strong>.\r\n                      </h6>\r\n                    </Link>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge success\"></div>\r\n                    <Link\r\n                      className=\"timeline-panel text-muted\"\r\n                      to=\"/widget-basic\"\r\n                    >\r\n                       <span>10 Days ago</span>\r\n                      <h6 className=\"mb-0\">\r\n                        Date Sample Collected{\" \"}<br/>\r\n                        <strong className=\"text-primary\">04 Nov, 2021</strong>.\r\n                      </h6>\r\n                      <h6 className=\"mb-0\">\r\n                        Date Assay{\" \"}<br/>\r\n                        <strong className=\"text-primary\">04 Nov, 2021</strong>.\r\n                      </h6>\r\n                      <h6 className=\"mb-0\">\r\n                        Date Result Received{\" \"}<br/>\r\n                        <strong className=\"text-primary\">04 Nov, 2021</strong>.\r\n                      </h6>\r\n                    </Link>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge warning\"></div>\r\n                    <Link\r\n                      className=\"timeline-panel text-muted\"\r\n                      to=\"/widget-basic\"\r\n                    >\r\n                       <span>10 Days ago</span>\r\n                      <h6 className=\"mb-0\">\r\n                        Date Sample Collected{\" \"}<br/>\r\n                        <strong className=\"text-primary\">04 Nov, 2021</strong>.\r\n                      </h6>\r\n                      <h6 className=\"mb-0\">\r\n                        Date Assay{\" \"}<br/>\r\n                        <strong className=\"text-primary\">04 Nov, 2021</strong>.\r\n                      </h6>\r\n                      <h6 className=\"mb-0\">\r\n                        Date Result Received{\" \"}<br/>\r\n                        <strong className=\"text-primary\">04 Nov, 2021</strong>.\r\n                      </h6>\r\n                    </Link>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge dark\"></div>\r\n                    <Link\r\n                      className=\"timeline-panel text-muted\"\r\n                      to=\"/widget-basic\"\r\n                    >\r\n                       <span>10 Days ago</span>\r\n                      <h6 className=\"mb-0\">\r\n                        Date Sample Collected{\" \"}<br/>\r\n                        <strong className=\"text-primary\">04 Nov, 2021</strong>.\r\n                      </h6>\r\n                      <h6 className=\"mb-0\">\r\n                        Date Assay{\" \"}<br/>\r\n                        <strong className=\"text-primary\">04 Nov, 2021</strong>.\r\n                      </h6>\r\n                      <h6 className=\"mb-0\">\r\n                        Date Result Received{\" \"}<br/>\r\n                        <strong className=\"text-primary\">04 Nov, 2021</strong>.\r\n                      </h6>\r\n                    </Link>\r\n                  </li>\r\n                </ul>\r\n              </PerfectScrollbar>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-xl-4 col-xxl-4 col-lg-4\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header border-0 pb-0\">\r\n              <h4 className=\"card-title\">Result Reporting</h4>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <PerfectScrollbar\r\n                style={{ height: \"370px\" }}\r\n                id=\"DZ_W_TimeLine1\"\r\n                className=\"widget-timeline dz-scroll style-1 height370 ps ps--active-y\"\r\n              >\r\n                <ul className=\"timeline\">\r\n                  <li>\r\n                    <div className=\"timeline-badge primary\"></div>\r\n                    <Link\r\n                      className=\"timeline-panel text-muted\"\r\n                      to=\"/widget-basic\"\r\n                    >\r\n                     <span>20 Days ago</span>\r\n                      <h6 className=\"mb-0\">\r\n                      Current Regimen\r\n                        TDF(300mg)+3TC(300mg)+DTG(50mg){\" \"}\r\n                        <strong className=\"text-info\">Current Regimen Line<br/>\r\n                        ART First Line Adult</strong>\r\n                      </h6>\r\n                      <p className=\"mb-0\">\r\n                        Refill Date<br/>\r\n                        08 Jan, 2022\r\n                      </p>\r\n                      <strong className=\"text-warning\">\r\n                          Next Appointment<br/>\r\n                        05 Jul, 2022\r\n                     </strong><br/>\r\n                     <strong className=\"text-primary\">\r\n                        Refill Duration<br/>\r\n                        180\r\n                     </strong><br/>\r\n                     <strong className=\"text-teal\">\r\n                     Refill Duration<br/>\r\n                        180\r\n                     </strong>\r\n                     <strong className=\"mb-0\">\r\n                     IPT<br/>\r\n                    Isoniazid Preventive Therapy (IPT)\r\n                    </strong><br/>\r\n                    <strong className=\"mb-0\">\r\n                    IPT Date<b/>\r\n                    08 Jan, 2022\r\n                    </strong>\r\n                    \r\n\r\n                    </Link>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge info\"></div>\r\n                    <Link\r\n                      className=\"timeline-panel text-muted\"\r\n                      to=\"/widget-basic\"\r\n                    >\r\n                      <span>20 Days ago</span>\r\n                      <h6 className=\"mb-0\">\r\n                      Current Regimen\r\n                        TDF(300mg)+3TC(300mg)+DTG(50mg){\" \"}\r\n                        <strong className=\"text-info\">Current Regimen Line<br/>\r\n                        ART First Line Adult</strong>\r\n                      </h6>\r\n                      <p className=\"mb-0\">\r\n                        Refill Date<br/>\r\n                        08 Jan, 2022\r\n                      </p>\r\n                      <strong className=\"text-warning\">\r\n                          Next Appointment<br/>\r\n                        05 Jul, 2022\r\n                     </strong><br/>\r\n                     <strong className=\"text-primary\">\r\n                        Refill Duration<br/>\r\n                        180\r\n                     </strong><br/>\r\n                     <strong className=\"text-teal\">\r\n                     Refill Duration<br/>\r\n                        180\r\n                     </strong>\r\n                     <strong className=\"mb-0\">\r\n                     IPT<br/>\r\n                    Isoniazid Preventive Therapy (IPT)\r\n                    </strong><br/>\r\n                    <strong className=\"mb-0\">\r\n                    IPT Date<b/>\r\n                    08 Jan, 2022\r\n                    </strong>\r\n                    \r\n\r\n                    </Link>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge danger\"></div>\r\n                    <Link\r\n                      className=\"timeline-panel text-muted\"\r\n                      to=\"/widget-basic\"\r\n                    >\r\n                      <span>20 Days ago</span>\r\n                      <h6 className=\"mb-0\">\r\n                      Current Regimen\r\n                        TDF(300mg)+3TC(300mg)+DTG(50mg){\" \"}\r\n                        <strong className=\"text-info\">Current Regimen Line<br/>\r\n                        ART First Line Adult</strong>\r\n                      </h6>\r\n                      <p className=\"mb-0\">\r\n                        Refill Date<br/>\r\n                        08 Jan, 2022\r\n                      </p>\r\n                      <strong className=\"text-warning\">\r\n                          Next Appointment<br/>\r\n                        05 Jul, 2022\r\n                     </strong><br/>\r\n                     <strong className=\"text-primary\">\r\n                        Refill Duration<br/>\r\n                        180\r\n                     </strong><br/>\r\n                     <strong className=\"text-teal\">\r\n                     Refill Duration<br/>\r\n                        180\r\n                     </strong>\r\n                     <strong className=\"mb-0\">\r\n                     IPT<br/>\r\n                    Isoniazid Preventive Therapy (IPT)\r\n                    </strong><br/>\r\n                    <strong className=\"mb-0\">\r\n                    IPT Date<b/>\r\n                    08 Jan, 2022\r\n                    </strong>\r\n                    \r\n\r\n                    </Link>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge success\"></div>\r\n                    <Link\r\n                      className=\"timeline-panel text-muted\"\r\n                      to=\"/widget-basic\"\r\n                    >\r\n                      <span>20 Days ago</span>\r\n                      <h6 className=\"mb-0\">\r\n                      Current Regimen\r\n                        TDF(300mg)+3TC(300mg)+DTG(50mg){\" \"}\r\n                        <strong className=\"text-info\">Current Regimen Line<br/>\r\n                        ART First Line Adult</strong>\r\n                      </h6>\r\n                      <p className=\"mb-0\">\r\n                        Refill Date<br/>\r\n                        08 Jan, 2022\r\n                      </p>\r\n                      <strong className=\"text-warning\">\r\n                          Next Appointment<br/>\r\n                        05 Jul, 2022\r\n                     </strong><br/>\r\n                     <strong className=\"text-primary\">\r\n                        Refill Duration<br/>\r\n                        180\r\n                     </strong><br/>\r\n                     <strong className=\"text-teal\">\r\n                     Refill Duration<br/>\r\n                        180\r\n                     </strong>\r\n                     <strong className=\"mb-0\">\r\n                     IPT<br/>\r\n                    Isoniazid Preventive Therapy (IPT)\r\n                    </strong><br/>\r\n                    <strong className=\"mb-0\">\r\n                    IPT Date<b/>\r\n                    08 Jan, 2022\r\n                    </strong>\r\n                    \r\n\r\n                    </Link>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge warning\"></div>\r\n                    <Link\r\n                      className=\"timeline-panel text-muted\"\r\n                      to=\"/widget-basic\"\r\n                    >\r\n                      <span>20 Days ago</span>\r\n                      <h6 className=\"mb-0\">\r\n                      Current Regimen\r\n                        TDF(300mg)+3TC(300mg)+DTG(50mg){\" \"}\r\n                        <strong className=\"text-info\">Current Regimen Line<br/>\r\n                        ART First Line Adult</strong>\r\n                      </h6>\r\n                      <p className=\"mb-0\">\r\n                        Refill Date<br/>\r\n                        08 Jan, 2022\r\n                      </p>\r\n                      <strong className=\"text-warning\">\r\n                          Next Appointment<br/>\r\n                        05 Jul, 2022\r\n                     </strong><br/>\r\n                     <strong className=\"text-primary\">\r\n                        Refill Duration<br/>\r\n                        180\r\n                     </strong><br/>\r\n                     <strong className=\"text-teal\">\r\n                     Refill Duration<br/>\r\n                        180\r\n                     </strong>\r\n                     <strong className=\"mb-0\">\r\n                     IPT<br/>\r\n                    Isoniazid Preventive Therapy (IPT)\r\n                    </strong><br/>\r\n                    <strong className=\"mb-0\">\r\n                    IPT Date<b/>\r\n                    08 Jan, 2022\r\n                    </strong>\r\n                    \r\n\r\n                    </Link>\r\n                  </li>\r\n                  <li>\r\n                    <div className=\"timeline-badge dark\"></div>\r\n                    <Link\r\n                      className=\"timeline-panel text-muted\"\r\n                      to=\"/widget-basic\"\r\n                    >\r\n                      <span>20 Days ago</span>\r\n                      <h6 className=\"mb-0\">\r\n                      Current Regimen\r\n                        TDF(300mg)+3TC(300mg)+DTG(50mg){\" \"}\r\n                        <strong className=\"text-info\">Current Regimen Line<br/>\r\n                        ART First Line Adult</strong>\r\n                      </h6>\r\n                      <p className=\"mb-0\">\r\n                        Refill Date<br/>\r\n                        08 Jan, 2022\r\n                      </p>\r\n                      <strong className=\"text-warning\">\r\n                          Next Appointment<br/>\r\n                        05 Jul, 2022\r\n                     </strong><br/>\r\n                     <strong className=\"text-primary\">\r\n                        Refill Duration<br/>\r\n                        180\r\n                     </strong><br/>\r\n                     <strong className=\"text-teal\">\r\n                     Refill Duration<br/>\r\n                        180\r\n                     </strong>\r\n                     <strong className=\"mb-0\">\r\n                     IPT<br/>\r\n                    Isoniazid Preventive Therapy (IPT)\r\n                    </strong><br/>\r\n                    <strong className=\"mb-0\">\r\n                    IPT Date<b/>\r\n                    08 Jan, 2022\r\n                    </strong>\r\n                    \r\n\r\n                    </Link>\r\n                  </li>\r\n                </ul>\r\n              </PerfectScrollbar>\r\n            </div>\r\n          </div>\r\n        </div>\r\n       \r\n        \r\n </div>\r\n      \r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default RecentActivities;\r\n","\r\nimport React, {useEffect, useState} from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { Link } from 'react-router-dom'\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { forwardRef } from 'react';\r\nimport axios from \"axios\";\r\nimport { url as baseUrl } from \"./../../../../api\";\r\nimport CreateTestorder from './CreateTestorder'\r\nimport RecentActivities from './RecentActivities' \r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst formDataObj= [\r\n    {\r\n        \"id\": 1138,\r\n        \"data\": {\r\n            \"user_id\": \"\",\r\n            \"lab_number\": \"NG/CCRHS/133\",\r\n            \"patient_id\": 16,\r\n            \"description\": \"Viral Load\",\r\n            \"lab_test_id\": 16,\r\n            \"sample_type\": {\r\n                \"id\": 186,\r\n                \"code\": \"ee0947\",\r\n                \"display\": \"Blood\",\r\n                \"language\": \"en\",\r\n                \"codesetGroup\": \"SAMPLE_TYPE\"\r\n            },\r\n            \"lab_test_group\": \"Virology\",\r\n            \"order_priority\": {\r\n                \"id\": 295,\r\n                \"code\": \"6fca9e78-3305-43a5-a45e-dddb92aa4e6e\",\r\n                \"display\": \"NORMAL\",\r\n                \"language\": \"en\",\r\n                \"codesetGroup\": \"TEST_ORDER_PRIORITY\"\r\n            },\r\n            \"reported_result\": [\r\n                {\r\n                    \"date_asseyed\": \"\",\r\n                    \"result_reported_by\": \"\",\r\n                    \"date_result_reported\": null,\r\n                    \"time_result_reported\": \"\"\r\n                }\r\n            ],\r\n            \"unit_measurement\": \"copies/ml\",\r\n            \"lab_test_group_id\": 4,\r\n            \"sample_order_date\": \"2021-04-29\",\r\n            \"sample_order_time\": \"\",\r\n            \"sample_verified_by\": \"\",\r\n            \"sample_collected_by\": \"\",\r\n            \"date_result_reported\": null,\r\n            \"date_sample_verified\": \"\",\r\n            \"time_sample_Verified\": \"\",\r\n            \"date_sample_collected\": \"\",\r\n            \"lab_test_order_status\": 5,\r\n            \"time_sample_collected\": \"\",\r\n            \"viral_load_indication\": {\r\n                \"id\": 301,\r\n                \"code\": \"b97e4080-f1b0-4bf8-bb82-31b556152125\",\r\n                \"display\": \"Routine (every 12 months)\",\r\n                \"language\": null,\r\n                \"codeset_group\": \"VIRAL_LOAD_INDICATION\"\r\n            },\r\n            \"sample_collection_mode\": [],\r\n            \"comment_sample_verified\": \"\",\r\n            \"comment_sample_collected\": \"\"\r\n        },\r\n        \"encounterId\": 969,\r\n        \"organisationUnitByOrganisationUnitId\": {\r\n            \"id\": 1740,\r\n            \"name\": \"Minna OSS\",\r\n            \"description\": \"Facility in Chanchaga\",\r\n            \"organisationUnitLevelId\": 4,\r\n            \"parentOrganisationUnitId\": 582,\r\n            \"details\": null,\r\n            \"parentOrganisationUnitName\": null,\r\n            \"parentParentOrganisationUnitName\": null\r\n        },\r\n        \"uuid\": \"2d805cc0-05ad-4abc-8937-a0e0823ae1ce\"\r\n    }\r\n];\r\nconst PatientSearch = (props) => {\r\n    const [loading, setLoading] = useState('')\r\n    const [modal, setModal] = useState(false) //Modal for Creating Test Order\r\n    const toggleModal = () => setModal(!modal)\r\n    // useEffect(() => {\r\n    // setLoading('true');\r\n    //     const onSuccess = () => {\r\n    //         setLoading(false)\r\n    //     }\r\n    //     const onError = () => {\r\n    //         setLoading(false)     \r\n    //     }\r\n    //        // props.fetchAllLabTestOrderToday(onSuccess, onError);\r\n    // }, []); //componentDidMount\r\n    const handleSample = () => { \r\n        setModal(!modal) \r\n    }\r\n    const collectedSamples = []\r\n\r\n    formDataObj.forEach(function(value, index, array) {\r\n        const dataSamples = formDataObj \r\n        for(var i=0; i<dataSamples.length; i++){\r\n            for (var key in dataSamples[i]) {\r\n            \r\n            if (dataSamples[i][key]!==null && (dataSamples[i][key].lab_test_order_status >= 1  ))\r\n            collectedSamples.push(value)\r\n        }            \r\n          }\r\n    });\r\n    \r\n\r\n    \r\n  return (\r\n      <div>\r\n          <br/>\r\n          <MatButton\r\n                type='submit'\r\n                variant='contained'\r\n                color='primary'\r\n                onClick={() => handleSample()}                        \r\n                className=\" float-end mr-1\"\r\n            >\r\n              Create Test Order\r\n            </MatButton>\r\n            <br/>\r\n          <br/>\r\n         <RecentActivities />\r\n         <CreateTestorder modalstatus={modal} togglestatus={toggleModal} />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n  \r\nexport default PatientSearch;","import React from \"react\";\r\nimport {\r\n  MemoryRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\n\r\nimport { ToastContainer} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport \"./main/webapp/vendor/bootstrap-select/dist/css/bootstrap-select.min.css\";\r\nimport \"./../src/main/webapp/css/style.css\";\r\n\r\nimport Home from './main/webapp/jsx/components/Home'\r\nimport SampleCollection from './main/webapp/jsx/components/Laboratory/SampleCollection/Index';\r\nimport Sampleverifications from './main/webapp/jsx/components/Laboratory/Sampleverifications/Index'\r\nimport TestResult from './main/webapp/jsx/components/Laboratory/TestResult/Index';\r\nimport PatientTestOrderHistory from './main/webapp/jsx/components/Laboratory/LabTestOrder/PatientTestOrderHistory'\r\n\r\nexport default function App() {\r\n  return (\r\n\r\n      <div>\r\n      <ToastContainer />\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n        <Switch>\r\n         \r\n          <Route path=\"/test-order\">\r\n            <PatientTestOrderHistory />\r\n          </Route>\r\n          <Route path=\"/samples-collection\">\r\n            <SampleCollection />\r\n          </Route>\r\n          <Route path=\"/samples-verification\">\r\n            <Sampleverifications />\r\n          </Route>\r\n          <Route path=\"/result-reporting\">\r\n            <TestResult />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        \r\n          \r\n        </Switch>\r\n      </div>\r\n \r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","let direction = 'ltr';\r\n\r\nexport const dezThemeSet = [\r\n\t{ /* Default */\r\n\t\ttypography: \"poppins\",\r\n\t\tversion: \"light\",\r\n\t\tlayout: \"vertical\",\r\n\t\theaderBg: \"color_1\",\r\n\t\tnavheaderBg: \"color_1\",\r\n\t\tsidebarBg: \"color_1\",\r\n\t\tsidebarStyle: \"full\",\r\n\t\tsidebarPosition: \"fixed\",\r\n\t\theaderPosition: \"fixed\",\r\n\t\tcontainerLayout: \"full\",\r\n\t\tdirection: direction\r\n\t},\r\n\t{ /* Demo Theme 1 */\r\n\t\ttypography: \"poppins\",\r\n\t\tversion: \"light\",\r\n\t\tlayout: \"vertical\",\r\n\t\tprimary: \"color_5\",\r\n\t\theaderBg: \"color_5\",\r\n\t\tnavheaderBg: \"color_1\",\r\n\t\tsidebarBg: \"color_1\",\r\n\t\tsidebarStyle: \"full\",\r\n\t\tsidebarPosition: \"fixed\",\r\n\t\theaderPosition: \"fixed\",\r\n\t\tcontainerLayout: \"wide\",\r\n\t\tdirection: direction\r\n\t},\r\n\t { /* Demo Theme 2 */\r\n\t\ttypography: \"poppins\",\r\n\t\tversion: \"light\",\r\n\t\tlayout: \"vertical\",\r\n\t\tnavheaderBg: \"color_11\",\r\n\t\theaderBg: \"color_1\",\r\n\t\tsidebarBg: \"color_11\",\r\n\t\tsidebarStyle: \"full\",\r\n\t\tsidebarPosition: \"fixed\",\r\n\t\theaderPosition: \"fixed\",\r\n\t\tcontainerLayout: \"wide\",\r\n\t\tprimary: \"color_11\",\r\n\t\tdirection: direction\r\n\t},\r\n\t{\r\n\t\t/* Demo Theme 3 */\r\n\t\ttypography: \"poppins\",\r\n\t\tversion: \"dark\",\r\n\t\tlayout: \"vertical\",\r\n\t\theaderBg: \"color_3\",\r\n\t\tnavheaderBg: \"color_3\",\r\n\t\tsidebarBg: \"color_1\",\r\n\t\tsidebarStyle: \"full\",\r\n\t\tsidebarPosition: \"fixed\",\r\n\t\theaderPosition: \"fixed\",\r\n\t\tcontainerLayout: \"wide\",\r\n\t\tprimary: \"color_1\",\r\n\t\tdirection: direction\r\n\t},\r\n\t{\r\n\t\t/* Demo Theme 4 */\t\r\n\t\ttypography: \"poppins\",\r\n\t\tversion: \"light\",\r\n\t\tlayout: \"vertical\",\r\n\t\tnavheaderBg: \"color_15\",\r\n\t\theaderBg: \"color_1\",\r\n\t\tsidebarStyle: \"full\",\r\n\t\tsidebarBg: \"color_1\",\r\n\t\tsidebarPosition: \"fixed\",\r\n\t\theaderPosition: \"fixed\",\r\n\t\tcontainerLayout: \"wide\",\r\n\t\tprimary: \"color_15\",\r\n\t\tdirection: direction\r\n\t\t\r\n\t},\r\n\t{\r\n\t\t/* Demo Theme 5 */\r\n\t\ttypography: \"poppins\",\r\n\t\tversion: \"light\",\r\n\t\tlayout: \"horizontal\",\r\n\t\tnavheaderBg: \"color_1\",\r\n\t\theaderBg: \"color_1\",\r\n\t\tsidebarBg: \"color_9\",\r\n\t\tsidebarStyle: \"modern\",\r\n\t\tsidebarPosition: \"static\",\r\n\t\theaderPosition: \"fixed\",\r\n\t\tcontainerLayout: \"wide\",\r\n\t\tprimary: \"color_9\",\r\n\t\tdirection: direction\r\n\t},\r\n\t/* {\r\n\t\t//Demo Theme 6\r\n\t\ttypography: \"poppins\",\r\n\t\tversion: \"light\",\r\n\t\tlayout: \"vertical\",\r\n\t\tnavheaderBg: \"color_3\",\r\n\t\theaderBg: \"color_1\",\r\n\t\tsidebarStyle: \"mini\",\r\n\t\tsidebarBg: \"color_10\",\r\n\t\tsidebarPosition: \"fixed\",\r\n\t\theaderPosition: \"fixed\",\r\n\t\tcontainerLayout: \"wide\",\r\n\t\tprimary: \"color_1\",\r\n\t\tdirection: direction\r\n\t},\r\n\t{\r\n\t\t// Demo Theme 7 \r\n\t\ttypography: \"poppins\",\r\n\t\tversion: \"light\",\r\n\t\tlayout: \"vertical\",\r\n\t\tnavheaderBg: \"color_1\",\r\n\t\theaderBg: \"color_1\",\r\n\t\tsidebarStyle: \"compact\",\r\n\t\tsidebarBg: \"color_1\",\r\n\t\tsidebarPosition: \"fixed\",\r\n\t\theaderPosition: \"fixed\",\r\n\t\tcontainerLayout: \"wide\",\r\n\t\tprimary: \"color_6\",\r\n\t\tdirection: direction\r\n\t},\r\n\t{\r\n\t\t// Demo Theme 8 *\r\n\t\ttypography: \"poppins\",\r\n\t\tversion: \"light\",\r\n\t\tlayout: \"vertical\",\r\n\t\tnavheaderBg: \"color_15\",\r\n\t\theaderBg: \"color_1\",\r\n\t\tsidebarStyle: \"icon-hover\",\r\n\t\tsidebarBg: \"color_15\",\r\n\t\tsidebarPosition: \"fixed\",\r\n\t\theaderPosition: \"fixed\",\r\n\t\tcontainerLayout: \"wide\",\r\n\t\tprimary: \"color_15\",\r\n\t\tdirection: direction\r\n\t} */\r\n];\r\n\t","import React, { createContext, useEffect, useState } from \"react\";\r\nimport {dezThemeSet} from './ThemeDemo';\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nconst ThemeContextProvider = (props) => {\r\n\tconst [sideBarStyle, setSideBarStyle] = useState({ value: \"full\", label: \"Full\",});\r\n\tconst [sidebarposition, setSidebarposition] = useState({ value: \"fixed\",\tlabel: \"Fixed\",});\r\n    const [headerposition, setHeaderposition] = useState({ value: \"fixed\", label: \"Fixed\", });\r\n    const [sidebarLayout, setSidebarLayout] = useState({ value: \"vertical\", label: \"Vertical\",});\r\n\tconst [direction, setDirection] = useState({ value: \"ltr\", label: \"LTR\" });\r\n\tconst [primaryColor, setPrimaryColor] = useState(\"color_1\");\r\n\tconst [navigationHader, setNavigationHader] = useState(\"color_1\");\r\n\tconst [haderColor, setHaderColor] = useState(\"color_1\");\r\n\tconst [sidebarColor, setSidebarColor] = useState(\"color_1\");\r\n\tconst [iconHover, setIconHover] = useState(false);\r\n\tconst [menuToggle, setMenuToggle] = useState(false);\r\n\tconst [background, setBackground] = useState({ value: \"light\",\tlabel: \"Light\",});\r\n\tconst [containerPosition_, setcontainerPosition_] = useState({value: \"wide-boxed\", label: \"Wide Boxed\",});\r\n    const body = document.querySelector(\"body\");\r\n    const [windowWidth, setWindowWidth] = useState(0);\r\n    const [windowHeight, setWindowHeight] = useState(0);\r\n\r\n  // layout\r\n  const layoutOption = [\r\n    { value: \"vertical\", label: \"Vertical\" },\r\n    { value: \"horizontal\", label: \"Horizontal\" },\r\n  ];\r\n  const sideBarOption = [\r\n    { value: \"compact\", label: \"Compact\" },\r\n    { value: \"full\", label: \"Full\" },\r\n    { value: \"mini\", label: \"Mini\" },\r\n    { value: \"modern\", label: \"Modern\" },\r\n    { value: \"overlay\", label: \"Overlay\" },\r\n    { value: \"icon-hover\", label: \"Icon-hover\" },\r\n  ];\r\n  const backgroundOption = [\r\n    { value: \"light\", label: \"Light\" },\r\n    { value: \"dark\", label: \"Dark\" },\r\n  ];\r\n  const sidebarpositions = [\r\n    { value: \"fixed\", label: \"Fixed\" },\r\n    { value: \"static\", label: \"Static\" },\r\n  ];\r\n  const headerPositions = [\r\n    { value: \"fixed\", label: \"Fixed\" },\r\n    { value: \"static\", label: \"Static\" },\r\n  ];\r\n  const containerPosition = [\r\n    { value: \"wide-boxed\", label: \"Wide Boxed\" },\r\n    { value: \"boxed\", label: \"Boxed\" },\r\n    { value: \"wide\", label: \"Wide\" },\r\n  ];\r\n  const colors = [\r\n    \"color_1\",\r\n    \"color_2\",\r\n    \"color_3\",\r\n    \"color_4\",\r\n    \"color_5\",\r\n    \"color_6\",\r\n    \"color_7\",\r\n    \"color_8\",\r\n    \"color_9\",\r\n    \"color_10\",\r\n    \"color_11\",\r\n    \"color_12\",\r\n    \"color_13\",\r\n    \"color_14\",\r\n    \"color_15\",\r\n  ];\r\n  const directionPosition = [\r\n    { value: \"ltr\", label: \"LTR\" },\r\n    { value: \"rtl\", label: \"RTL\" },\r\n  ];\r\n  const fontFamily = [\r\n    { value: \"poppins\", label: \"Poppins\" },\r\n    { value: \"roboto\", label: \"Roboto\" },\r\n    { value: \"cairo\", label: \"Cairo\" },\r\n    { value: \"opensans\", label: \"Open Sans\" },\r\n    { value: \"HelveticaNeue\", label: \"HelveticaNeue\" },\r\n  ];\r\n  const changePrimaryColor = (name) => {\r\n\tsetPrimaryColor(name);\r\n    body.setAttribute(\"data-primary\", name);\r\n  };\r\n  const changeNavigationHader = (name) => {\r\n    setNavigationHader(name);\r\n    body.setAttribute(\"data-nav-headerbg\", name);\r\n  };\r\n  const chnageHaderColor = (name) => {\r\n    setHaderColor(name);\r\n    body.setAttribute(\"data-headerbg\", name);\r\n  };\r\n  const chnageSidebarColor = (name) => {\r\n    setSidebarColor(name);\r\n    body.setAttribute(\"data-sibebarbg\", name);\r\n  };\r\n  const changeSideBarPostion = (name) => {\r\n    setSidebarposition(name);\r\n    body.setAttribute(\"data-sidebar-position\", name.value);\r\n  };\r\n  const changeDirectionLayout = (name) => {\r\n    setDirection(name);\r\n    body.setAttribute(\"direction\", name.value);\r\n    let html = document.querySelector(\"html\");\r\n    html.setAttribute(\"dir\", name.value);\r\n    html.className = name.value;\r\n  };\r\n  const changeSideBarLayout = (name) => {\r\n    if (name.value === \"horizontal\") {\r\n      if (sideBarStyle.value === \"overlay\") {\r\n        setSidebarLayout(name);\r\n        body.setAttribute(\"data-layout\", name.value);\r\n        setSideBarStyle({ value: \"full\", label: \"Full\" });\r\n        body.setAttribute(\"data-sidebar-style\", \"full\");\r\n      } else {\r\n        setSidebarLayout(name);\r\n        body.setAttribute(\"data-layout\", name.value);\r\n      }\r\n    } else {\r\n      setSidebarLayout(name);\r\n      body.setAttribute(\"data-layout\", name.value);\r\n    }\r\n  };\r\n  const changeSideBarStyle = (name) => {\r\n    if (sidebarLayout.value === \"horizontal\") {\r\n      if (name.value === \"overlay\") {\r\n        alert(\"Sorry! Overlay is not possible in Horizontal layout.\");\r\n      } else {\r\n        setSideBarStyle(name);\r\n        setIconHover(name.value === \"icon-hover\" ? \"_i-hover\" : \"\");\r\n        body.setAttribute(\"data-sidebar-style\", name.value);\r\n      }\r\n    } else {\r\n      setSideBarStyle(name);\r\n      setIconHover(name.value === \"icon-hover\" ? \"_i-hover\" : \"\");\r\n      body.setAttribute(\"data-sidebar-style\", name.value);\r\n    }\r\n  };\r\n\r\n  const changeHeaderPostion = (name) => {\r\n    setHeaderposition(name);\r\n    body.setAttribute(\"data-header-position\", name.value);\r\n  };\r\n\r\n  const openMenuToggle = () => {\r\n    sideBarStyle.value === \"overly\"\r\n      ? setMenuToggle(true)\r\n      : setMenuToggle(false);\r\n  };\r\n\r\n  const changeBackground = (name) => {\r\n    body.setAttribute(\"data-theme-version\", name.value);\r\n    setBackground(name);\r\n  };\r\n\r\n  const changeContainerPosition = (name) => {\r\n    setcontainerPosition_(name);\r\n    body.setAttribute(\"data-container\", name.value);\r\n    name.value === \"boxed\" &&\r\n      changeSideBarStyle({ value: \"overlay\", label: \"Overlay\" });\r\n  };\r\n  \r\n  const setDemoTheme = (theme,direction) => {\r\n\r\n\tvar setAttr = {};\t\r\n\t\r\n\t\r\n\tvar themeSettings = dezThemeSet[theme];\t\r\n\t\t\r\n\tbody.setAttribute(\"data-typography\", themeSettings.typography);\r\n \r\n\tsetAttr.value = themeSettings.version;\r\n\tchangeBackground(setAttr);\r\n\t\r\n\tsetAttr.value = themeSettings.layout;\r\n\tchangeSideBarLayout(setAttr);\r\n\t\r\n\t//setAttr.value = themeSettings.primary;\r\n\tchangePrimaryColor(themeSettings.primary);\r\n\t\r\n//setAttr.value = themeSettings.navheaderBg;\r\n\tchangeNavigationHader(themeSettings.navheaderBg);\r\n\t\r\n//setAttr.value = themeSettings.headerBg;\r\n\tchnageHaderColor(themeSettings.headerBg);\r\n\t\r\n\tsetAttr.value = themeSettings.sidebarStyle;\r\n\tchangeSideBarStyle(setAttr);\r\n\t\r\n\t//setAttr.value = themeSettings.sidebarBg;\r\n\tchnageSidebarColor(themeSettings.sidebarBg);\r\n\t\r\n\tsetAttr.value = themeSettings.sidebarPosition;\r\n\tchangeSideBarPostion(setAttr);\r\n\t\r\n\tsetAttr.value = themeSettings.headerPosition;\r\n\tchangeHeaderPostion(setAttr);\r\n\t\r\n\tsetAttr.value = themeSettings.containerLayout;\r\n\tchangeContainerPosition(setAttr);\r\n\t\r\n\t//setAttr.value = themeSettings.direction;\r\n\tsetAttr.value = direction;\r\n\tchangeDirectionLayout(setAttr); \r\n\t\r\n\t};\r\n\r\n  useEffect(() => {\r\n\tconst body = document.querySelector(\"body\");\r\n    body.setAttribute(\"data-typography\", \"poppins\");\r\n    body.setAttribute(\"data-theme-version\", \"light\");\r\n    body.setAttribute(\"data-layout\", \"vertical\");\r\n    body.setAttribute(\"data-primary\", \"color_1\");\r\n    body.setAttribute(\"data-nav-headerbg\", \"color_1\");\r\n    body.setAttribute(\"data-headerbg\", \"color_1\");\r\n    body.setAttribute(\"data-sidebar-style\", \"overlay\");\r\n    body.setAttribute(\"data-sibebarbg\", \"color_1\");\r\n    body.setAttribute(\"data-primary\", \"color_1\");\r\n    body.setAttribute(\"data-sidebar-position\", \"fixed\");\r\n    body.setAttribute(\"data-header-position\", \"fixed\");\r\n    body.setAttribute(\"data-container\", \"wide\");\r\n    body.setAttribute(\"direction\", \"ltr\");\r\n\t\tlet resizeWindow = () => {\r\n\t\t\tsetWindowWidth(window.innerWidth);\r\n\t\t\tsetWindowHeight(window.innerHeight);\r\n\t\t\twindow.innerWidth >= 768 && window.innerWidth < 1024\r\n\t\t\t? body.setAttribute(\"data-sidebar-style\", \"mini\")\r\n\t\t\t: window.innerWidth <= 768\r\n\t\t\t? body.setAttribute(\"data-sidebar-style\", \"overlay\")\r\n\t\t\t: body.setAttribute(\"data-sidebar-style\", \"full\");\r\n\t\t};\r\n    resizeWindow();\r\n    window.addEventListener(\"resize\", resizeWindow);\r\n    return () => window.removeEventListener(\"resize\", resizeWindow);\r\n  }, []);\r\n\r\n  return (\r\n    <ThemeContext.Provider\r\n      value={{\r\n        body,\r\n        sideBarOption,\r\n        layoutOption,\r\n        backgroundOption,\r\n        sidebarposition,\r\n        headerPositions,\r\n        containerPosition,\r\n        directionPosition,\r\n        fontFamily,\r\n\t\tprimaryColor,\r\n        navigationHader,\r\n\t\twindowWidth,\r\n\t\twindowHeight,\r\n        changePrimaryColor,\r\n        changeNavigationHader,\r\n        changeSideBarStyle,\r\n        sideBarStyle,\r\n        changeSideBarPostion,\r\n        sidebarpositions,\r\n        changeHeaderPostion,\r\n        headerposition,\r\n        changeSideBarLayout,\r\n        sidebarLayout,\r\n        changeDirectionLayout,\r\n        changeContainerPosition,\r\n        direction,\r\n        colors,\r\n        haderColor,\r\n        chnageHaderColor,\r\n        chnageSidebarColor,\r\n        sidebarColor,\r\n        iconHover,\r\n        menuToggle,\r\n        openMenuToggle,\r\n        changeBackground,\r\n        background,\r\n        containerPosition_,\r\n\t\tsetDemoTheme,\r\n\t}}\r\n    >\r\n      {props.children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ThemeContextProvider;\r\n\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter, MemoryRouter as Router,} from 'react-router-dom';\r\n\r\nimport reportWebVitals from \"./../src/main/webapp/reportWebVitals\";\r\nimport SimpleReactLightbox from \"simple-react-lightbox\";\r\nimport  ThemeContext  from \"./../src/main/webapp/context/ThemeContext\";  \r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\r\n            <SimpleReactLightbox>\r\n                <BrowserRouter basename='/'>\r\n                    <ThemeContext>\r\n                        <App />\r\n                    </ThemeContext>  \r\n                </BrowserRouter>\r\n            </SimpleReactLightbox>\r\n\r\n\t</React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nreportWebVitals();\r\n"],"sourceRoot":""}